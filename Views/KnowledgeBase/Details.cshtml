
@model AIHelpdeskSupport.Models.KnowledgeBase
@{
    ViewData["Title"] = $"Knowledge Base: {Model.Name}";
}

<div class="page-header">
    <div>
        <h1 class="page-title">@Model.Name</h1>
        <div class="page-meta">
            <span class="badge @(Model.IsActive ? "badge-success" : "badge-secondary")">
                @(Model.IsActive ? "Active" : "Inactive")
            </span>
            <span class="badge badge-info">@Model.Department</span>
        </div>
    </div>
    <div class="page-actions">
        <a href="@Url.Action("Index")" class="btn btn-outline">
            <i class="bi bi-arrow-left"></i>
            Back to List
        </a>
        <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-outline-primary">
            <i class="bi bi-pencil"></i>
            Edit
        </a>
        <a href="@Url.Action("AddDocument", new { knowledgeBaseId = Model.Id })" class="btn btn-primary">
            <i class="bi bi-plus-lg"></i>
            Add Document
        </a>
    </div>
</div>

@if (!string.IsNullOrEmpty(Model.Description))
{
    <div class="card mb-4">
        <div class="card-body">
            <h3>Description</h3>
            <p>@Model.Description</p>
        </div>
    </div>
}

<div class="card">
    <div class="card-header">
        <h2>Documents</h2>
    </div>
    
    @if (Model.Documents.Any())
    {
        <div class="documents-table">
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Type</th>
                        <th>Created</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var doc in Model.Documents.OrderByDescending(d => d.CreatedAt))
                    {
                        <tr>
                            <td>
                                <div class="document-title">
                                    @switch (doc.Type)
                                    {
                                        case DocumentType.Text:
                                            <i class="bi bi-file-text document-icon text"></i>
                                            break;
                                        case DocumentType.TextFile:
                                            <i class="bi bi-file-earmark-text document-icon file"></i>
                                            break;
                                        case DocumentType.PDF:
                                            <i class="bi bi-file-earmark-pdf document-icon pdf"></i>
                                            break;
                                        case DocumentType.Webpage:
                                            <i class="bi bi-globe document-icon web"></i>
                                            break;
                                        case DocumentType.QAPair:
                                            <i class="bi bi-question-circle document-icon qa"></i>
                                            break;
                                    }
                                    <span>@doc.Title</span>
                                </div>
                                @if (!string.IsNullOrEmpty(doc.Description))
                                {
                                    <div class="document-description">@doc.Description</div>
                                }
                            </td>
                            <td>@doc.Type.ToString()</td>
                            <td>
                                <div class="document-date">@doc.CreatedAt.ToString("MMM d, yyyy")</div>
                                <div class="document-author">by @doc.CreatedBy</div>
                            </td>
                            <td>
                                <span class="badge @(doc.IsActive ? "badge-success" : "badge-secondary")">
                                    @(doc.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td>
                                <div class="document-actions">
                                    @if (doc.Type != DocumentType.Text)
                                    {
                                        <a href="@doc.FilePath" target="_blank" class="btn-icon" title="View">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                    }
                                    <a href="@Url.Action("EditDocument", new { id = doc.Id })" class="btn-icon" title="Edit">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                    <button class="btn-icon text-danger" title="Delete" 
                                            onclick="confirmDelete('@doc.Id', '@doc.Title', '@Model.Id')">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="card-body">
            <div class="empty-state small">
                <div class="empty-icon">
                    <i class="bi bi-files"></i>
                </div>
                <h3>No documents found</h3>
                <p>Add documents to this knowledge base to train your AI chatbots.</p>
                <a href="@Url.Action("AddDocument", new { knowledgeBaseId = Model.Id })" class="btn btn-primary">
                    <i class="bi bi-plus-lg"></i>
                    Add Document
                </a>
            </div>
        </div>
    }
</div>

<!-- Delete Document Modal -->
<div class="modal" id="deleteDocumentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Document</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the document "<span id="documentTitle"></span>"?</p>
                <p class="text-danger">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteDocumentForm" action="" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="documentId" name="id" value="" />
                    <input type="hidden" id="knowledgeBaseId" name="knowledgeBaseId" value="" />
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Page Meta */
        .page-meta {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }
        
        /* Badge Styles */
        .badge {
            font-size: 0.75rem;
            font-weight: 500;
            padding: 0.25rem 0.5rem;
            border-radius: 100px;
        }
        
        .badge-success {
            background-color: rgba(32, 201, 151, 0.1);
            color: var(--color-success);
        }
        
        .badge-secondary {
            background-color: rgba(108, 117, 125, 0.1);
            color: var(--color-secondary);
        }
        
        .badge-info {
            background-color: rgba(13, 202, 240, 0.1);
            color: var(--color-info);
        }
        
        /* Document Table */
        .documents-table {
            overflow-x: auto;
        }
        
        .table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .table th {
            padding: 1rem 1.5rem;
            font-size: 0.75rem;
            font-weight: 600;
            color: var(--color-gray-500);
            text-transform: uppercase;
            background-color: var(--color-gray-50);
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .table td {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--color-gray-200);
            vertical-align: middle;
        }
        
        .table tbody tr:hover {
            background-color: var(--color-gray-50);
        }
        
        /* Document Styles */
        .document-title {
            display: flex;
            align-items: center;
            font-weight: 500;
        }
        
        .document-icon {
            font-size: 1.25rem;
            margin-right: 0.75rem;
        }
        
        .document-icon.text {
            color: var(--color-primary);
        }
        
        .document-icon.file {
            color: var(--color-secondary);
        }
        
        .document-icon.pdf {
            color: #f40f02;
        }
        
        .document-icon.web {
            color: var(--color-info);
        }
        
        .document-icon.qa {
            color: var(--color-warning);
        }
        
        .document-description {
            margin-top: 0.25rem;
            font-size: 0.75rem;
            color: var(--color-gray-600);
            padding-left: 2rem;
        }
        
        .document-date {
            font-size: 0.875rem;
        }
        
        .document-author {
            font-size: 0.75rem;
            color: var(--color-gray-600);
        }
        
        .document-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        /* Empty State - Small Variant */
        .empty-state.small {
            padding: 2rem;
        }
        
        .empty-state.small .empty-icon {
            font-size: 2rem;
            margin-bottom: 1rem;
        }
        
        .empty-state.small h3 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
        }
        
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            overflow: auto;
        }
        
        .modal.show {
            display: block;
        }
        
        .modal-dialog {
            margin: 1.75rem auto;
            max-width: 500px;
        }
        
        .modal-content {
            background-color: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-lg);
            overflow: hidden;
        }
        
        .modal-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .modal-title {
            font-size: 1.125rem;
            font-weight: 600;
            margin: 0;
        }
        
        .btn-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            line-height: 1;
            color: var(--color-gray-500);
            cursor: pointer;
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 0.75rem;
            padding: 1.25rem 1.5rem;
            border-top: 1px solid var(--color-gray-200);
        }
    </style>
}

@section Scripts {
    <script>
        function confirmDelete(id, title, kbId) {
            // Set modal content
            document.getElementById('documentTitle').textContent = title;
            document.getElementById('documentId').value = id;
            document.getElementById('knowledgeBaseId').value = kbId;
            document.getElementById('deleteDocumentForm').action = '@Url.Action("DeleteDocument")';
            
            // Show modal
            const modal = document.getElementById('deleteDocumentModal');
            modal.classList.add('show');
            
            // Close modal on button click
            const closeButton = modal.querySelector('.btn-close');
            const cancelButton = modal.querySelector('.btn-outline');
            
            closeButton.addEventListener('click', function() {
                modal.classList.remove('show');
            });
            
            cancelButton.addEventListener('click', function() {
                modal.classList.remove('show');
            });
            
            // Close modal when clicking outside
            modal.addEventListener('click', function(event) {
                if (event.target === modal) {
                    modal.classList.remove('show');
                }
            });
        }
        
        // Check for success or error messages
        document.addEventListener('DOMContentLoaded', function() {
            const successMessage = '@TempData["SuccessMessage"]';
            const errorMessage = '@TempData["ErrorMessage"]';
            
            if (successMessage && successMessage !== '') {
                showToast('success', successMessage);
            }
            
            if (errorMessage && errorMessage !== '') {
                showToast('error', errorMessage);
            }
        });
        
        function showToast(type, message) {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast-notification ${type}`;
            
            const icon = type === 'success' 
                ? '<i class="bi bi-check-circle"></i>' 
                : '<i class="bi bi-exclamation-circle"></i>';
            
            toast.innerHTML = `
                <div class="toast-icon">
                    ${icon}
                </div>
                <div class="toast-content">
                    <div class="toast-title">${type === 'success' ? 'Success' : 'Error'}</div>
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close">
                    <i class="bi bi-x"></i>
                </button>
            `;
            
            // Add to document
            document.body.appendChild(toast);
            
            // Show toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            // Auto-hide toast after 5 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    document.body.removeChild(toast);
                }, 300);
            }, 5000);
            
            // Close button functionality
            const closeBtn = toast.querySelector('.toast-close');
            closeBtn.addEventListener('click', function() {
                toast.classList.remove('show');
                setTimeout(() => {
                    document.body.removeChild(toast);
                }, 300);
            });
        }
    </script>
}