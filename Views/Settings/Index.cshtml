@model AIHelpdeskSupport.Models.SystemSettings
@{
    ViewData["Title"] = "Settings";
}

<div class="settings-container">
    <!-- Page Header -->
    <div class="settings-header">
        <div class="settings-title">
            <h1>Settings</h1>
            <p class="text-muted">Configure your AI Helpdesk platform</p>
        </div>
        <div class="settings-actions">
            <button id="saveSettings" class="btn btn-primary">
                <i class="bi bi-check-lg me-2"></i>
                Save Changes
            </button>
        </div>
    </div>

    <!-- Settings Layout -->
    <div class="settings-layout">
        <!-- Settings Sidebar -->
        <div class="settings-sidebar">
            <div class="settings-nav">
                <div class="nav-category">
                    <span class="nav-category-title">AI Configuration</span>
                    <ul class="nav-menu" role="tablist">
                        <li class="nav-item">
                            <button class="nav-link active" id="flowise-tab" data-bs-toggle="tab" data-bs-target="#flowise-api" type="button" role="tab" aria-controls="flowise-api" aria-selected="true">
                                <i class="bi bi-cpu"></i>
                                <span>Flowise API</span>
                            </button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link" id="departments-tab" data-bs-toggle="tab" data-bs-target="#departments" type="button" role="tab" aria-controls="departments" aria-selected="false">
                                <i class="bi bi-building"></i>
                                <span>Departments</span>
                            </button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Settings Content -->
        <div class="settings-content">
            <div class="tab-content">
                <!-- Flowise API Settings Panel -->
                <div class="tab-pane fade show active" id="flowise-api" role="tabpanel" aria-labelledby="flowise-tab">
                    <div class="settings-card">
                        <div class="settings-card-header">
                            <div>
                                <h2>Flowise API Settings</h2>
                                <p>Configure your Flowise API connection for AI chatbot integration</p>
                            </div>
                        </div>
                        <div class="settings-card-body">
                            <form asp-action="SaveApiSettings" method="post" class="settings-form">
                                @Html.AntiForgeryToken()
                                <div class="form-group">
                                    <label for="FlowiseApiUrl" class="form-label">Flowise API URL</label>
                                    <input type="text" id="FlowiseApiUrl" name="FlowiseApiUrl" class="form-control" value="@Model.FlowiseApiUrl" required>
                                    <div class="form-text">The URL of your Flowise API endpoint (e.g., http://your-server:3000/api/)</div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="FlowiseApiKey" class="form-label">API Key</label>
                                    <div class="input-group">
                                        <input type="password" id="FlowiseApiKey" name="FlowiseApiKey" class="form-control" value="@Model.FlowiseApiKey">
                                        <button class="btn btn-outline toggle-password" type="button" id="toggleApiKey" aria-label="Toggle password visibility">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                    <div class="form-text">Your Flowise API key for authentication</div>
                                </div>
                                
                                <div class="form-actions">
                                    <button type="submit" class="btn btn-primary">
                                        <i class="bi bi-save me-2"></i>Save API Settings
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary" id="testApiConnection">
                                        <i class="bi bi-lightning me-2"></i>Test Connection
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                
                <!-- Departments Tab -->
                <div class="tab-pane fade" id="departments" role="tabpanel" aria-labelledby="departments-tab">
                    <div class="settings-card">
                        <div class="settings-card-header">
                            <div>
                                <h2>Department Management</h2>
                                <p>Configure departments for organizational structure and chatbot routing</p>
                            </div>
                            <button type="button" class="btn btn-primary btn-with-icon" data-bs-toggle="modal" data-bs-target="#addDepartmentModal">
                                <i class="bi bi-plus"></i>
                                <span>Add Department</span>
                            </button>
                        </div>
                        <div class="settings-card-body">
                            <div class="table-container">
                                <table class="settings-table">
                                    <thead>
                                        <tr>
                                            <th>Department Name</th>
                                            <th>Chatbots</th>
                                            <th>Users</th>
                                            <th class="text-end">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (ViewBag.Departments != null)
                                        {
                                            @foreach (var dept in ViewBag.Departments)
                                            {
                                                <tr>
                                                    <td>
                                                        <div class="department-name">@dept.Name</div>
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-light text-dark">@dept.ChatbotCount</span>
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-light text-dark">@dept.UserCount</span>
                                                    </td>
                                                    <td>
                                                        <div class="table-actions">
<button class="btn-icon edit-department" title="Edit" data-name="@dept.Name" data-bs-toggle="modal" data-bs-target="#editDepartmentModal">
  <i class="bi bi-pencil"></i>
</button>
<button class="btn-icon delete-department" title="Delete" data-name="@dept.Name" data-bs-toggle="modal" data-bs-target="#deleteDepartmentModal">
  <i class="bi bi-trash"></i>
</button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="4" class="text-center py-4">
                                                    <div class="empty-state">
                                                        <i class="bi bi-building"></i>
                                                        <p>No departments found</p>
                                                        <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addDepartmentModal">
                                                            Add Your First Department
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Department Modal -->
<div class="modal fade" id="addDepartmentModal" tabindex="-1" aria-labelledby="addDepartmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form asp-action="AddDepartment" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="addDepartmentModalLabel">
                        <i class="bi bi-plus-circle me-2"></i>Add Department
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="newName" class="form-label">Department Name</label>
                        <input type="text" id="newName" name="newName" class="form-control" required 
                               placeholder="Enter department name">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Department</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Department Modal -->
<div class="modal fade" id="editDepartmentModal" tabindex="-1" aria-labelledby="editDepartmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form asp-action="UpdateDepartment" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="editDepartmentModalLabel">
                        <i class="bi bi-pencil-square me-2"></i>Edit Department
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="oldName" name="oldName">
                    <div class="form-group">
                        <label for="editNewName" class="form-label">Department Name</label>
                        <input type="text" id="editNewName" name="newName" class="form-control" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Department Modal -->
<div class="modal fade" id="deleteDepartmentModal" tabindex="-1" aria-labelledby="deleteDepartmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form asp-action="DeleteDepartment" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteDepartmentModalLabel">
                        <i class="bi bi-exclamation-triangle me-2 text-danger"></i>Delete Department
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="departmentName" name="departmentName">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-circle me-2"></i>
                        <span>Are you sure you want to delete this department? This action cannot be undone.</span>
                    </div>
                    <p class="text-danger mt-3 mb-0">
                        <strong>Note:</strong> Departments with assigned users or chatbots cannot be deleted.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-trash me-2"></i>Delete Department
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Modern Settings Page Styles */
        :root {
            --settings-sidebar-width: 280px;
            --settings-border-color: rgba(0, 0, 0, 0.1);
            --settings-card-radius: 12px;
            --settings-transition: all 0.2s ease-in-out;
        }

        [data-theme="dark"] {
            --settings-border-color: rgba(255, 255, 255, 0.1);
        }

        /* Container & Layout */
        .settings-container {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            max-width: 1400px;
            margin: 0 auto;
            padding-bottom: 3rem;
        }

        .settings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
            padding-bottom: 1rem;
            margin-bottom: 1rem;
            border-bottom: 1px solid var(--settings-border-color);
        }

        .settings-title h1 {
            font-size: 1.75rem;
            font-weight: 700;
            margin: 0 0 0.5rem;
            color: var(--color-gray-900);
        }

        .settings-title p {
            margin: 0;
            color: var(--color-gray-500);
        }

        .settings-layout {
            display: flex;
            gap: 1.5rem;
            min-height: 70vh;
        }

        /* Sidebar Styles */
        .settings-sidebar {
            width: var(--settings-sidebar-width);
            flex-shrink: 0;
        }

        .settings-nav {
            position: sticky;
            top: 1.5rem;
        }

        .nav-category {
            margin-bottom: 1.5rem;
        }

        .nav-category-title {
            display: block;
            font-size: 0.75rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: var(--color-gray-500);
            padding: 0 0.5rem;
            margin-bottom: 0.75rem;
        }

        .nav-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .nav-item {
            margin-bottom: 0.5rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            width: 100%;
            padding: 0.875rem 1rem;
            background: none;
            border: none;
            text-align: left;
            font-size: 0.9375rem;
            color: var(--color-gray-700);
            border-radius: 8px;
            transition: var(--settings-transition);
            cursor: pointer;
            gap: 0.75rem;
        }

        .nav-link i {
            font-size: 1.25rem;
            color: var(--color-gray-500);
            transition: var(--settings-transition);
        }

        .nav-link:hover {
            background-color: var(--color-gray-100);
            color: var(--color-gray-900);
        }

        .nav-link:hover i {
            color: var(--color-gray-700);
        }

        .nav-link.active {
            background-color: rgba(13, 110, 253, 0.08);
            color: var(--color-primary);
            font-weight: 500;
        }

        .nav-link.active i {
            color: var(--color-primary);
        }

        /* Content Area */
        .settings-content {
            flex: 1;
            min-width: 0;
        }

        .settings-card {
            background-color: white;
            border-radius: var(--settings-card-radius);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.06);
            border: 1px solid var(--settings-border-color);
            overflow: hidden;
            transition: var(--settings-transition);
        }

        .settings-card-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--settings-border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .settings-card-header h2 {
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0 0 0.5rem;
        }

        .settings-card-header p {
            color: var(--color-gray-500);
            margin: 0;
            font-size: 0.875rem;
        }

        .settings-card-body {
            padding: 1.5rem;
        }

        /* Form Elements */
        .settings-form {
            max-width: 700px;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: var(--color-gray-700);
        }

        .form-control {
            width: 100%;
            padding: 0.625rem 0.875rem;
            font-size: 0.9375rem;
            line-height: 1.5;
            border: 1px solid var(--color-gray-300);
            border-radius: 6px;
            transition: var(--settings-transition);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--color-primary);
            box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.15);
        }

        .form-text {
            font-size: 0.8125rem;
            color: var(--color-gray-500);
            margin-top: 0.375rem;
        }

        .input-group {
            display: flex;
        }

        .input-group .form-control {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }

        .toggle-password {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
            border-left: none;
        }

        .form-actions {
            display: flex;
            gap: 0.75rem;
            margin-top: 2rem;
        }

        /* Table Styles */
        .table-container {
            width: 100%;
            overflow-x: auto;
        }

        .settings-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        .settings-table th {
            font-size: 0.8125rem;
            font-weight: 600;
            color: var(--color-gray-500);
            text-transform: uppercase;
            letter-spacing: 0.03em;
            padding: 0.75rem 1rem;
            text-align: left;
            border-bottom: 1px solid var(--settings-border-color);
        }

        .settings-table td {
            padding: 1rem;
            vertical-align: middle;
            border-bottom: 1px solid var(--settings-border-color);
        }

        .settings-table tr:last-child td {
            border-bottom: none;
        }

        .department-name {
            font-weight: 500;
            color: var(--color-gray-800);
        }

        .table-actions {
            display: flex;
            justify-content: flex-end;
            gap: 0.375rem;
        }

        /* Buttons and Actions */
        .btn-with-icon {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-with-icon i {
            font-size: 0.9375rem;
        }

        .btn-icon {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 36px;
            height: 36px;
            border-radius: 6px;
            border: none;
            background: none;
            color: var(--color-gray-600);
            transition: var(--settings-transition);
            cursor: pointer;
        }

        .btn-icon:hover {
            background-color: var(--color-gray-100);
            color: var(--color-gray-800);
        }

        .btn-icon.text-danger:hover {
            background-color: #fff5f5;
        }

        /* Empty State */
        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.75rem;
            padding: 2rem 0;
        }

        .empty-state i {
            font-size: 2rem;
            color: var(--color-gray-300);
        }

        .empty-state p {
            color: var(--color-gray-500);
            margin: 0;
        }

        /* Badges */
        .badge {
            font-size: 0.75rem;
            font-weight: 500;
            padding: 0.25rem 0.625rem;
            border-radius: 30px;
        }

        /* Modal Customizations */
        .modal-content {
            border: none;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .modal-header {
            border-bottom-color: var(--settings-border-color);
        }

        .modal-footer {
            border-top-color: var(--settings-border-color);
        }

        /* Toast Notifications */
        .toast-notification {
            position: fixed;
            bottom: 24px;
            right: 24px;
            max-width: 380px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1), 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 1rem;
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
            transform: translateY(30px);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55);
            z-index: 1060;
            border-left: 4px solid;
        }

        .toast-notification.success {
            border-left-color: var(--color-success);
        }

        .toast-notification.error {
            border-left-color: var(--color-danger);
        }

        .toast-notification.show {
            transform: translateY(0);
            opacity: 1;
        }

        .toast-icon {
            font-size: 1.25rem;
            flex-shrink: 0;
        }

        .toast-notification.success .toast-icon {
            color: var(--color-success);
        }

        .toast-notification.error .toast-icon {
            color: var(--color-danger);
        }

        .toast-content {
            flex: 1;
            min-width: 0;
        }

        .toast-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .toast-message {
            font-size: 0.875rem;
            color: var(--color-gray-600);
        }

        .toast-close {
            background: none;
            border: none;
            font-size: 1.125rem;
            color: var(--color-gray-500);
            cursor: pointer;
            flex-shrink: 0;
            margin: -0.5rem -0.5rem 0 0;
            padding: 0.5rem;
        }

        /* Responsive Adjustments */
        @@media (max-width: 991.98px) {
            .settings-layout {
                flex-direction: column;
            }
            
            .settings-sidebar {
                width: 100%;
            }
            
            .settings-nav {
                position: static;
            }
            
            .nav-menu {
                display: flex;
                flex-wrap: wrap;
                gap: 0.5rem;
            }
            
            .nav-item {
                margin-bottom: 0;
            }
            
            .nav-link {
                padding: 0.625rem 1rem;
            }
        }

        @@media (max-width: 767.98px) {
            .settings-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .settings-actions {
                width: 100%;
            }
            
            .settings-card-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .form-actions .btn {
                width: 100%;
            }
        }
    </style>
}

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Tab functionality
        const tabLinks = document.querySelectorAll('.nav-link[data-bs-toggle="tab"]');
        const tabPanes = document.querySelectorAll('.tab-pane');
        
        tabLinks.forEach(link => {
            link.addEventListener('click', function() {
                // Hide all tab panes
                tabPanes.forEach(pane => {
                    pane.classList.remove('show', 'active');
                });
                
                // Remove active class from all tab links
                tabLinks.forEach(tab => {
                    tab.classList.remove('active');
                    tab.setAttribute('aria-selected', 'false');
                });
                
                // Add active class to clicked tab
                this.classList.add('active');
                this.setAttribute('aria-selected', 'true');
                
                // Show target tab pane
                const target = document.querySelector(this.getAttribute('data-bs-target'));
                target.classList.add('show', 'active');
            });
        });
        
        // Toggle API Key visibility
        const toggleApiKey = document.getElementById('toggleApiKey');
        const apiKeyInput = document.getElementById('FlowiseApiKey');
        
        if (toggleApiKey && apiKeyInput) {
            toggleApiKey.addEventListener('click', function() {
                const type = apiKeyInput.getAttribute('type') === 'password' ? 'text' : 'password';
                apiKeyInput.setAttribute('type', type);
                
                const icon = toggleApiKey.querySelector('i');
                icon.classList.toggle('bi-eye');
                icon.classList.toggle('bi-eye-slash');
            });
        }
        
        // Test API Connection
        const testApiConnectionBtn = document.getElementById('testApiConnection');
        if (testApiConnectionBtn) {
            testApiConnectionBtn.addEventListener('click', async function() {
                const apiUrl = document.getElementById('FlowiseApiUrl').value;
                const apiKey = document.getElementById('FlowiseApiKey').value;
                
                if (!apiUrl) {
                    showToast('API URL is required', 'error');
                    return;
                }
                
                // Show loading state
                const originalText = this.innerHTML;
                this.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Testing...';
                this.disabled = true;
                
                try {
                    const response = await fetch('/api/test/flowise', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-API-URL': apiUrl,
                            'X-API-KEY': apiKey
                        }
                    });
                    
                    const data = await response.json();
                    showToast(
                        data.configured ? 'API connection successful!' : 'API connection failed', 
                        data.configured ? 'success' : 'error'
                    );
                } catch (error) {
                    showToast('Error testing API connection: ' + error, 'error');
                } finally {
                    // Restore button state
                    this.innerHTML = originalText;
                    this.disabled = false;
                }
            });
        }
        
        // Department actions
        // Edit department
        const editButtons = document.querySelectorAll('.edit-department');
        editButtons.forEach(button => {
            button.addEventListener('click', function() {
                const deptName = this.getAttribute('data-name');
                document.getElementById('oldName').value = deptName;
                document.getElementById('editNewName').value = deptName;
            });
        });
        
        // Delete department
        const deleteButtons = document.querySelectorAll('.delete-department');
        deleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                const deptName = this.getAttribute('data-name');
                document.getElementById('departmentName').value = deptName;
            });
        });
        
        // Toast notification function
        function showToast(message, type = 'success') {
            // Create toast notification
            const toast = document.createElement('div');
            toast.className = `toast-notification ${type}`;
            toast.innerHTML = `
                <div class="toast-icon">
                    <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                </div>
                <div class="toast-content">
                    <div class="toast-title">${type === 'success' ? 'Success' : 'Error'}</div>
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close">
                    <i class="bi bi-x"></i>
                </button>
            `;
            
            // Add to document
            document.body.appendChild(toast);
            
            // Show toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 10);
            
            // Auto-hide toast after 5 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    document.body.removeChild(toast);
                }, 300);
            }, 5000);
            
            // Close button functionality
            const closeBtn = toast.querySelector('.toast-close');
            closeBtn.addEventListener('click', function() {
                toast.classList.remove('show');
                setTimeout(() => {
                    document.body.removeChild(toast);
                }, 300);
            });
        }
        
        // Show toast messages if they exist in TempData
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
            showToast('@TempData["SuccessMessage"]', 'success');
            </text>
        }
        
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
            showToast('@TempData["ErrorMessage"]', 'error');
            </text>
        }
    });
</script>
}