@model AIHelpdeskSupport.Models.SystemSettings
@{
    ViewData["Title"] = "Settings";
}

<div class="page-header">
    <div>
        <h1 class="page-title">Settings</h1>
        <p class="text-muted">Configure your AI Helpdesk platform</p>
    </div>
    <div class="page-actions">
        <button id="saveSettings" class="btn btn-primary">
            <i class="bi bi-check-lg me-2"></i>
            Save Changes
        </button>
    </div>
</div>

<div class="settings-layout">
    <!-- Settings Navigation -->
    <div class="settings-nav">
        <div class="nav-section">
            <div class="nav-section-title">AI CONFIGURATION</div>
            <ul class="nav-tabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#flowise-api" type="button"
                        role="tab">
                        <i class="bi bi-cpu me-2"></i>
                        <span>Flowise API Setting</span>
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#departments" type="button"
                        role="tab">
                        <i class="bi bi-building me-2"></i>
                        <span>Departments</span>
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <!-- Settings Content -->
    <div class="settings-content">
        <div class="tab-content">
            <!-- Flowise API Settings -->
            <div class="tab-pane fade show active" id="flowise-api" role="tabpanel">
                <div class="settings-panel">
                    <div class="panel-header">
                        <h2>Flowise API Settings</h2>
                        <p>Configure your Flowise API connection</p>
                    </div>

                    <div class="panel-body">
                        <div class="settings-section">
                            <form asp-action="SaveApiSettings" method="post" id="flowiseApiForm">
                                @Html.AntiForgeryToken()
                                <div class="form-group mb-3">
                                    <label for="FlowiseApiUrl" class="form-label">Flowise API URL</label>
                                    <div class="input-wrapper">
                                        <i class="input-icon bi bi-link-45deg"></i>
                                        <input type="text" id="FlowiseApiUrl" name="FlowiseApiUrl" class="form-control with-icon"
                                            value="@Model.FlowiseApiUrl" placeholder="http://localhost:3000/api/">
                                    </div>
                                    <div class="form-text">The URL of your Flowise API endpoint (Example: http://localhost:3000/api/)</div>
                                </div>

                                <div class="form-group mb-3">
                                    <label for="FlowiseApiKey" class="form-label">API Key</label>
                                    <div class="input-group">
                                        <div class="input-wrapper w-100">
                                            <i class="input-icon bi bi-key"></i>
                                            <input type="password" id="FlowiseApiKey" name="FlowiseApiKey"
                                                class="form-control with-icon" value="@Model.FlowiseApiKey">
                                        </div>
                                        <button class="btn btn-outline-secondary" type="button" id="toggleApiKey">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                    <div class="form-text">Your Flowise API key for authentication</div>
                                </div>

                                <div class="form-group mb-3">
                                    <button type="button" id="testApiConnection" class="btn btn-outline-primary">
                                        <i class="bi bi-plug-fill me-2"></i> Test Connection
                                    </button>
                                    <div id="apiConnectionStatus" class="mt-2"></div>
                                </div>

                                <div class="form-group mb-3">
                                    <button type="button" id="getChatflows" class="btn btn-outline-secondary">
                                        <i class="bi bi-list-check me-2"></i> List Chatflows
                                    </button>
                                </div>

                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary" id="saveApiSettings">
                                        <i class="bi bi-save me-2"></i> Save API Settings
                                    </button>
                                </div>
                            </form>

                         <!-- Chatflows List Container with Modern Design -->
   <div id="chatflowsContainer" class="mt-4">
    <div id="chatflowsHeader" class="d-flex justify-content-between align-items-center mb-3" style="display: none;">
        <h4 class="m-0">Available Chatflows</h4>
        <span class="badge bg-primary rounded-pill" id="chatflowsCount">0</span>
    </div>
    <div id="chatflowsList" class="chatflows-grid"></div>
</div>
                     </div>
                 </div>
             </div>
         </div>

         <!-- Departments Tab -->
         <div class="tab-pane fade" id="departments" role="tabpanel">
             <div class="settings-panel">
                 <div class="panel-header">
                     <h2>Department Management</h2>
                     <p>Configure departments for organizational structure</p>
                 </div>

                 <div class="panel-body">
                     <div class="settings-section">
                         <div class="section-header-actions">
                             <h3>Departments</h3>
                             <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal"
                                 data-bs-target="#addDepartmentModal">
                                 <i class="bi bi-plus"></i> Add Department
                             </button>
                         </div>

                         <div class="table-responsive">
                             <table class="table table-striped table-hover">
                                 <thead>
                                     <tr>
                                         <th>Department Name</th>
                                         <th>Users</th>
                                         <th>Chatbots</th>
                                         <th>Created</th>
                                         <th>Actions</th>
                                     </tr>
                                 </thead>
                                 <tbody>
                                     @if (ViewBag.Departments != null && ViewBag.Departments.Count > 0)
                                     {
                                         @foreach (var dept in ViewBag.Departments)
                                         {
                                             <tr>
                                                 <td>
                                                     <div class="department-name">@dept.Name</div>
                                                 </td>
                                                 <td>@dept.UserCount</td>
                                                 <td>@dept.ChatbotCount</td>
                                                 <td>
                                                     <span title="Created by: @dept.CreatedBy">@(dept.CreatedAt?.ToString("MM/dd/yyyy") ?? "-")</span>                     
                                                 </td>
                                                 <td>
                                                     <div class="row-actions">
                                                         <button class="btn-icon edit-department" title="Edit"
                                                             data-name="@dept.Name" data-bs-toggle="modal"
                                                             data-bs-target="#editDepartmentModal">
                                                             <i class="bi bi-pencil"></i>
                                                         </button>
                                                         <button
                                                             class="btn-icon delete-department @(dept.UserCount > 0 ? "disabled" : "")"
                                                             title="Delete" data-name="@dept.Name" data-bs-toggle="modal"
                                                             data-bs-target="#deleteDepartmentModal" @(dept.UserCount > 0 ?
                                                             "disabled" : "")>
                                                             <i class="bi bi-trash"></i>
                                                         </button>
                                                     </div>
                                                 </td>
                                             </tr>
                                         }
                                     }
                                     else
                                     {
                                         <tr>
                                             <td colspan="5" class="text-center">No departments found. Add a department
                                                 to get started.</td>
                                         </tr>
                                     }
                                 </tbody>
                             </table>
                         </div>
                     </div>
                 </div>
             </div>
         </div>
     </div>
 </div>
</div>

<!-- Add Department Modal -->
<div class="modal fade" id="addDepartmentModal" tabindex="-1" aria-hidden="true">
 <div class="modal-dialog">
     <div class="modal-content">
         <form asp-action="AddDepartment" method="post">
             @Html.AntiForgeryToken()
             <div class="modal-header">
                 <h5 class="modal-title">Add Department</h5>
                 <button type="button" class="btn-close" data-bs-dismiss="modal"
                     aria-label="Close"></button>
             </div>
             <div class="modal-body">
                 <div class="form-group">
                     <label for="newName" class="form-label">Department Name</label>
                     <input type="text" id="newName" name="newName" class="form-control" required>
                 </div>
             </div>
             <div class="modal-footer">
                 <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                 <button type="submit" class="btn btn-primary">Add Department</button>
             </div>
         </form>
     </div>
 </div>
</div>

<!-- Edit Department Modal -->
<div class="modal fade" id="editDepartmentModal" tabindex="-1" aria-hidden="true">
 <div class="modal-dialog">
     <div class="modal-content">
         <form asp-action="UpdateDepartment" method="post">
             @Html.AntiForgeryToken()
             <div class="modal-header">
                 <h5 class="modal-title">Edit Department</h5>
                 <button type="button" class="btn-close" data-bs-dismiss="modal"
                     aria-label="Close"></button>
             </div>
             <div class="modal-body">
                 <input type="hidden" id="oldName" name="oldName">
                 <div class="form-group">
                     <label for="editNewName" class="form-label">Department Name</label>
                     <input type="text" id="editNewName" name="newName" class="form-control" required>
                 </div>
             </div>
             <div class="modal-footer">
                 <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                 <button type="submit" class="btn btn-primary">Save Changes</button>
             </div>
         </form>
     </div>
 </div>
</div>

<!-- Delete Department Modal -->
<div class="modal fade" id="deleteDepartmentModal" tabindex="-1" aria-hidden="true">
 <div class="modal-dialog">
     <div class="modal-content">
         <form asp-action="DeleteDepartment" method="post">
             @Html.AntiForgeryToken()
             <div class="modal-header">
                 <h5 class="modal-title">Delete Department</h5>
                 <button type="button" class="btn-close" data-bs-dismiss="modal"
                     aria-label="Close"></button>
             </div>
             <div class="modal-body">
                 <input type="hidden" id="departmentName" name="departmentName">
                 <p>Are you sure you want to delete this department? This action cannot be undone.</p>
                 <p class="text-danger">Note: Departments with assigned users cannot be deleted.</p>
             </div>
             <div class="modal-footer">
                 <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                 <button type="submit" class="btn btn-danger">Delete Department</button>
             </div>
         </form>
     </div>
 </div>
</div>

@section Styles {
 <style>
     /* Settings Layout */
     .settings-layout {
         display: flex;
         gap: 1.5rem;
         min-height: calc(100vh - 200px);
     }

     .settings-nav {
         width: 260px;
         flex-shrink: 0;
     }

     .settings-content {
         flex: 1;
         min-width: 0;
     }

     /* Settings Navigation */
     .nav-section {
         margin-bottom: 1.5rem;
     }

     .nav-section-title {
         font-size: 0.75rem;
         font-weight: 600;
         text-transform: uppercase;
         color: var(--color-gray-500);
         padding: 0 0.75rem;
         margin-bottom: 0.5rem;
     }

     .nav-tabs {
         list-style: none;
         padding: 0;
         margin: 0;
     }

     .nav-item {
         margin-bottom: 0.25rem;
     }

     .nav-link {
         display: flex;
         align-items: center;
         padding: 0.75rem;
         font-size: 0.875rem;
         color: var(--color-gray-700);
         border-radius: var(--border-radius);
         transition: all 0.3s ease;
         border: none;
         background: none;
         width: 100%;
         text-align: left;
         cursor: pointer;
     }

     .nav-link i {
         margin-right: 0.75rem;
         font-size: 1.125rem;
         color: var(--color-gray-500);
         transition: color 0.3s ease;
     }

     .nav-link:hover {
         background-color: var(--color-gray-100);
         color: var(--color-gray-900);
     }

     .nav-link:hover i {
         color: var(--color-gray-700);
     }

     .nav-link.active {
         background-color: rgba(13, 110, 253, 0.1);
         color: var(--color-primary);
         font-weight: 500;
     }

     .nav-link.active i {
         color: var(--color-primary);
     }

     /* Settings Panel */
     .settings-panel {
         background-color: white;
         border-radius: var(--border-radius-lg);
         box-shadow: var(--shadow);
         overflow: hidden;
     }

     .panel-header {
         padding: 1.5rem;
         border-bottom: 1px solid var(--color-gray-200);
     }

     .panel-header h2 {
         font-size: 1.25rem;
         font-weight: 600;
         margin: 0 0 0.5rem;
     }

     .panel-header p {
         color: var(--color-gray-500);
         margin: 0;
         font-size: 0.875rem;
     }

     .panel-body {
         padding: 1.5rem;
     }

     /* Settings Sections */
     .settings-section {
         margin-bottom: 2rem;
         padding-bottom: 2rem;
         border-bottom: 1px solid var(--color-gray-200);
     }

     .settings-section:last-child {
         margin-bottom: 0;
         padding-bottom: 0;
         border-bottom: none;
     }

     .settings-section h3 {
         font-size: 1rem;
         font-weight: 600;
         margin: 0 0 1.25rem;
         color: var(--color-gray-800);
     }

     .section-header-actions {
         display: flex;
         justify-content: space-between;
         align-items: center;
         margin-bottom: 1.25rem;
     }

     .section-header-actions h3 {
         margin: 0;
     }

     /* Button icons */
     .btn-icon {
         border: none;
         background: none;
         padding: 0.25rem;
         cursor: pointer;
         margin-right: 0.5rem;
         color: var(--color-gray-500);
     }

     .btn-icon:hover {
         color: var(--color-primary);
     }

     .btn-icon i {
         font-size: 1rem;
     }

/* Redesigned Chatflows List */
.chatflows-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    margin-top: 1.5rem;
}

.chatflow-card {
    border: 1px solid var(--bs-border-color);
    border-radius: 0.75rem;
    padding: 1.25rem;
    background-color: white;
    transition: all 0.25s ease;
    position: relative;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.chatflow-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    border-color: var(--bs-primary);
}

.chatflow-card .card-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1rem;
    padding: 0;
    background: transparent;
    border: none;
}

.chatflow-card .card-title {
    font-weight: 600;
    font-size: 1.1rem;
    margin: 0;
    color: var(--bs-gray-800);
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    max-width: 180px;
}

.chatflow-card .badge {
    font-size: 0.75rem;
    padding: 0.35rem 0.65rem;
    font-weight: 500;
    letter-spacing: 0.02em;
    background: rgba(var(--bs-primary-rgb), 0.1);
    color: var(--bs-primary);
    border: 1px solid rgba(var(--bs-primary-rgb), 0.2);
}

.chatflow-card .card-meta {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.chatflow-card .card-info {
    font-size: 0.8125rem;
    color: var(--bs-gray-600);
    display: flex;
    align-items: center;
}

.chatflow-card .card-info i {
    margin-right: 0.35rem;
    font-size: 0.875rem;
    color: var(--bs-gray-500);
}

.chatflow-card .card-description {
    font-size: 0.875rem;
    color: var(--bs-gray-700);
    margin-bottom: 1rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

.chatflow-card .card-actions {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    margin-top: 1rem;
    border-top: 1px solid var(--bs-border-color);
    padding-top: 1rem;
}

.chatflow-card .btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.8125rem;
    font-weight: 500;
}

.chatflow-card .btn-sm i {
    margin-right: 0.35rem;
}

.chatflow-empty {
    padding: 3rem 1.5rem;
    border-radius: 0.75rem;
    background-color: rgba(var(--bs-light-rgb), 0.7);
    text-align: center;
    margin-top: 1rem;
    border: 1px dashed var(--bs-border-color);
}

.chatflow-error {
    padding: 1.5rem;
    border-radius: 0.75rem;
    background-color: #f8f9fa;
    text-align: center;
    margin-top: 1rem;
    border: 1px solid var(--bs-border-color);
}

     /* Responsive Adjustments */
     @@media(max-width: 991px) {
         .settings-layout {
             flex-direction: column;
         }

         .settings-nav {
             width: 100%;
         }

         .nav-tabs {
             display: flex;
             flex-wrap: wrap;
             gap: 0.5rem;
         }

         .nav-item {
             margin-bottom: 0;
         }

         .nav-link {
             padding: 0.5rem 0.75rem;
         }

         .nav-link i {
             margin-right: 0.5rem;
         }
         
         .chatflows-grid {
             grid-template-columns: 1fr;
         }
     }

     /* Toast notifications */
     .toast-container {
       position: fixed;
       bottom: 20px;
       left: 20px;
       z-index: 9999;
       max-width: 350px;
     }

     .toast {
       background-color: white;
       color: #212529;
       border-radius: 4px;
       box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
       overflow: hidden;
       margin-bottom: 10px;
       opacity: 1;
       transition: opacity 0.3s ease;
     }

     .toast.bg-success {
       border-left: 4px solid #28a745;
       background-color: #f8fff9;
     }

     .toast.bg-danger {
       border-left: 4px solid #dc3545;
       background-color: #fff9f9;
     }

     .toast .toast-header {
       padding: 0.5rem 1rem;
       background-color: transparent;
       border-bottom: 1px solid rgba(0, 0, 0, 0.05);
       display: flex;
       align-items: center;
       justify-content: space-between;
     }

     .toast .toast-body {
       padding: 0.75rem 1rem;
       color: #495057;
     }

     .toast.bg-success .toast-body {
       color: #155724;
     }

     .toast.bg-danger .toast-body {
       color: #721c24;
     }
 </style>
}

@section Scripts {
 <script>
     document.addEventListener('DOMContentLoaded', function () {
         // Toggle API Key visibility
         document.getElementById('toggleApiKey').addEventListener('click', function() {
             const apiKeyInput = document.getElementById('FlowiseApiKey');
             const type = apiKeyInput.getAttribute('type') === 'password' ? 'text' : 'password';
             apiKeyInput.setAttribute('type', type);
             
             const icon = this.querySelector('i');
             icon.classList.toggle('bi-eye');
             icon.classList.toggle('bi-eye-slash');
         });

         // Test API Connection
         document.getElementById('testApiConnection').addEventListener('click', async function() {
             const statusElement = document.getElementById('apiConnectionStatus');
             statusElement.innerHTML = '<span class="text-warning"><i class="bi bi-hourglass-split"></i> Testing connection...</span>';
             
             try {
                 // First save current settings
                 const form = document.getElementById('flowiseApiForm');
                 const formData = new FormData(form);
                 
                 // Use fetch API to submit the form
                 const saveResponse = await fetch('/Settings/SaveApiSettings', {
                     method: 'POST',
                     body: formData,
                     headers: {
                         'RequestVerificationToken': form.querySelector('input[name="__RequestVerificationToken"]').value
                     }
                 });
                 
                 if (!saveResponse.ok) {
                     const errorText = await saveResponse.text();
                     throw new Error(`Failed to save API settings: ${saveResponse.status} - ${errorText}`);
                 }
                 
                 // Wait a moment to ensure settings propagate
                 await new Promise(resolve => setTimeout(resolve, 800));
                 
                 // Test connection with fresh settings
                 const testResponse = await fetch('/api/test/flowise-connection');
                 if (!testResponse.ok) {
                     throw new Error(`HTTP error: ${testResponse.status}`);
                 }
                 
                 const result = await testResponse.json();
                 console.log('Connection test result:', result);
                 
                 if (result.success) {
                     statusElement.innerHTML = '<span class="text-success"><i class="bi bi-check-circle"></i> Connection successful!</span>';
                 } else {
                     statusElement.innerHTML = `<span class="text-danger"><i class="bi bi-exclamation-triangle"></i> Connection failed: ${result.message}</span>`;
                     console.error('Connection details:', result);
                 }
             } catch (error) {
                 statusElement.innerHTML = `<span class="text-danger"><i class="bi bi-exclamation-triangle"></i> Error: ${error.message}</span>`;
                 console.error('Error testing connection:', error);
             }
         });
         
         // Get Chatflows - Updated with new design
         document.getElementById('getChatflows').addEventListener('click', async function() {
             const chatflowsContainer = document.getElementById('chatflowsContainer');
             const chatflowsList = document.getElementById('chatflowsList');
             const chatflowsHeader = document.getElementById('chatflowsHeader');
             const chatflowsCount = document.getElementById('chatflowsCount');
             
             chatflowsList.innerHTML = '<div class="d-flex justify-content-center my-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
             chatflowsHeader.style.display = 'none';
             
             try {
                 // First save current settings
                 const form = document.getElementById('flowiseApiForm');
                 const formData = new FormData(form);
                 
                 const saveResponse = await fetch('/Settings/SaveApiSettings', {
                     method: 'POST',
                     body: formData,
                     headers: {
                         'RequestVerificationToken': form.querySelector('input[name="__RequestVerificationToken"]').value
                     }
                 });
                 
                 if (!saveResponse.ok) {
                     throw new Error(`Failed to save API settings: ${saveResponse.status}`);
                 }
                 
                 // Wait to ensure settings propagate
                 await new Promise(resolve => setTimeout(resolve, 800));
                 
                 // When constructing the URL for testing, ensure no duplicate "api/"
                 const apiUrl = document.getElementById('FlowiseApiUrl').value;
                 const apiKey = document.getElementById('FlowiseApiKey').value;
                 // Standardize URL to ensure it ends with a slash
                 const cleanApiUrl = apiUrl.endsWith('/') ? apiUrl : apiUrl + '/';
                 
                 // Add timestamp to prevent caching
                 const timestamp = new Date().getTime();
                 const random = Math.floor(Math.random() * 1000000);
                 const response = await fetch(`/api/test/direct-chatflows?url=${encodeURIComponent(cleanApiUrl)}&apiKey=${encodeURIComponent(apiKey)}&_=${timestamp}&r=${random}`, {
                     headers: {
                         'Cache-Control': 'no-cache, no-store, must-revalidate',
                         'Pragma': 'no-cache',
                         'Expires': '0'
                     }
                 });
                 
                 if (!response.ok) {
                     const errorText = await response.text();
                     throw new Error(`HTTP error: ${response.status} - ${errorText}`);
                 }
                 
                 const result = await response.json();
                 console.log('Chatflows response:', result);
                 
                 // Check specifically for auth issues
                 if (result.statusMessage === "Unauthorized" || (result.contentPreview && result.contentPreview.includes("Unauthorized Access"))) {
                     chatflowsList.innerHTML = `
                         <div class="chatflow-error">
                             <div class="alert alert-danger mb-3">
                                 <i class="bi bi-shield-lock me-2"></i>
                                 <strong>Authentication Error</strong>
                             </div>
                             <p>The API requires a valid API key to access chatflows.</p>
                             <div class="mt-3">
                                 <div class="d-flex justify-content-center">
                                     <button class="btn btn-outline-primary" onclick="document.getElementById('FlowiseApiKey').focus()">
                                         <i class="bi bi-key me-2"></i> Update API Key
                                     </button>
                                 </div>
                             </div>
                         </div>`;
                     return;
                 }
                 
                 if (result.success && result.contentPreview) {
                     try {
                         // Try to parse as JSON
                         const jsonContent = JSON.parse(result.contentPreview);
                         
                         if (Array.isArray(jsonContent)) {
                             // We got a chatflows array
                             if (jsonContent.length === 0) {
                                 chatflowsList.innerHTML = `
                                     <div class="chatflow-error">
                                         <div class="text-center py-4">
                                             <i class="bi bi-diagram-3 fs-1 text-muted mb-3"></i>
                                             <h5>No Chatflows Found</h5>
                                             <p class="text-muted">Connection successful, but no flows exist yet.</p>
                                         </div>
                                     </div>`;
                             } else {
                                 // Update the count and show header
                                 chatflowsCount.textContent = jsonContent.length;
                                 chatflowsHeader.style.display = 'flex';
                                 
                                 let html = '';
jsonContent.forEach(flow => {
    const flowId = flow.id || 'No ID';
    const flowName = flow.name || 'Unnamed Flow';
    
    html += `
        <div class="chatflow-card">
            <div class="card-header">
                <h3 class="card-title" title="${flowName}">${flowName}</h3>
                <span class="badge bg-primary">${flowId}</span>
            </div>
        </div>`;
});
                                 chatflowsList.innerHTML = html;
                             }
                         } else {
                             // Show raw data for debugging
                             chatflowsList.innerHTML = `
                                 <div class="chatflow-error">
                                     <div class="alert alert-warning mb-3">
                                         <i class="bi bi-exclamation-triangle me-2"></i>
                                         <strong>Unexpected Response Format</strong>
                                     </div>
                                     <p>Received valid JSON but couldn't identify chatflows.</p>
                                     <pre class="bg-light p-3 mt-3" style="max-height:300px;overflow:auto;text-align:left;">${JSON.stringify(jsonContent, null, 2)}</pre>
                                 </div>`;
                         }
                     } catch (jsonError) {
                         // Not valid JSON - likely HTML
                         if (result.contentType === "HTML" || result.contentPreview.includes("<!DOCTYPE html>")) {
                             chatflowsList.innerHTML = `
                                 <div class="chatflow-error">
                                     <div class="alert alert-warning mb-3">
                                         <i class="bi bi-exclamation-triangle me-2"></i>
                                         <strong>Invalid Response Format</strong>
                                     </div>
                                     <p>Received HTML instead of JSON. The URL might be pointing to the Flowise UI instead of the API.</p>
                                     <div class="alert alert-info mt-3">
                                         <strong>Hint:</strong> Make sure your API URL is <code>http://localhost:3000/api/</code> (ends with /api/)
                                     </div>
                                 </div>`;
                         } else {
                             chatflowsList.innerHTML = `
                                 <div class="chatflow-error">
                                     <div class="alert alert-danger mb-3">
                                         <i class="bi bi-exclamation-triangle me-2"></i>
                                         <strong>Invalid Response Format</strong>
                                     </div>
                                     <p>Unable to parse the response. See raw content below:</p>
                                     <div class="bg-light p-3 mt-3" style="max-height:200px;overflow:auto;text-align:left;font-size:0.8rem;">${result.contentPreview}</div>
                                 </div>`;
                         }
                     }
                 } else {
                     chatflowsList.innerHTML = `
                         <div class="chatflow-error">
                             <div class="alert alert-warning mb-3">
                                 <i class="bi bi-exclamation-triangle me-2"></i>
                                 <strong>Connection Failed</strong>
                             </div>
                             <p>Status: ${result.statusCode} ${result.statusMessage || ''}</p>
                             <div class="mt-3">
                                 <h6>Troubleshooting Steps:</h6>
                                 <ul class="text-start">
                                     <li>Ensure Flowise is running at <code>${apiUrl}</code></li>
                                     <li>Try using <code>http://localhost:3000/api/</code> as your API URL</li>
                                     <li>Verify API key is correct (if required)</li>
                                     <li>Check browser console for more details</li>
                                 </ul>
                             </div>
                         </div>`;
                 }
             } catch (error) {
                 console.error('Error fetching chatflows:', error);
                 chatflowsList.innerHTML = `
                     <div class="chatflow-error">
                         <div class="alert alert-danger mb-3">
                             <i class="bi bi-exclamation-circle me-2"></i>
                             <strong>Error</strong>
                         </div>
                         <p>${error.message}</p>
                         <div class="mt-3">
                             <h6>Troubleshooting Steps:</h6>
                             <ul class="text-start">
                                 <li>Check that Flowise is running</li>
                                 <li>Verify your API URL is correct</li>
                                 <li>Check network tab in console for details</li>
                             </ul>
                         </div>
                     </div>`;
             }
         });
         
         // Optional: Implement the assignChatflow function
         window.assignChatflow = function(flowId) {
             // Get the current chatbot ID or show a selection dialog
             alert(`Assigning chatflow ${flowId} - Implement this function to select a chatbot and assign it`);
             // In a real implementation, you would call an API to assign the chatflow to a chatbot
         };

         // Override main Save Changes button
         document.getElementById('saveSettings').addEventListener('click', function() {
             // Submit the visible form based on active tab
             const activeTab = document.querySelector('.tab-pane.active');
             if (activeTab) {
                 const form = activeTab.querySelector('form');
                 if (form) {
                     form.submit();
                 }
             }
         });
         
         // Department Edit functionality
         document.querySelectorAll('.edit-department').forEach(button => {
             button.addEventListener('click', function () {
                 const deptName = this.getAttribute('data-name');
                 const oldNameInput = document.getElementById('oldName');
                 const newNameInput = document.getElementById('editNewName');

                 if (oldNameInput && newNameInput) {
                     oldNameInput.value = deptName;
                     newNameInput.value = deptName;
                 }
             });
         });

         // Department Delete functionality
         document.querySelectorAll('.delete-department').forEach(button => {
             button.addEventListener('click', function () {
                 if (this.classList.contains('disabled')) {
                     return;
                 }
                 const deptName = this.getAttribute('data-name');
                 const deptNameInput = document.getElementById('departmentName');

                 if (deptNameInput) {
                     deptNameInput.value = deptName;
                 }
             });
         });

         // Modal functionality for Bootstrap 5
         const modalTriggers = document.querySelectorAll('[data-bs-toggle="modal"]');
         modalTriggers.forEach(trigger => {
             trigger.addEventListener('click', function() {
                 const targetId = this.getAttribute('data-bs-target');
                 const modalElement = document.querySelector(targetId);
                 
                 if (modalElement) {
                     const modal = new bootstrap.Modal(modalElement);
                     modal.show();
                 }
             });
         });
         
         // Display success/error messages as toasts
         function showToast(message, type) {
             const toastContainer = document.getElementById('toastContainer') || createToastContainer();
             
             const toast = document.createElement('div');
             toast.className = `toast ${type}`;
             toast.setAttribute('role', 'alert');
             toast.setAttribute('aria-live', 'assertive');
             toast.setAttribute('aria-atomic', 'true');
             
             toast.innerHTML = `
                 <div class="toast-header">
                     <strong class="me-auto">${type === 'bg-success' ? 'Success' : 'Error'}</strong>
                     <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                 </div>
                 <div class="toast-body">
                     ${message}
                 </div>
             `;
             
             toastContainer.appendChild(toast);
             
             // Force reflow to trigger animation
             toast.offsetHeight;
             toast.classList.add('show');
             
             // Remove after 5 seconds
             setTimeout(() => {
                 toast.style.opacity = '0';
                 setTimeout(() => toastContainer.removeChild(toast), 300);
             }, 5000);
             
             // Add close button functionality
             const closeButton = toast.querySelector('.btn-close');
             if (closeButton) {
                 closeButton.addEventListener('click', function() {
                     toast.style.opacity = '0';
                     setTimeout(() => toastContainer.removeChild(toast), 300);
                 });
             }
         }

         function createToastContainer() {
             const container = document.createElement('div');
             container.id = 'toastContainer';
             container.className = 'toast-container';
             document.body.appendChild(container);
             return container;
         }
         
         // Check for success/error messages in TempData
         @if (TempData["SuccessMessage"] != null)
         {
             <text>showToast('@TempData["SuccessMessage"]', 'bg-success');</text>
         }
         
         @if (TempData["ErrorMessage"] != null)
         {
             <text>showToast('@TempData["ErrorMessage"]', 'bg-danger');</text>
         }
     });
 </script>
}