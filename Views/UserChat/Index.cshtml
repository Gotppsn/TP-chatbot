@model IEnumerable<AIHelpdeskSupport.Models.Chatbot>
@{
    ViewData["Title"] = "Available Assistants";
    
    // Group chatbots by department for organization
    var departments = Model.Where(c => c.IsActive)
                          .GroupBy(c => c.Department)
                          .OrderBy(g => g.Key);
}

<div class="assistants-container">
    <!-- Search and filters bar -->
    <div class="search-filters">
        <div class="search-box">
            <i class="bi bi-search"></i>
            <input type="text" id="assistantSearch" placeholder="Search assistants..." class="search-input">
        </div>
        
        <div class="filter-controls">
            <div class="filter-item">
                <label>Department:</label>
                <div class="select-container">
                    <select id="departmentFilter" class="filter-select">
                        <option value="all">All Departments</option>
                        @foreach(var dept in Model.Select(c => c.Department).Distinct().OrderBy(d => d))
                        {
                            <option value="@dept">@dept</option>
                        }
                    </select>
                </div>
            </div>
            
            <button id="resetFilters" class="reset-button">
                <i class="bi bi-arrow-counterclockwise"></i> Reset
            </button>
        </div>
    </div>

    <!-- Quick access section -->
    <div class="quick-access" id="quickAccessSection" style="display: none;">
        <div class="section-header">
            <h2><i class="bi bi-lightning"></i> Quick Access <span class="badge">Favorites</span></h2>
        </div>
        <div class="quick-items" id="quickAccessItems">
            <!-- Will be populated dynamically by JavaScript -->
        </div>
    </div>

    <!-- Department sections -->
    <div id="departmentsList">
        @foreach (var dept in departments)
        {
            <div class="department-section" data-department="@dept.Key">
                <div class="section-header collapsible" onclick="toggleDepartment('@dept.Key')">
                    <h2>
                        @{
                            string deptIcon = dept.Key switch
                            {
                                "Customer Service" => "bi-headset",
                                "IT Support" => "bi-pc-display",
                                "General" => "bi-grid",
                                _ => "bi-briefcase"
                            };
                        }
                        <i class="bi @deptIcon"></i> @dept.Key <span class="badge">@dept.Count()</span>
                    </h2>
                    <i class="bi bi-chevron-down toggle-icon"></i>
                </div>
                
                <div class="assistant-grid">
                    @foreach (var chatbot in dept)
                    {
                        <div class="assistant-card" 
                             data-id="@chatbot.Id"
                             data-name="@chatbot.Name"
                             data-department="@chatbot.Department">
                            <div class="assistant-header">
                                <div class="assistant-icon">
                                    <i class="bi bi-robot"></i>
                                </div>
                                <h3>@chatbot.Name</h3>
                            </div>
                            <div class="assistant-description">
                                <p>@(string.IsNullOrEmpty(chatbot.Description) 
                                    ? "Helps with " + chatbot.Department + " related questions and tasks."
                                    : chatbot.Description)</p>
                            </div>
                            <div class="assistant-meta">
                                <span class="department-tag">@chatbot.Department</span>
                            </div>
                            <div class="assistant-actions">
                                <button class="start-chat-btn" onclick="startChat(@chatbot.Id)">
                                    <i class="bi bi-chat"></i>
                                    Start Chat
                                </button>
                                <button class="favorite-btn" onclick="toggleFavorite(event, @chatbot.Id)" title="Add to favorites">
                                    <i class="bi bi-star"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
    
    <!-- Empty state when no assistants found -->
    <div id="noResults" class="empty-state" style="display: none;">
        <div class="empty-icon">
            <i class="bi bi-search"></i>
        </div>
        <h3>No Assistants Found</h3>
        <p>Try adjusting your search or filters to find assistants.</p>
        <button id="clearAllFilters" class="primary-button">
            <i class="bi bi-arrow-counterclockwise"></i> Clear Filters
        </button>
    </div>
    
    <!-- Empty state when no assistants available -->
    @if (!Model.Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-robot"></i>
            </div>
            <h3>No AI Assistants Available</h3>
            <p>There are currently no AI assistants configured for your department.</p>
        </div>
    }
</div>

@section Styles {
    <style>
        /* Main container */
        .assistants-container {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            padding: 1rem;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        /* Search and filters bar */
        .search-filters {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
            padding: 0.75rem 0;
            border-bottom: 1px solid #eee;
        }
        
        .search-box {
            position: relative;
            flex-grow: 1;
            max-width: 400px;
        }
        
        .search-box i {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }
        
        .search-input {
            width: 100%;
            padding: 8px 12px 8px 36px;
            border: 1px solid #e0e0e0;
            border-radius: 50px;
            font-size: 14px;
            transition: all 0.2s;
        }
        
        .search-input:focus {
            outline: none;
            border-color: #0d6efd;
            box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.1);
        }
        
        /* Filter controls */
        .filter-controls {
            display: flex;
            align-items: center;
            gap: 12px;
            flex-wrap: wrap;
        }
        
        .filter-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .filter-item label {
            font-size: 14px;
            font-weight: 500;
            color: #6c757d;
            white-space: nowrap;
        }
        
        .select-container {
            position: relative;
        }
        
        .filter-select {
            padding: 7px 36px 7px 12px;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            font-size: 14px;
            appearance: none;
            background: white;
            min-width: 150px;
        }
        
        .select-container::after {
            content: '';
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            width: 0;
            height: 0;
            border-left: 5px solid transparent;
            border-right: 5px solid transparent;
            border-top: 5px solid #6c757d;
            pointer-events: none;
        }
        
        .reset-button {
            background-color: transparent;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 7px 12px;
            font-size: 14px;
            color: #6c757d;
            display: flex;
            align-items: center;
            gap: 6px;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .reset-button:hover {
            background-color: #f8f9fa;
        }
        
        /* Section headers */
        .section-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 16px;
            border-bottom: 1px solid #eee;
            margin-bottom: 12px;
        }
        
        .section-header h2 {
            display: flex;
            align-items: center;
            font-size: 16px;
            font-weight: 600;
            margin: 0;
            gap: 8px;
        }
        
        .section-header i {
            color: #0d6efd;
        }
        
        .badge {
            background-color: #0d6efd;
            color: white;
            font-size: 12px;
            padding: 3px 8px;
            border-radius: 30px;
            font-weight: 500;
        }
        
        /* Quick access section */
        .quick-access {
            background: white;
            border-radius: 8px;
            padding: 16px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        .quick-items {
            display: flex;
            gap: 12px;
            overflow-x: auto;
            padding: 8px 0;
            scrollbar-width: thin;
        }
        
        .quick-items::-webkit-scrollbar {
            height: 6px;
        }
        
        .quick-items::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }
        
        .quick-items::-webkit-scrollbar-thumb {
            background: #d1d1d1;
            border-radius: 3px;
        }
        
        .quick-item {
            min-width: 200px;
            padding: 12px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 12px;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .quick-item:hover {
            border-color: #0d6efd;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .quick-item .quick-info {
            flex: 1;
            min-width: 0;
        }
        
        .quick-item .quick-name {
            font-weight: 500;
            font-size: 14px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .quick-item .quick-department {
            font-size: 12px;
            color: #6c757d;
        }
        
        /* Department sections */
        .department-section {
            background: white;
            border-radius: 8px;
            padding: 0;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            margin-bottom: 1.5rem;
        }
        
        .collapsible {
            cursor: pointer;
            padding: 16px;
            border-bottom: 1px solid #eee;
        }
        
        .toggle-icon {
            transition: transform 0.3s;
        }
        
        .department-section.collapsed .toggle-icon {
            transform: rotate(-90deg);
        }
        
        .department-section.collapsed .assistant-grid {
            display: none;
        }
        
        /* Assistant grid layout */
        .assistant-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 16px;
            padding: 16px;
        }
        
        /* Assistant cards */
        .assistant-card {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 16px;
            display: flex;
            flex-direction: column;
            height: 100%;
            transition: all 0.2s;
            background: white;
        }
        
        .assistant-card:hover {
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
            border-color: #d1d1d1;
            transform: translateY(-2px);
        }
        
        .assistant-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 12px;
        }
        
        .assistant-icon {
            width: 40px;
            height: 40px;
            background-color: rgba(13, 110, 253, 0.1);
            color: #0d6efd;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            flex-shrink: 0;
        }
        
        .assistant-header h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }
        
        .assistant-description {
            flex-grow: 1;
            margin-bottom: 16px;
        }
        
        .assistant-description p {
            font-size: 14px;
            color: #6c757d;
            margin: 0;
            line-height: 1.5;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .assistant-meta {
            display: flex;
            gap: 8px;
            margin-bottom: 16px;
            flex-wrap: wrap;
        }
        
        .department-tag {
            font-size: 12px;
            color: #6c757d;
            background-color: #f8f9fa;
            padding: 4px 10px;
            border-radius: 30px;
            display: inline-flex;
        }
        
        .assistant-actions {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-top: auto;
        }
        
        .start-chat-btn {
            flex-grow: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            background-color: #0d6efd;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 10px 16px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .start-chat-btn:hover {
            background-color: #0b5ed7;
        }
        
        .favorite-btn {
            width: 36px;
            height: 36px;
            background-color: white;
            border: 1px solid #e0e0e0;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            color: #6c757d;
            position: relative;
            z-index: 10;
        }

        .favorite-btn:hover {
            background-color: #f8f9fa;
            transform: translateY(-2px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .favorite-btn:active {
            transform: translateY(1px);
        }

        .favorite-btn.active {
            background-color: #fff8e1;
            border-color: #ffc107;
        }

        .favorite-btn.active i {
            color: #ffc107;
        }

        /* Animation for click feedback */
        @@keyframes favorite-pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .favorite-btn.clicked {
            animation: favorite-pulse 0.3s ease;
        }
        
        /* Empty state */
        .empty-state {
            background: white;
            border-radius: 8px;
            padding: 40px 20px;
            text-align: center;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        .empty-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: #f8f9fa;
            color: #6c757d;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            margin: 0 auto 16px;
        }
        
        .empty-state h3 {
            font-size: 18px;
            font-weight: 600;
            margin: 0 0 8px 0;
        }
        
        .empty-state p {
            color: #6c757d;
            margin: 0 0 20px 0;
        }
        
        .primary-button {
            background-color: #0d6efd;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 10px 16px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .assistant-grid {
                grid-template-columns: 1fr;
            }
            
            .search-filters {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .search-box {
                width: 100%;
                max-width: none;
            }
            
            .filter-controls {
                width: 100%;
                flex-wrap: wrap;
                justify-content: space-between;
            }
            
            .filter-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 4px;
            }
        }
        
        @@media (min-width: 768px) and (max-width: 992px) {
            .assistant-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @@media (min-width: 1200px) {
            .assistant-grid {
                grid-template-columns: repeat(3, 1fr);
            }
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM elements
            const searchInput = document.getElementById('assistantSearch');
            const departmentFilter = document.getElementById('departmentFilter');
            const resetButton = document.getElementById('resetFilters');
            const clearAllFiltersBtn = document.getElementById('clearAllFilters');
            const quickAccessSection = document.getElementById('quickAccessSection');
            const quickAccessItems = document.getElementById('quickAccessItems');
            const noResults = document.getElementById('noResults');
            
            // Initialize
            setupEventListeners();
            restoreCollapsedState();
            loadFavorites();
            updateQuickAccess();
            applyFilters();

            function setupEventListeners() {
                // Search functionality
                searchInput.addEventListener('input', applyFilters);
                
                // Filters
                departmentFilter.addEventListener('change', applyFilters);
                
                // Reset buttons
                resetButton.addEventListener('click', resetFilters);
                clearAllFiltersBtn.addEventListener('click', resetFilters);
                
                // Keyboard shortcut for search
                document.addEventListener('keydown', function(e) {
                    if (e.key === '/' && document.activeElement !== searchInput) {
                        e.preventDefault();
                        searchInput.focus();
                    }
                });
            }
            
            function applyFilters() {
                const searchTerm = searchInput.value.toLowerCase().trim();
                const selectedDepartment = departmentFilter.value;
                
                // Process all assistant cards
                const cards = document.querySelectorAll('.assistant-card');
                let visibleCount = 0;
                
                cards.forEach(card => {
                    const cardName = card.getAttribute('data-name').toLowerCase();
                    const cardDepartment = card.getAttribute('data-department');
                    const cardDescription = card.querySelector('.assistant-description p').textContent.toLowerCase();
                    
                    // Check if card matches all filters
                    const matchesSearch = !searchTerm || 
                                         cardName.includes(searchTerm) || 
                                         cardDescription.includes(searchTerm);
                    const matchesDepartment = selectedDepartment === 'all' || 
                                             cardDepartment === selectedDepartment;
                    
                    // Show/hide card based on filters
                    if (matchesSearch && matchesDepartment) {
                        card.style.display = 'flex';
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                });
                
                // Update department visibility based on visible cards
                updateDepartmentVisibility();
                
                // Show/hide no results message
                noResults.style.display = visibleCount === 0 ? 'block' : 'none';
            }
            
            function updateDepartmentVisibility() {
                const departments = document.querySelectorAll('.department-section');
                
                departments.forEach(dept => {
                    const visibleCards = dept.querySelectorAll('.assistant-card[style="display: flex;"]');
                    dept.style.display = visibleCards.length > 0 ? 'block' : 'none';
                });
            }
            
            function resetFilters() {
                searchInput.value = '';
                departmentFilter.value = 'all';
                
                // Reset card visibility
                document.querySelectorAll('.assistant-card').forEach(card => {
                    card.style.display = 'flex';
                });
                
                // Reset department visibility
                document.querySelectorAll('.department-section').forEach(dept => {
                    dept.style.display = 'block';
                });
                
                // Hide no results message
                noResults.style.display = 'none';
            }
            
            function toggleDepartment(departmentName) {
                const section = document.querySelector(`.department-section[data-department="${departmentName}"]`);
                section.classList.toggle('collapsed');
                
                // Save collapsed state
                const collapsedDepts = JSON.parse(localStorage.getItem('collapsedDepartments') || '[]');
                
                if (section.classList.contains('collapsed')) {
                    if (!collapsedDepts.includes(departmentName)) {
                        collapsedDepts.push(departmentName);
                    }
                } else {
                    const index = collapsedDepts.indexOf(departmentName);
                    if (index > -1) {
                        collapsedDepts.splice(index, 1);
                    }
                }
                
                localStorage.setItem('collapsedDepartments', JSON.stringify(collapsedDepts));
            }
            
            function restoreCollapsedState() {
                const collapsedDepts = JSON.parse(localStorage.getItem('collapsedDepartments') || '[]');
                
                collapsedDepts.forEach(dept => {
                    const section = document.querySelector(`.department-section[data-department="${dept}"]`);
                    if (section) {
                        section.classList.add('collapsed');
                    }
                });
            }
            
            // Load favorites from localStorage
            function loadFavorites() {
                let favorites = [];
                try {
                    favorites = JSON.parse(localStorage.getItem('favoriteChatbots') || '[]');
                } catch (error) {
                    console.error('Error parsing favorites:', error);
                    favorites = [];
                }

                // Update UI for each favorite
                favorites.forEach(id => {
                    const buttons = document.querySelectorAll(`.assistant-card[data-id="${id}"] .favorite-btn`);
                    buttons.forEach(button => {
                        button.classList.add('active');
                        const icon = button.querySelector('i');
                        if (icon) {
                            icon.classList.remove('bi-star');
                            icon.classList.add('bi-star-fill');
                        }
                    });
                });

                return favorites;
            }

            // Update quick access section based on favorites
            function updateQuickAccess() {
                const favorites = loadFavorites();
                
                // Clear quick access items
                quickAccessItems.innerHTML = '';
                
                // Hide section if no favorites
                if (favorites.length === 0) {
                    quickAccessSection.style.display = 'none';
                    return;
                }
                
                // Show section and add favorite items
                quickAccessSection.style.display = 'block';
                
                favorites.forEach(id => {
                    const card = document.querySelector(`.assistant-card[data-id="${id}"]`);
                    if (card) {
                        const name = card.querySelector('h3').textContent;
                        const department = card.getAttribute('data-department');
                        
                        const quickItem = document.createElement('div');
                        quickItem.className = 'quick-item';
                        quickItem.onclick = function() { startChat(id); };
                        
                        quickItem.innerHTML = `
                            <div class="assistant-icon">
                                <i class="bi bi-robot"></i>
                            </div>
                            <div class="quick-info">
                                <div class="quick-name">${name}</div>
                                <div class="quick-department">${department}</div>
                            </div>
                        `;
                        
                        quickAccessItems.appendChild(quickItem);
                    }
                });
            }
        });
        
        // Toggle favorite status
        function toggleFavorite(event, chatbotId) {
            // Prevent event bubbling
            event.preventDefault();
            event.stopPropagation();
            
            const button = event.currentTarget;
            const icon = button.querySelector('i');
            
            // Toggle active class
            button.classList.toggle('active');
            button.classList.add('clicked');
            
            // After animation completes, remove clicked class
            setTimeout(() => {
                button.classList.remove('clicked');
            }, 300);
            
            // Toggle icon
            if (button.classList.contains('active')) {
                icon.classList.remove('bi-star');
                icon.classList.add('bi-star-fill');
            } else {
                icon.classList.remove('bi-star-fill');
                icon.classList.add('bi-star');
            }
            
            // Update favorites in localStorage
            let favorites = [];
            try {
                favorites = JSON.parse(localStorage.getItem('favoriteChatbots') || '[]');
            } catch (error) {
                console.error('Error parsing favorites:', error);
                favorites = [];
            }
            
            // Convert chatbotId to number to ensure consistent type comparison
            const chatbotIdNumber = parseInt(chatbotId, 10);
            
            if (button.classList.contains('active')) {
                // Add to favorites if not already there
                if (!favorites.includes(chatbotIdNumber)) {
                    favorites.push(chatbotIdNumber);
                }
            } else {
                // Remove from favorites
                const index = favorites.indexOf(chatbotIdNumber);
                if (index > -1) {
                    favorites.splice(index, 1);
                }
            }
            
            // Save updated favorites
            localStorage.setItem('favoriteChatbots', JSON.stringify(favorites));
            
            // Update quick access section
            updateQuickAccess();
            
            return false;
        }
        
        // Update all UI elements based on favorites
        function updateQuickAccess() {
            const quickAccessSection = document.getElementById('quickAccessSection');
            const quickAccessItems = document.getElementById('quickAccessItems');
            
            // Load favorites
            let favorites = [];
            try {
                favorites = JSON.parse(localStorage.getItem('favoriteChatbots') || '[]');
            } catch (error) {
                console.error('Error parsing favorites:', error);
                favorites = [];
            }
            
            // Clear current items
            quickAccessItems.innerHTML = '';
            
            // Hide section if no favorites
            if (favorites.length === 0) {
                quickAccessSection.style.display = 'none';
                return;
            }
            
            // Show section
            quickAccessSection.style.display = 'block';
            
            // Add favorite items
            favorites.forEach(id => {
                const card = document.querySelector(`.assistant-card[data-id="${id}"]`);
                if (card) {
                    const name = card.querySelector('h3').textContent;
                    const department = card.getAttribute('data-department');
                    
                    const quickItem = document.createElement('div');
                    quickItem.className = 'quick-item';
                    quickItem.onclick = function() { startChat(id); };
                    
                    quickItem.innerHTML = `
                        <div class="assistant-icon">
                            <i class="bi bi-robot"></i>
                        </div>
                        <div class="quick-info">
                            <div class="quick-name">${name}</div>
                            <div class="quick-department">${department}</div>
                        </div>
                    `;
                    
                    quickAccessItems.appendChild(quickItem);
                }
            });
        }
        
function startChat(chatbotId) {
    // Generate session ID
    const sessionId = `session-${randomPart1}-${randomPart2}`;
    
    // Store chat info in localStorage
    localStorage.setItem(sessionId, JSON.stringify({
        chatbotId: chatbotId,
        createdAt: new Date().toISOString()
    }));
    
    // Navigate to chat page
    window.location.href = `/UserChat/Chat/${sessionId}`;
}
    </script>
}