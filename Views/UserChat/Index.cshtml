@model IEnumerable<AIHelpdeskSupport.Models.Chatbot>
@{
    ViewData["Title"] = "Available Assistants";
}

<div class="user-dashboard">
    <div class="page-header">
        <div>
            <h1 class="page-title">AI Support Assistants</h1>
            <p class="text-muted">Select an assistant to start a conversation</p>
        </div>
    </div>

    <div class="assistants-grid">
        @if (Model.Any())
        {
            foreach (var chatbot in Model.Where(c => c.IsActive))
            {
                <div class="assistant-card animate-card" 
                     onclick="location.href='@Url.Action("Chat", "UserChat", new { id = chatbot.Id })'">
                    @{
                        string iconClass = chatbot.Department switch
                        {
                            "Customer Service" => "bi-headset",
                            "IT Support" => "bi-pc-display",
                            "Sales" => "bi-currency-dollar",
                            "Billing" => "bi-credit-card",
                            "Technical" => "bi-wrench",
                            _ => "bi-robot"
                        };
                        
                        string colorClass = chatbot.Department switch
                        {
                            "Customer Service" => "primary",
                            "IT Support" => "info",
                            "Sales" => "warning",
                            "Billing" => "danger",
                            "Technical" => "success",
                            _ => "secondary"
                        };
                    }
                    
                    <div class="assistant-icon @colorClass">
                        <i class="bi @iconClass"></i>
                    </div>
                    <div class="assistant-info">
                        <h3 class="assistant-name">@chatbot.Name</h3>
                        <div class="assistant-meta">
                            <span class="assistant-department">@chatbot.Department</span>
                            <span class="assistant-model">@chatbot.AiModel</span>
                        </div>
                        <p class="assistant-description">
                            @(string.IsNullOrEmpty(chatbot.Description) 
                                ? $"AI assistant specialized in {chatbot.Department} support." 
                                : chatbot.Description)
                        </p>
                    </div>
                    <div class="assistant-action">
                        <button class="btn btn-sm btn-primary">
                            <i class="bi bi-chat-dots"></i>
                            <span>Start Chat</span>
                        </button>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="bi bi-robot"></i>
                </div>
                <h3>No AI Assistants Available</h3>
                <p>There are currently no AI assistants configured for your department. Please contact support for assistance.</p>
            </div>
        }
    </div>
    
    <div class="recent-chats-section">
        <h2 class="section-title">Recent Conversations</h2>
        <div class="recent-chats">
            <div class="chat-history-empty">
                <i class="bi bi-chat-left-text"></i>
                <p>No recent conversations found. Start a new chat with one of our AI assistants above.</p>
            </div>
            <!-- Recent chats will be populated dynamically -->
        </div>
    </div>
</div>

@section Styles {
    <style>
        .user-dashboard {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }
        
        .assistants-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
        }
        
        .assistant-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            animation: fadeInUp 0.5s ease forwards;
            opacity: 0;
        }
        
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .assistant-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }
        
        .assistant-icon {
            width: 64px;
            height: 64px;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            margin-bottom: 1.25rem;
        }
        
        .assistant-icon.primary { background-color: rgba(13, 110, 253, 0.1); color: var(--color-primary); }
        .assistant-icon.info { background-color: rgba(13, 202, 240, 0.1); color: var(--color-info); }
        .assistant-icon.warning { background-color: rgba(255, 193, 7, 0.1); color: var(--color-warning); }
        .assistant-icon.danger { background-color: rgba(220, 53, 69, 0.1); color: var(--color-danger); }
        .assistant-icon.success { background-color: rgba(32, 201, 151, 0.1); color: var(--color-success); }
        .assistant-icon.secondary { background-color: rgba(108, 117, 125, 0.1); color: var(--color-secondary); }
        
        .assistant-info {
            flex: 1;
        }
        
        .assistant-name {
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0 0 0.5rem;
        }
        
        .assistant-meta {
            display: flex;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }
        
        .assistant-department,
        .assistant-model {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 100px;
        }
        
        .assistant-department {
            background-color: var(--color-gray-100);
            color: var(--color-gray-700);
        }
        
        .assistant-model {
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
        }
        
        .assistant-description {
            font-size: 0.875rem;
            color: var(--color-gray-600);
            margin-bottom: 1.5rem;
            line-height: 1.5;
        }
        
        .assistant-action {
            margin-top: auto;
        }
        
        /* Empty state */
        .empty-state {
            text-align: center;
            padding: 3rem;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            grid-column: 1 / -1;
        }
        
        .empty-icon {
            font-size: 3rem;
            color: var(--color-gray-400);
            margin-bottom: 1rem;
        }
        
        .empty-state h3 {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.75rem;
        }
        
        .empty-state p {
            color: var(--color-gray-600);
            max-width: 500px;
            margin: 0 auto;
        }
        
        /* Recent chats section */
        .recent-chats-section {
            margin-top: 1rem;
        }
        
        .section-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }
        
        .recent-chats {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
        }
        
        .chat-history-empty {
            text-align: center;
            padding: 2rem;
            color: var(--color-gray-500);
        }
        
        .chat-history-empty i {
            font-size: 2rem;
            margin-bottom: 0.75rem;
            display: block;
        }
        
        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .assistants-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add animation delay to cards for staggered effect
            const cards = document.querySelectorAll('.animate-card');
            cards.forEach((card, index) => {
                card.style.animationDelay = `${index * 0.1}s`;
            });
            
            // Load recent chats (example implementation)
            loadRecentChats();
        });
        
        function loadRecentChats() {
            // This would fetch from an API in a real implementation
            // For now, we'll just check if there are any recent chats in local storage
            const recentChatsEl = document.querySelector('.recent-chats');
            const recentChats = JSON.parse(localStorage.getItem('recentChats')) || [];
            
            if (recentChats.length > 0) {
                // Clear empty state
                recentChatsEl.innerHTML = '';
                
                // Create chat history list
                const chatList = document.createElement('div');
                chatList.className = 'chat-history-list';
                
                recentChats.forEach(chat => {
                    const chatItem = document.createElement('div');
                    chatItem.className = 'chat-history-item';
                    chatItem.innerHTML = `
                        <div class="chat-history-icon ${chat.colorClass}">
                            <i class="bi ${chat.iconClass}"></i>
                        </div>
                        <div class="chat-history-info">
                            <div class="chat-history-name">${chat.name}</div>
                            <div class="chat-history-time">${chat.time}</div>
                        </div>
                        <button class="btn btn-sm btn-outline" onclick="location.href='/UserChat/Chat/${chat.id}'">
                            <i class="bi bi-arrow-right"></i>
                        </button>
                    `;
                    chatList.appendChild(chatItem);
                });
                
                recentChatsEl.appendChild(chatList);
            }
        }
    </script>
}