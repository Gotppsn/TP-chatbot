@model AIHelpdeskSupport.ViewModels.UserChatViewModel
@{
    ViewData["Title"] = "Chat Support";
    
    // This is just for frontend demo
    bool isContinuingConversation = Model.SessionId.StartsWith("session-");
    string sessionId = Model.SessionId;
    var previousMessages = new List<(string message, bool isBot, string time)>();
    
    // Load previous messages based on session ID for demo
    if (sessionId == "session-1234-abcd") {
        previousMessages = new List<(string, bool, string)> {
            ("Hello! I'm the Customer Support Bot. How can I help you today?", true, "10:30 AM"),
            ("I need help with my recent order #12345", false, "10:31 AM"),
            ("I'd be happy to help you with that order. Let me check the status for you.", true, "10:31 AM"),
            ("I can see that your order #12345 has been shipped on Monday and is expected to arrive tomorrow.", true, "10:32 AM"),
            ("Thank you for checking. Can you also tell me if partial refunds are possible?", false, "10:33 AM"),
            ("Yes, we do offer partial refunds for items you wish to return while keeping others. Would you like me to process a return for part of your order?", true, "10:34 AM"),
            ("Not right now, I'll wait for the package to arrive first", false, "10:35 AM"),
            ("Understood. Once your package arrives, you can initiate a return through your account or contact us again and we'll help you with the process.", true, "10:36 AM"),
            ("Thank you for your help!", false, "10:37 AM")
        };
    } 
    else if (sessionId == "session-9012-ijkl") {
        previousMessages = new List<(string, bool, string)> {
            ("Hello! I'm the Sales Assistant. How can I help you today?", true, "2:15 PM"),
            ("I'm interested in your business subscription plans", false, "2:16 PM"),
            ("Great! We offer several business subscription tiers designed to meet different organizational needs. Are you looking for something specific?", true, "2:17 PM"),
            ("We have a team of 15 people. What would you recommend?", false, "2:18 PM"),
            ("For a team of 15, I'd recommend our Professional plan at $199/month which includes 20 user seats, premium support, and all advanced features. Would you like to know more specific details?", true, "2:19 PM"),
            ("What are the pricing options?", false, "2:20 PM")
        };
    }
}

<div class="chat-container">
    <!-- Left sidebar with conversation history -->
    <div class="chat-sidebar">
        <div class="sidebar-header">
            <div class="search-container">
                <i class="bi bi-search search-icon"></i>
                <input type="text" class="search-input" placeholder="Search conversations...">
            </div>
        </div>
        <div class="conversation-list">
            <div class="conversation-item active">
                <div class="avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="conversation-info">
                    <div class="conversation-title">Current Conversation</div>
                    <div class="conversation-preview">Started just now</div>
                </div>
                <div class="conversation-time">Now</div>
            </div>
            
            <div class="conversation-item">
                <div class="avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="conversation-info">
                    <div class="conversation-title">Password Reset Help</div>
                    <div class="conversation-preview">I need help with resetting...</div>
                </div>
                <div class="conversation-time">2h ago</div>
            </div>
            
            <div class="conversation-item">
                <div class="avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="conversation-info">
                    <div class="conversation-title">Billing Question</div>
                    <div class="conversation-preview">I have a question about...</div>
                </div>
                <div class="conversation-time">Yesterday</div>
            </div>
            
            <div class="conversation-item">
                <div class="avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="conversation-info">
                    <div class="conversation-title">Product Inquiry</div>
                    <div class="conversation-preview">I'd like to know more about...</div>
                </div>
                <div class="conversation-time">3d ago</div>
            </div>
        </div>
    </div>
    
    <!-- Main chat area -->
    <div class="chat-main">
        <div class="chat-header">
            <div class="chat-header-info">
                <div class="bot-icon"><i class="bi bi-robot"></i></div>
                <div class="bot-details">
                    <div class="bot-name">@(sessionId == "session-1234-abcd" ? "Customer Support Bot" : (sessionId == "session-9012-ijkl" ? "Sales Assistant" : "AI Assistant"))</div>
                    <div class="bot-status">
                        <span class="status-indicator online"></span>
                        <span>Online - @(sessionId == "session-1234-abcd" ? "Customer Service" : (sessionId == "session-9012-ijkl" ? "Sales" : "Support"))</span>
                    </div>
                </div>
            </div>
            <div class="chat-header-actions">
                <button class="btn-icon" title="Settings">
                    <i class="bi bi-gear"></i>
                </button>
                <button class="btn-icon" title="Expand">
                    <i class="bi bi-arrows-fullscreen"></i>
                </button>
            </div>
        </div>
        
        <div class="chat-messages">
            <div class="message-date">@(isContinuingConversation ? previousMessages.Count > 0 ? DateTime.Now.AddDays(-2).ToString("MMMM d, yyyy") : "Today" : "Today")</div>
            
            @if (isContinuingConversation && previousMessages.Count > 0)
            {
                foreach (var msg in previousMessages)
                {
                    <div class="message @(msg.isBot ? "bot" : "user")">
                        <div class="message-avatar">
                            <i class="bi @(msg.isBot ? "bi-robot" : "bi-person")"></i>
                        </div>
                        <div class="message-content">
                            <div class="message-bubble">
                                <p>@msg.message</p>
                            </div>
                            <div class="message-time">@msg.time</div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="message bot">
                    <div class="message-avatar">
                        <i class="bi bi-robot"></i>
                    </div>
                    <div class="message-content">
                        <div class="message-bubble">
                            <p>ðŸ‘‹ Hello! I'm your AI support agent. How can I assist you today?</p>
                        </div>
                        <div class="message-time">@DateTime.Now.ToString("h:mm tt")</div>
                    </div>
                </div>
            }
        </div>
        
<div class="chat-input-container">
    <input type="hidden" id="sessionId" value="@Model.SessionId">
    <input type="hidden" id="chatbotId" value="@Model.Chatbot.Id">
    <button class="input-attachment-btn" title="Add attachment">
        <i class="bi bi-paperclip"></i>
    </button>
    <div class="input-wrapper">
        <input type="text" id="messageInput" placeholder="Type your message...">
        <button class="voice-input-btn" title="Voice input">
            <i class="bi bi-mic"></i>
        </button>
    </div>
    <button class="send-btn" id="sendMessage" disabled>
        <i class="bi bi-send"></i>
    </button>
</div>
    </div>
    
    <!-- Right panel with conversation details -->
    <div class="chat-info">
        <div class="info-header">
            <h3>Conversation Details</h3>
        </div>
        
        <div class="info-section">
            <div class="section-title">AI ASSISTANT</div>
            <div class="assistant-info">
                <div class="assistant-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="assistant-details">
                    <div class="assistant-name">Customer Support Bot</div>
                    <div class="assistant-department">Customer Service</div>
                    <div class="assistant-model">GPT-4</div>
                </div>
            </div>
        </div>
        
        <div class="info-section">
            <div class="section-title">CONVERSATION STATS</div>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value">2</div>
                    <div class="stat-label">Messages</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">2.4s</div>
                    <div class="stat-label">Avg. Response</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">3m</div>
                    <div class="stat-label">Duration</div>
                </div>
            </div>
        </div>
        
        <div class="info-section">
            <div class="section-title">SUGGESTED TOPICS</div>
            <div class="topics-grid">
                <button class="topic-btn">Account Access</button>
                <button class="topic-btn">Billing Issues</button>
                <button class="topic-btn">Product Features</button>
                <button class="topic-btn">Password Reset</button>
                <button class="topic-btn">Subscription Plans</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Main layout */
        .chat-container {
            display: grid;
            grid-template-columns: 280px 1fr 300px;
            gap: 0;
            height: calc(100vh - 150px);
            min-height: 500px;
            background-color: var(--color-gray-100);
        }
        
        /* Left sidebar styles */
        .chat-sidebar {
            background-color: white;
            border-right: 1px solid var(--color-gray-200);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .sidebar-header {
            padding: 16px;
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .search-container {
            position: relative;
        }
        
        .search-icon {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--color-gray-500);
        }
        
        .search-input {
            width: 100%;
            padding: 8px 8px 8px 32px;
            border: 1px solid var(--color-gray-300);
            border-radius: 50px;
            background-color: var(--color-gray-100);
            font-size: 14px;
        }
        
        .conversation-list {
            flex: 1;
            overflow-y: auto;
            padding: 8px;
        }
        
        .conversation-item {
            display: flex;
            align-items: center;
            padding: 12px;
            border-radius: 8px;
            cursor: pointer;
            margin-bottom: 4px;
        }
        
        .conversation-item:hover {
            background-color: var(--color-gray-100);
        }
        
        .conversation-item.active {
            background-color: #e6f4ff;
        }
        
        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #e6f4ff;
            color: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
            flex-shrink: 0;
        }
        
        .conversation-info {
            flex: 1;
            min-width: 0;
        }
        
        .conversation-title {
            font-weight: 500;
            margin-bottom: 4px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .conversation-preview {
            font-size: 12px;
            color: var(--color-gray-500);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .conversation-time {
            font-size: 11px;
            color: var(--color-gray-500);
            white-space: nowrap;
            margin-left: 8px;
        }
        
        /* Main chat area styles */
        .chat-main {
            display: flex;
            flex-direction: column;
            background-color: white;
        }
        
        .chat-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 16px;
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .chat-header-info {
            display: flex;
            align-items: center;
        }
        
        .bot-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #e6f4ff;
            color: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
        }
        
        .bot-name {
            font-weight: 500;
            margin-bottom: 4px;
        }
        
        .bot-status {
            display: flex;
            align-items: center;
            font-size: 12px;
            color: var(--color-gray-500);
        }
        
        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 6px;
        }
        
        .status-indicator.online {
            background-color: #10b981;
        }
        
        .chat-header-actions {
            display: flex;
            gap: 8px;
        }
        
        .btn-icon {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            border: none;
            background-color: transparent;
            color: var(--color-gray-600);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }
        
        .btn-icon:hover {
            background-color: var(--color-gray-100);
        }
        
        .chat-messages {
            flex: 1;
            padding: 16px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 16px;
            background-color: #f9fafb;
        }
        
        .message-date {
            text-align: center;
            font-size: 12px;
            color: var(--color-gray-500);
            margin: 8px 0;
            position: relative;
        }
        
        .message-date::before,
        .message-date::after {
            content: '';
            position: absolute;
            top: 50%;
            width: 30%;
            height: 1px;
            background-color: var(--color-gray-200);
        }
        
        .message-date::before {
            left: 10%;
        }
        
        .message-date::after {
            right: 10%;
        }
        
        .message {
            display: flex;
            max-width: 85%;
        }
        
        .message.user {
            align-self: flex-end;
            flex-direction: row-reverse;
        }
        
        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 12px;
        }
        
        .message.bot .message-avatar {
            background-color: #e6f4ff;
            color: var(--color-primary);
        }
        
        .message.user .message-avatar {
            background-color: var(--color-gray-100);
            color: var(--color-gray-600);
        }
        
        .message-content {
            display: flex;
            flex-direction: column;
        }
        
        .message-bubble {
            padding: 12px 16px;
            border-radius: 16px;
            margin-bottom: 4px;
            position: relative;
        }
        
        .message.bot .message-bubble {
            background-color: white;
            border: 1px solid var(--color-gray-200);
            border-bottom-left-radius: 4px;
        }
        
        .message.user .message-bubble {
            background-color: var(--color-primary);
            color: white;
            border-bottom-right-radius: 4px;
        }
        
        .message-bubble p {
            margin: 0;
            line-height: 1.5;
        }
        
        .message-time {
            font-size: 11px;
            color: var(--color-gray-500);
        }
        
        .message.user .message-time {
            align-self: flex-end;
        }
        
        /* Fix for the chat input container */
        .chat-input-container {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            border-top: 1px solid var(--color-gray-200);
            background-color: white;
            gap: 8px;
        }
        
        .input-attachment-btn {
            background: none;
            border: none;
            color: var(--color-gray-500);
            font-size: 20px;
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
        }
        
        .input-wrapper {
            flex: 1;
            position: relative;
            display: flex;
            align-items: center;
            background-color: var(--color-gray-100);
            border-radius: 24px;
            padding: 8px 12px;
        }
        
        #messageInput {
            flex: 1;
            border: none;
            background: transparent;
            padding: 8px;
            font-size: 14px;
            outline: none;
        }
        
        .voice-input-btn {
            background: none;
            border: none;
            color: var(--color-gray-500);
            cursor: pointer;
            padding: 4px;
        }
        
        .send-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--color-primary);
            color: white;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }
        
        .send-btn:disabled {
            background-color: var(--color-gray-300);
            cursor: not-allowed;
        }
        
        /* Right panel styles */
        .chat-info {
            background-color: white;
            border-left: 1px solid var(--color-gray-200);
            overflow-y: auto;
        }
        
        .info-header {
            padding: 16px;
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .info-header h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }
        
        .info-section {
            padding: 16px;
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .section-title {
            font-size: 12px;
            font-weight: 600;
            color: var(--color-gray-500);
            margin-bottom: 16px;
        }
        
        .assistant-info {
            display: flex;
            align-items: center;
        }
        
        .assistant-avatar {
            width: 48px;
            height: 48px;
            border-radius: 8px;
            background-color: #e6f4ff;
            color: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 16px;
            font-size: 20px;
        }
        
        .assistant-name {
            font-weight: 600;
            margin-bottom: 4px;
        }
        
        .assistant-department {
            font-size: 12px;
            color: var(--color-gray-600);
            margin-bottom: 4px;
        }
        
        .assistant-model {
            display: inline-block;
            font-size: 12px;
            background-color: var(--color-gray-100);
            color: var(--color-gray-700);
            padding: 2px 8px;
            border-radius: 50px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
            text-align: center;
        }
        
        .stat-item {
            background-color: var(--color-gray-50);
            padding: 12px 8px;
            border-radius: 8px;
        }
        
        .stat-value {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 4px;
        }
        
        .stat-label {
            font-size: 12px;
            color: var(--color-gray-500);
        }
        
        .topics-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }
        
        .topic-btn {
            background-color: var(--color-gray-100);
            border: none;
            padding: 6px 12px;
            border-radius: 50px;
            font-size: 12px;
            color: var(--color-gray-700);
            cursor: pointer;
        }
        
        .topic-btn:hover {
            background-color: #e6f4ff;
            color: var(--color-primary);
        }
        
        /* Responsive styles */
        @@media (max-width: 1200px) {
            .chat-container {
                grid-template-columns: 280px 1fr;
            }
            
            .chat-info {
                display: none;
            }
        }
        
        @@media (max-width: 768px) {
            .chat-container {
                grid-template-columns: 1fr;
            }
            
            .chat-sidebar {
                display: none;
            }
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendMessage');
            const chatMessages = document.querySelector('.chat-messages');
            
            // Scroll to bottom of chat on load (important for continued conversations)
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Enable/disable send button based on input
            messageInput.addEventListener('input', function() {
                sendButton.disabled = this.value.trim() === '';
            });
            
            // Send message on button click
            sendButton.addEventListener('click', sendMessage);
            
            // Send message on Enter key
            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (!sendButton.disabled) {
                        sendMessage();
                    }
                }
            });
            
            function sendMessage() {
                const message = messageInput.value.trim();
                if (!message) return;
                
                // Get current time
                const now = new Date();
                const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                
                // Create user message HTML
                const messageElement = document.createElement('div');
                messageElement.className = 'message user';
                messageElement.innerHTML = `
                    <div class="message-content">
                        <div class="message-bubble">
                            <p>${message}</p>
                        </div>
                        <div class="message-time">${timeString}</div>
                    </div>
                    <div class="message-avatar">
                        <i class="bi bi-person"></i>
                    </div>
                `;
                
                // Add message to chat
                chatMessages.appendChild(messageElement);
                
                // Clear input
                messageInput.value = '';
                sendButton.disabled = true;
                
                // Scroll to bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                // Show typing indicator
                showTypingIndicator();
                
                // Simulate bot response after a delay
                setTimeout(() => {
                    // Remove typing indicator
                    removeTypingIndicator();
                    
                    // Add bot response
                    const botResponse = getBotResponse(message);
                    const botMessageElement = document.createElement('div');
                    botMessageElement.className = 'message bot';
                    botMessageElement.innerHTML = `
                        <div class="message-avatar">
                            <i class="bi bi-robot"></i>
                        </div>
                        <div class="message-content">
                            <div class="message-bubble">
                                <p>${botResponse}</p>
                            </div>
                            <div class="message-time">${timeString}</div>
                        </div>
                    `;
                    
                    // Add bot message to chat
                    chatMessages.appendChild(botMessageElement);
                    
                    // Update message count in stats
                    updateMessageCount();
                    
                    // Scroll to bottom
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }, 1500);
            }
            
            function updateMessageCount() {
                const messageCount = document.querySelector('.stats-grid .stat-value');
                if (messageCount) {
                    const currentCount = parseInt(messageCount.textContent);
                    messageCount.textContent = currentCount + 2; // +2 for user message and bot response
                }
            }
            
            function showTypingIndicator() {
                const typingElement = document.createElement('div');
                typingElement.className = 'message bot typing-indicator';
                typingElement.id = 'typingIndicator';
                typingElement.innerHTML = `
                    <div class="message-avatar">
                        <i class="bi bi-robot"></i>
                    </div>
                    <div class="message-content">
                        <div class="message-bubble">
                            <div class="typing-dots">
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>
                        </div>
                    </div>
                `;
                
                chatMessages.appendChild(typingElement);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            function removeTypingIndicator() {
                const typingIndicator = document.getElementById('typingIndicator');
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }
            
            function getBotResponse(message) {
                // Contextual responses based on session ID
                const path = window.location.pathname;
                const sessionId = path.substring(path.lastIndexOf('/') + 1);
                
                if (sessionId === "session-1234-abcd") {
                    // Customer Support bot responses
                    if (message.toLowerCase().includes("refund") || message.toLowerCase().includes("return")) {
                        return "Based on our previous conversation, I can confirm that partial refunds are available. Would you like me to provide the detailed return process now?";
                    }
                    if (message.toLowerCase().includes("order") || message.toLowerCase().includes("delivery")) {
                        return "Your order #12345 is still on track for delivery tomorrow. The carrier's tracking number is TRK78901234, in case you'd like to follow its progress.";
                    }
                } else if (sessionId === "session-9012-ijkl") {
                    // Sales Assistant bot responses
                    if (message.toLowerCase().includes("price") || message.toLowerCase().includes("cost") || message.toLowerCase().includes("discount")) {
                        return "Our Professional plan is $199/month billed annually or $249/month billed monthly. We also offer a 15% discount for non-profits and educational institutions. Would you like me to send you our detailed pricing sheet?";
                    }
                    if (message.toLowerCase().includes("feature") || message.toLowerCase().includes("include")) {
                        return "The Professional plan includes: 20 user seats, priority email support, advanced analytics, custom integrations, unlimited projects, 100GB storage, and all our premium features. Is there a specific feature you're interested in?";
                    }
                }
                
                // Generic responses if no contextual match
                const responses = [
                    "I understand your question. Let me get you some more information about that.",
                    "Thanks for providing those details. Based on what you've shared, here's what I can tell you.",
                    "I appreciate your question. Here's what you need to know about that.",
                    "That's a good point. Let me address that for you specifically.",
                    "I can definitely help with that. Here's the information you're looking for."
                ];
                
                return responses[Math.floor(Math.random() * responses.length)];
            }
        });
    </script>
        <style>
        /* Add styling for typing indicator */
        .typing-dots {
            display: flex;
            gap: 4px;
            padding: 6px 0;
        }
        
        .typing-dots span {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--color-gray-400);
            animation: typingAnimation 1.4s infinite ease-in-out;
        }
        
        .typing-dots span:nth-child(1) { animation-delay: 0s; }
        .typing-dots span:nth-child(2) { animation-delay: 0.2s; }
        .typing-dots span:nth-child(3) { animation-delay: 0.4s; }
        
       @@keyframes typingAnimation {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
    </style>
}