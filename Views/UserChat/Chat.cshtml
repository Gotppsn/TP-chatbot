@model AIHelpdeskSupport.ViewModels.UserChatViewModel
@{
    ViewData["Title"] = "Chat with " + Model.Chatbot.Name;
    string colorClass = GetColorClass(Model.Chatbot.Department);
    string iconClass = GetIconClass(Model.Chatbot.Department);
}

<div class="chat-container">
    <div class="chat-header">
        <div class="d-flex align-items-center">
            <a href="@Url.Action("Index")" class="btn btn-sm btn-icon me-2">
                <i class="bi bi-arrow-left"></i>
            </a>
            <div class="chatbot-avatar bg-@colorClass-subtle text-@colorClass">
                <i class="bi @iconClass"></i>
            </div>
            <div class="ms-3">
                <h5 class="mb-0">@Model.Chatbot.Name</h5>
                <div class="d-flex align-items-center mt-1">
                    <span class="badge bg-@colorClass-subtle text-@colorClass">@Model.Chatbot.Department</span>
                    <span class="typing-indicator ms-2 d-none">
                        <span class="dot"></span>
                        <span class="dot"></span>
                        <span class="dot"></span>
                    </span>
                </div>
            </div>
        </div>
        <div>
            <button class="btn btn-sm btn-icon" id="toggleInfoBtn" title="Chat Info">
                <i class="bi bi-info-circle"></i>
            </button>
        </div>
    </div>

    <div class="chat-body">
        <div class="messages" id="messageContainer">
            <div class="message bot">
                <div class="message-avatar bg-@colorClass-subtle text-@colorClass">
                    <i class="bi @iconClass"></i>
                </div>
                <div class="message-content">
                    <div class="message-bubble">
                        <p>ðŸ‘‹ Hello! I'm <strong>@Model.Chatbot.Name</strong>. How can I help you today?</p>
                    </div>
                    <div class="message-time">@DateTime.Now.ToString("h:mm tt")</div>
                </div>
            </div>
        </div>
    </div>

    <div class="chat-footer">
        <form id="chatForm" class="d-flex w-100 gap-2">
            <input type="hidden" id="chatbotId" value="@Model.Chatbot.Id" />
            <input type="hidden" id="sessionId" value="@Model.SessionId" />
            
            <div class="input-group">
                <textarea id="messageInput" class="form-control" placeholder="Type your message..." rows="1" required></textarea>
                <button class="btn btn-icon" type="button" id="attachmentBtn">
                    <i class="bi bi-paperclip"></i>
                </button>
            </div>
            <button type="submit" class="btn btn-primary send-btn" id="sendBtn" disabled>
                <i class="bi bi-send"></i>
            </button>
        </form>
    </div>
</div>

<div class="chat-info-panel" id="chatInfoPanel">
    <div class="info-header">
        <h5>About this Assistant</h5>
        <button class="btn-close" id="closeInfoBtn"></button>
    </div>
    <div class="info-body">
        <div class="info-section">
            <h6>Department</h6>
            <p>@Model.Chatbot.Department</p>
        </div>
        <div class="info-section">
            <h6>AI Model</h6>
            <p>@Model.Chatbot.AiModel</p>
        </div>
        @if (!string.IsNullOrEmpty(Model.Chatbot.Description))
        {
            <div class="info-section">
                <h6>Description</h6>
                <p>@Model.Chatbot.Description</p>
            </div>
        }
    </div>
</div>

@section Styles {
    <style>
        .chat-container {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 120px);
            background-color: #fff;
            border-radius: 12px;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            overflow: hidden;
        }
        
        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }
        
        .chatbot-avatar {
            width: 40px;
            height: 40px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
        }
        
        .chat-body {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            background-color: #f8f9fa;
        }
        
        .messages {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        
        .message {
            display: flex;
            max-width: 80%;
            align-items: flex-start;
        }
        
        .message.user {
            margin-left: auto;
            flex-direction: row-reverse;
        }
        
        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            margin: 0 0.75rem;
        }
        
        .message.user .message-avatar {
            background-color: #e9ecef;
            color: #495057;
        }
        
        .message-content {
            display: flex;
            flex-direction: column;
        }
        
        .message-bubble {
            padding: 0.75rem 1rem;
            border-radius: 16px;
            background-color: #fff;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 0.25rem;
        }
        
        .message.user .message-bubble {
            background-color: #0d6efd;
            color: #fff;
            border-bottom-right-radius: 4px;
        }
        
        .message.bot .message-bubble {
            border-bottom-left-radius: 4px;
        }
        
        .message-time {
            font-size: 0.75rem;
            color: #6c757d;
            margin-left: 0.5rem;
        }
        
        .message.user .message-time {
            align-self: flex-end;
            margin-right: 0.5rem;
        }
        
        .chat-footer {
            padding: 1rem;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            background-color: #fff;
        }
        
        .input-group {
            flex: 1;
            position: relative;
        }
        
        #messageInput {
            border-radius: 24px;
            padding-right: 40px;
            resize: none;
            overflow: hidden;
            transition: height 0.2s;
        }
        
        .btn-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            padding: 0;
        }
        
        #attachmentBtn {
            position: absolute;
            right: 4px;
            top: 4px;
            color: #6c757d;
            background: none;
            border: none;
            z-index: 5;
        }
        
        .send-btn {
            border-radius: 50%;
        }
        
        /* Info panel */
        .chat-info-panel {
            position: fixed;
            top: 0;
            right: -320px;
            width: 320px;
            height: 100vh;
            background-color: #fff;
            box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);
            z-index: 1050;
            transition: right 0.3s ease;
        }
        
        .chat-info-panel.active {
            right: 0;
        }
        
        .info-header {
            padding: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .info-body {
            padding: 1rem;
        }
        
        .info-section {
            margin-bottom: 1.5rem;
        }
        
        .info-section h6 {
            font-size: 0.875rem;
            color: #6c757d;
            margin-bottom: 0.5rem;
        }
        
        .typing-indicator .dot {
            display: inline-block;
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background-color: currentColor;
            animation: typing 1s infinite;
            margin: 0 1px;
        }
        
        .typing-indicator .dot:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-indicator .dot:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @@keyframes typing {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-4px); }
        }
        
        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .chat-container {
                height: calc(100vh - 90px);
                border-radius: 0;
            }
            
            .message {
                max-width: 90%;
            }
            
            .chat-info-panel {
                width: 280px;
            }
        }
        
        /* Bootstrap color extensions */
        .bg-primary-subtle { background-color: rgba(13, 110, 253, 0.1); }
        .bg-success-subtle { background-color: rgba(25, 135, 84, 0.1); }
        .bg-info-subtle { background-color: rgba(13, 202, 240, 0.1); }
        .bg-warning-subtle { background-color: rgba(255, 193, 7, 0.1); }
        .bg-danger-subtle { background-color: rgba(220, 53, 69, 0.1); }
        .bg-secondary-subtle { background-color: rgba(108, 117, 125, 0.1); }
        
        .text-primary { color: #0d6efd !important; }
        .text-success { color: #198754 !important; }
        .text-info { color: #0dcaf0 !important; }
        .text-warning { color: #ffc107 !important; }
        .text-danger { color: #dc3545 !important; }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatForm = document.getElementById('chatForm');
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');
            const messageContainer = document.getElementById('messageContainer');
            const chatbotId = document.getElementById('chatbotId').value;
            const sessionId = document.getElementById('sessionId').value;
            const typingIndicator = document.querySelector('.typing-indicator');
            const toggleInfoBtn = document.getElementById('toggleInfoBtn');
            const closeInfoBtn = document.getElementById('closeInfoBtn');
            const chatInfoPanel = document.getElementById('chatInfoPanel');
            
            // Auto-resize textarea
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight < 120 ? this.scrollHeight : 120) + 'px';
                sendBtn.disabled = this.value.trim() === '';
            });
            
            // Toggle info panel
            toggleInfoBtn.addEventListener('click', function() {
                chatInfoPanel.classList.toggle('active');
            });
            
            closeInfoBtn.addEventListener('click', function() {
                chatInfoPanel.classList.remove('active');
            });
            
            // Send message
            chatForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const message = messageInput.value.trim();
                if (!message) return;
                
                // Add user message
                addMessage('user', message);
                
                // Clear input and reset
                messageInput.value = '';
                messageInput.style.height = 'auto';
                sendBtn.disabled = true;
                
                // Show typing indicator
                typingIndicator.classList.remove('d-none');
                
                // Send to server
                sendMessage(message);
            });
            
            function addMessage(type, content) {
                const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${type}`;
                
                const avatarIcon = type === 'bot' 
                    ? `<i class="bi @iconClass"></i>` 
                    : `<i class="bi bi-person"></i>`;
                    
                const avatarClass = type === 'bot' 
                    ? `bg-@colorClass-subtle text-@colorClass` 
                    : ``;
                
                messageDiv.innerHTML = `
                    <div class="message-avatar ${avatarClass}">
                        ${avatarIcon}
                    </div>
                    <div class="message-content">
                        <div class="message-bubble">
                            <p>${content}</p>
                        </div>
                        <div class="message-time">${time}</div>
                    </div>
                `;
                
                messageContainer.appendChild(messageDiv);
                scrollToBottom();
            }
            
            function scrollToBottom() {
                messageContainer.scrollTop = messageContainer.scrollHeight;
            }
            
            function sendMessage(message) {
                // Simulate API call
                setTimeout(() => {
                    // Hide typing indicator
                    typingIndicator.classList.add('d-none');
                    
                    // Add bot response (simulated)
                    let botResponse = "Thank you for your message. I'm a demo chatbot for development purposes. This is a placeholder response since we're not connecting to a real API yet.";
                    
                    // Add different responses based on user message
                    if (message.toLowerCase().includes('hello') || message.toLowerCase().includes('hi')) {
                        botResponse = "Hello there! How can I help you today?";
                    } else if (message.toLowerCase().includes('help')) {
                        botResponse = "I'm here to help! Please tell me what you need assistance with.";
                    } else if (message.toLowerCase().includes('thanks') || message.toLowerCase().includes('thank you')) {
                        botResponse = "You're welcome! Is there anything else I can help you with?";
                    }
                    
                    addMessage('bot', botResponse);
                }, 1000);
                
                // This is the actual API call that would be used in production
                /*
                fetch('/api/userchat/message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        chatbotId: chatbotId,
                        message: message,
                        sessionId: sessionId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    // Hide typing indicator
                    typingIndicator.classList.add('d-none');
                    
                    // Add bot response
                    if (data.success) {
                        addMessage('bot', data.response);
                    } else {
                        addMessage('bot', 'Sorry, I encountered an error. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    typingIndicator.classList.add('d-none');
                    addMessage('bot', 'Sorry, I encountered an error. Please try again.');
                });
                */
            }
        });
    </script>
}

@functions {
    string GetColorClass(string department) {
        return department switch {
            "Customer Service" => "primary",
            "IT Support" => "info",
            "Sales" => "warning",
            "Billing" => "danger",
            "Technical" => "success",
            _ => "secondary"
        };
    }
    
    string GetIconClass(string department) {
        return department switch {
            "Customer Service" => "bi-headset",
            "IT Support" => "bi-pc-display",
            "Sales" => "bi-currency-dollar",
            "Billing" => "bi-credit-card",
            "Technical" => "bi-wrench",
            _ => "bi-robot"
        };
    }
}