@Html.AntiForgeryToken()
@model AIHelpdeskSupport.ViewModels.UserChatViewModel
@{
    ViewData["Title"] = "Chat Support";
    bool isContinuingConversation = !string.IsNullOrEmpty(Model.SessionId);
    string sessionId = Model.SessionId;
}

<div class="chat-container">
    <!-- Chat sidebar -->
    <div class="chat-sidebar" id="chatSidebar">
        <div class="sidebar-header">
            <div class="logo-container">
                <div class="app-logo">
                    <i class="bi bi-robot"></i>
                    <span>AI Helpdesk</span>
                </div>
            </div>
            <button id="sidebarToggle" class="btn-icon sidebar-toggle">
                <i class="bi bi-chevron-left"></i>
            </button>
        </div>

        <div class="conversation-list" id="conversationList">
            <!-- Recent conversations will be loaded here -->
            <div class="empty-conversations-msg">
                <i class="bi bi-chat-square-text"></i>
                <p>Start a new conversation</p>
            </div>
        </div>
        
        <div class="sidebar-footer">
            <a href="/UserChat" class="btn-new-chat">
                <i class="bi bi-plus-circle"></i>
                <span>New Conversation</span>
            </a>
        </div>
    </div>

    <!-- Main chat area -->
    <div class="chat-main">
        <!-- Chat header -->
        <div class="chat-header">
            <div class="mobile-toggle" id="mobileSidebarToggle">
                <i class="bi bi-list"></i>
            </div>
            <div class="chat-header-info">
                <div class="bot-icon"><i class="bi bi-robot"></i></div>
                <div class="bot-details">
                    <div class="bot-name">@Model.Chatbot.Name</div>
                    <div class="bot-status">
                        <span class="status-indicator online"></span>
                        <span>@Model.Chatbot.Department</span>
                    </div>
                </div>
            </div>
            <div class="chat-header-actions">
                <button class="btn-icon" id="infoToggle" title="Toggle Info Panel">
                    <i class="bi bi-info-circle"></i>
                </button>
                <div class="header-dropdown">
                    <button class="btn-icon" id="chatMenuBtn" title="Chat Menu">
                        <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <div class="dropdown-menu" id="chatMenu">
                        <a href="#" class="dropdown-item" id="exportChat">
                            <i class="bi bi-arrow-90deg-up"></i> Export Chat
                        </a>
                        <a href="#" class="dropdown-item" id="clearChat">
                            <i class="bi bi-trash"></i> Clear Chat
                        </a>
                        <a href="#" class="dropdown-item" id="endChat">
                            <i class="bi bi-x-circle"></i> End Chat
                        </a>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Chat messages container -->
        <div class="chat-messages" id="chatMessages">
            <!-- Welcome message -->
            <div class="message-date" id="currentDate">
                @DateTime.Now.ToString("MMMM d, yyyy")
            </div>
        </div>
        
        <!-- Chat input area -->
        <div class="chat-input-container">
            <input type="hidden" id="sessionId" value="@Model.SessionId">
            <input type="hidden" id="chatbotId" value="@Model.Chatbot.Id">
            
            <div class="input-actions">
                <button class="input-action-btn" title="Add attachment" id="attachmentBtn">
                    <i class="bi bi-paperclip"></i>
                </button>
            </div>
            
            <div class="input-wrapper">
                <textarea id="messageInput" placeholder="Type your message..." rows="1"></textarea>
                <button class="voice-input-btn" title="Voice input" id="voiceBtn">
                    <i class="bi bi-mic"></i>
                </button>
            </div>
            
            <button class="send-btn" id="sendMessage" disabled>
                <i class="bi bi-send"></i>
            </button>
        </div>
    </div>
    
    <!-- Info panel -->
    <div class="chat-info" id="chatInfo">
        <div class="info-header">
            <h3>Conversation Details</h3>
            <button class="btn-icon info-close" id="infoClose">
                <i class="bi bi-x"></i>
            </button>
        </div>
        
        <div class="info-section">
            <h4 class="section-title">AI ASSISTANT</h4>
            <div class="assistant-info">
                <div class="assistant-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="assistant-details">
                    <div class="assistant-name">@Model.Chatbot.Name</div>
                    <div class="assistant-department">@Model.Chatbot.Department</div>
                    <div class="assistant-model">@Model.Chatbot.AiModel</div>
                </div>
            </div>
        </div>
        
        <div class="info-section">
            <h4 class="section-title">CONVERSATION STATS</h4>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value" id="messageCount">0</div>
                    <div class="stat-label">Messages</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="avgResponseTime">0.0s</div>
                    <div class="stat-label">Avg. Response</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="chatDuration">0m</div>
                    <div class="stat-label">Duration</div>
                </div>
            </div>
        </div>
        
        <div class="info-section" id="feedbackSection">
            <h4 class="section-title">RATE CONVERSATION</h4>
            <div class="feedback-container">
                <div class="star-rating" id="chatRating">
                    <i class="bi bi-star rating-star" data-rating="1"></i>
                    <i class="bi bi-star rating-star" data-rating="2"></i>
                    <i class="bi bi-star rating-star" data-rating="3"></i>
                    <i class="bi bi-star rating-star" data-rating="4"></i>
                    <i class="bi bi-star rating-star" data-rating="5"></i>
                </div>
                <div class="feedback-input-container">
                    <textarea id="feedbackText" placeholder="Share your feedback (optional)..." rows="3"></textarea>
                    <button id="submitFeedback" class="btn btn-primary" disabled>Submit Feedback</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>

async function callFlowiseAPI(message) {
    try {
        // Use the chatbotId from localStorage or fall back to model
        const activeChatbotId = chatbotId || @Model.Chatbot.Id;
        
        console.log("Sending message to chatbot ID:", activeChatbotId);
        
        // API endpoint and settings
        const response = await fetch(`/api/chat/${activeChatbotId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: JSON.stringify({
                message: message,
                sessionId: sessionId
            })
        });

        if (!response.ok) {
            throw new Error(`Server responded with status: ${response.status}`);
        }

        const data = await response.json();
        return data.response;
    } catch (error) {
        console.error('API call failed:', error);
        throw error;
    }
}

    // Global variables
    let sessionId = "@Model.SessionId";
    let chatbotId = @Model.Chatbot.Id;
    let isConnected = true;
    let userScrolled = false;
    let isScrolledToBottom = true;
    let messageCount = 0;
    let lastMessageTime = new Date();
    let startTime = new Date();
    let lastResponseTimes = [];
    let currentRating = 0;
    let feedbackSubmitted = false;
    
    // Elements
    const chatMessages = document.getElementById('chatMessages');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendMessage');
    const chatInfo = document.getElementById('chatInfo');
    const sidebar = document.getElementById('chatSidebar');

    function retrieveChatbotFromSession() {
    // Get session ID from URL or hidden input
    const sessionIdFromUrl = window.location.pathname.split('/').pop();
    if (sessionIdFromUrl && sessionIdFromUrl.startsWith('session-')) {
        sessionId = sessionIdFromUrl;
        
        // Get chatbot info from localStorage
        const chatDataJson = localStorage.getItem(sessionId);
        if (chatDataJson) {
            try {
                const chatData = JSON.parse(chatDataJson);
                if (chatData.chatbotId) {
                    // Update the chatbotId to use in API calls
                    chatbotId = chatData.chatbotId;
                    console.log("Retrieved chatbot ID:", chatbotId);
                    return true;
                }
            } catch (error) {
                console.error("Error parsing chat data:", error);
            }
        }
    }
    return false;
}
    
    document.addEventListener('DOMContentLoaded', function() {
            if (!retrieveChatbotFromSession()) {
        console.warn("Could not retrieve chatbot ID from session - using default from model");
        // Continue with default model values
    }
        // Initialize chat
        initializeChat();
        
        // Set up event listeners
        setupEventListeners();
        
        // Load recent conversations
        loadRecentConversations();
        
        // Start chat duration timer
        startChatDurationTimer();
        
        // Scroll to bottom initially
        scrollToBottom();
        
        // Check for existing messages in the model
        if (@Model.Messages.Count > 0) {
            messageCount = @Model.Messages.Count;
            updateMessageCount();
        } else {
            // Add welcome message if no existing messages
            addWelcomeMessage();
        }
        
        // Focus input field
        messageInput.focus();
    });
    
    function initializeChat() {
        // Initialize or continue session
        if (!sessionId || sessionId === "") {
            sessionId = generateSessionId();
            document.getElementById('sessionId').value = sessionId;
            
            // Store session in localStorage for history
            storeSessionInfo();
        } else {
            // Load messages from localStorage if continuing conversation
            const savedMessages = getSavedMessages(sessionId);
            if (savedMessages && savedMessages.length > 0) {
                renderSavedMessages(savedMessages);
            }
        }
    }
    
    function setupEventListeners() {
        // Send message on button click
        sendButton.addEventListener('click', sendMessage);
        
        // Send message on Enter key (not Shift+Enter)
        messageInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                if (!sendButton.disabled) {
                    sendMessage();
                }
            }
        });
        
        // Auto-resize textarea as user types
        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
            sendButton.disabled = this.value.trim() === '';
        });
        
        // Menu toggles
        document.getElementById('chatMenuBtn').addEventListener('click', function(e) {
            e.stopPropagation();
            document.getElementById('chatMenu').classList.toggle('show');
        });
        
        document.getElementById('infoToggle').addEventListener('click', function() {
            chatInfo.classList.toggle('show');
        });
        
        document.getElementById('infoClose').addEventListener('click', function() {
            chatInfo.classList.remove('show');
        });
        
        document.getElementById('sidebarToggle').addEventListener('click', function() {
            sidebar.classList.toggle('collapsed');
            this.querySelector('i').classList.toggle('bi-chevron-left');
            this.querySelector('i').classList.toggle('bi-chevron-right');
        });
        
        document.getElementById('mobileSidebarToggle').addEventListener('click', function() {
            sidebar.classList.toggle('show');
        });
        
        // Chat actions
        document.getElementById('clearChat').addEventListener('click', clearChat);
        document.getElementById('exportChat').addEventListener('click', exportChat);
        document.getElementById('endChat').addEventListener('click', endChat);
        
        // Feedback and rating
        setupFeedbackListeners();
        
        // Close dropdown on click outside
        document.addEventListener('click', function() {
            document.getElementById('chatMenu').classList.remove('show');
        });
        
        // Handle scroll events
        chatMessages.addEventListener('scroll', function() {
            userScrolled = true;
            checkScrollPosition();
        });
    }
    
    function addWelcomeMessage() {
        const welcomeMessage = `👋 Hello! I'm ${@Html.Raw(Json.Serialize(Model.Chatbot.Name))}, your AI assistant for ${@Html.Raw(Json.Serialize(Model.Chatbot.Department))}. How can I help you today?`;
        
        const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        appendMessage(welcomeMessage, 'bot', time);
        messageCount++;
        updateMessageCount();
        
        // Save welcome message
        saveMessage(welcomeMessage, false, time);
    }
    
function sendMessage() {
    const message = messageInput.value.trim();
    if (!message) return;
    
    // Get current time
    const now = new Date();
    const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    lastMessageTime = now;
    
    // Add user message to chat
    appendMessage(message, 'user', timeString);
    
    // Save message to history
    saveMessage(message, true, timeString);
    
    // Clear input and reset height
    messageInput.value = '';
    messageInput.style.height = 'auto';
    sendButton.disabled = true;
    
    // Scroll to bottom
    scrollToBottom();
    
    // Show typing indicator
    showTypingIndicator();
    
    // Start timing for response
    const startTime = performance.now();
    
    // Call Flowise API
    callFlowiseAPI(message)
        .then(response => {
            // Calculate response time
            const endTime = performance.now();
            const responseTime = ((endTime - startTime) / 1000).toFixed(2);
            trackResponseTime(responseTime);
            
            // Remove typing indicator
            removeTypingIndicator();
            
            // Add bot response
            const botTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            appendMessage(response, 'bot', botTime);
            saveMessage(response, false, botTime);
            
            // Update UI
            messageCount += 2; // User message + bot response
            updateMessageCount();
            updateAverageResponseTime();
            
            // Scroll to bottom
            scrollToBottom();
            
            // Focus input for next message
            messageInput.focus();
        })
        .catch(error => {
            console.error('Error:', error);
            
            // Remove typing indicator
            removeTypingIndicator();
            
            // Show error message
            const errorMessage = "Sorry, I'm having trouble connecting to the server. Please try again later.";
            const errorTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            appendMessage(errorMessage, 'bot', errorTime);
            saveMessage(errorMessage, false, errorTime);
            
            // Update UI
            messageCount += 2; // User message + error message
            updateMessageCount();
            
            // Scroll to bottom
            scrollToBottom();
        });
}

function addMessageFeedback(messageElement, responseId) {
    const feedbackEl = document.createElement('div');
    feedbackEl.className = 'message-feedback';
    feedbackEl.innerHTML = `
        <button class="feedback-btn" onclick="rateBotResponse('${responseId}', 'helpful')">
            <i class="bi bi-hand-thumbs-up"></i>
        </button>
        <button class="feedback-btn" onclick="rateBotResponse('${responseId}', 'unhelpful')">
            <i class="bi bi-hand-thumbs-down"></i>
        </button>
    `;
    
    messageElement.querySelector('.message-content').appendChild(feedbackEl);
}

function checkConnectionStatus() {
    if (!navigator.onLine) {
        setConnectionStatus(false, "You're offline. Please check your internet connection.");
        return false;
    }
    
    // Try a simple ping to the API
    fetch('/api/chat/ping', { method: 'GET' })
        .then(response => {
            setConnectionStatus(response.ok, response.ok ? "Connected" : "Connection issues detected");
            return response.ok;
        })
        .catch(() => {
            setConnectionStatus(false, "Cannot reach server");
            return false;
        });
}

function setConnectionStatus(isConnected, message) {
    const statusElement = document.getElementById('connectionStatus');
    if (statusElement) {
        statusElement.textContent = message;
        statusElement.className = isConnected ? 'connected' : 'disconnected';
    }
    
    isConnected = isConnected;
    
    // Add a reconnection button if disconnected
    if (!isConnected && document.getElementById('reconnectBtn') === null) {
        const reconnectBtn = document.createElement('button');
        reconnectBtn.id = 'reconnectBtn';
        reconnectBtn.className = 'reconnect-button';
        reconnectBtn.innerHTML = '<i class="bi bi-arrow-repeat"></i> Reconnect';
        reconnectBtn.onclick = checkConnectionStatus;
        
        statusElement.parentNode.appendChild(reconnectBtn);
    } else if (isConnected) {
        const reconnectBtn = document.getElementById('reconnectBtn');
        if (reconnectBtn) reconnectBtn.remove();
    }
}

function rateBotResponse(responseId, rating) {
    // Send rating to server
    fetch('/api/chat/feedback', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            responseId,
            rating,
            sessionId
        })
    })
    .then(response => {
        if (response.ok) {
            // Show thank you message
            const feedbackElements = document.querySelectorAll(`.message-feedback[data-response-id="${responseId}"]`);
            feedbackElements.forEach(el => {
                el.innerHTML = '<span class="feedback-thanks">Thanks for your feedback!</span>';
            });
        }
    })
    .catch(error => console.error('Error sending feedback:', error));
}
    
    function appendMessage(text, sender, time) {
        const messageEl = document.createElement('div');
        messageEl.className = `message ${sender}`;
        
        let messageContent = '';
        
        if (sender === 'bot') {
            messageContent = `
                <div class="message-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="message-content">
                    <div class="message-bubble">
                        <p>${formatMessageText(text)}</p>
                    </div>
                    <div class="message-time">${time}</div>
                    <div class="message-actions">
                        <button class="action-btn" title="Copy to clipboard" onclick="copyToClipboard(this)">
                            <i class="bi bi-clipboard"></i>
                        </button>
                        <button class="action-btn" title="Rate response">
                            <i class="bi bi-hand-thumbs-up"></i>
                        </button>
                    </div>
                </div>
            `;
        } else {
            messageContent = `
                <div class="message-content">
                    <div class="message-bubble">
                        <p>${formatMessageText(text)}</p>
                    </div>
                    <div class="message-time">${time}</div>
                </div>
            `;
        }
        
        messageEl.innerHTML = messageContent;
        chatMessages.appendChild(messageEl);
    }
    
    function showTypingIndicator() {
        const typingEl = document.createElement('div');
        typingEl.className = 'message bot typing-indicator';
        typingEl.id = 'typingIndicator';
        
        typingEl.innerHTML = `
            <div class="message-avatar">
                <i class="bi bi-robot"></i>
            </div>
            <div class="message-content">
                <div class="typing-indicator">
                    <span></span><span></span><span></span>
                </div>
            </div>
        `;
        
        chatMessages.appendChild(typingEl);
        scrollToBottom();
    }
    
    function removeTypingIndicator() {
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
    
    function scrollToBottom() {
        if (!userScrolled || isScrolledToBottom) {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }
    
    function checkScrollPosition() {
        const scrollPosition = chatMessages.scrollTop + chatMessages.clientHeight;
        isScrolledToBottom = scrollPosition >= chatMessages.scrollHeight - 30; // 30px threshold
        
        if (isScrolledToBottom) {
            userScrolled = false;
        }
    }
    
    // Message formatting and processing
    function formatMessageText(text) {
        if (!text) return '';
        
        // Handle objects if any
        if (typeof text === 'object') {
            try {
                text = JSON.stringify(text);
            } catch (e) {
                text = String(text);
            }
        }
        
        // Escape HTML
        text = escapeHtml(text);
        
        // Handle links
        text = text.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank">$1</a>');
        
        // Handle newlines
        text = text.replace(/\n/g, '<br>');
        
        return text;
    }
    
    function escapeHtml(text) {
        if (!text) return '';
        
        return String(text)
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#039;');
    }
    
    // Copy message to clipboard
    function copyToClipboard(button) {
        const messageBubble = button.closest('.message-content').querySelector('.message-bubble p');
        const text = messageBubble.textContent;
        
        navigator.clipboard.writeText(text).then(() => {
            // Visual feedback
            const originalIcon = button.innerHTML;
            button.innerHTML = '<i class="bi bi-check"></i>';
            setTimeout(() => {
                button.innerHTML = originalIcon;
            }, 2000);
        });
    }
    
    // Session and history management
    function generateSessionId() {
        return `session-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;
    }
    
    function storeSessionInfo() {
        try {
            // Create session info
            const sessionInfo = {
                id: sessionId,
                chatbotId: chatbotId,
                chatbotName: '@Model.Chatbot.Name',
                department: '@Model.Chatbot.Department',
                startTime: new Date().toISOString(),
                lastActive: new Date().toISOString()
            };
            
            // Store in localStorage
            localStorage.setItem(`chat_session_${sessionId}`, JSON.stringify(sessionInfo));
            
            // Update recent conversations list
            updateRecentConversations(sessionInfo);
        } catch (error) {
            console.error('Error storing session:', error);
        }
    }
    
    function updateRecentConversations(sessionInfo) {
        try {
            // Get existing conversations
            let recentConversations = JSON.parse(localStorage.getItem('recent_conversations') || '[]');
            
            // Add current session to the beginning if not already there
            const existingIndex = recentConversations.findIndex(c => c.id === sessionInfo.id);
            if (existingIndex > -1) {
                // Update existing entry
                recentConversations[existingIndex] = {
                    ...recentConversations[existingIndex],
                    lastActive: new Date().toISOString()
                };
            } else {
                // Add new entry
                recentConversations.unshift(sessionInfo);
            }
            
            // Limit to 10 recent conversations
            recentConversations = recentConversations.slice(0, 10);
            
            // Save updated list
            localStorage.setItem('recent_conversations', JSON.stringify(recentConversations));
        } catch (error) {
            console.error('Error updating recent conversations:', error);
        }
    }
    
    function saveMessage(content, isUser, time) {
        try {
            // Get existing messages
            let messages = JSON.parse(localStorage.getItem(`chat_messages_${sessionId}`) || '[]');
            
            // Add new message
            messages.push({
                content,
                isUser,
                time,
                timestamp: new Date().toISOString()
            });
            
            // Save updated messages
            localStorage.setItem(`chat_messages_${sessionId}`, JSON.stringify(messages));
            
            // Update session last active time
            const sessionInfo = JSON.parse(localStorage.getItem(`chat_session_${sessionId}`) || '{}');
            if (sessionInfo.id) {
                sessionInfo.lastActive = new Date().toISOString();
                localStorage.setItem(`chat_session_${sessionId}`, JSON.stringify(sessionInfo));
                
                // Also update in recent conversations
                updateRecentConversations(sessionInfo);
            }
        } catch (error) {
            console.error('Error saving message:', error);
        }
    }
    
    function getSavedMessages(sessionId) {
        try {
            return JSON.parse(localStorage.getItem(`chat_messages_${sessionId}`) || '[]');
        } catch (error) {
            console.error('Error getting saved messages:', error);
            return [];
        }
    }
    
    function renderSavedMessages(messages) {
        // Group messages by date
        const messagesByDate = {};
        
        messages.forEach(msg => {
            const timestamp = new Date(msg.timestamp);
            const dateKey = timestamp.toDateString();
            
            if (!messagesByDate[dateKey]) {
                messagesByDate[dateKey] = [];
            }
            
            messagesByDate[dateKey].push(msg);
        });
        
        // Clear existing messages
        chatMessages.innerHTML = '';
        
        // Render messages by date
        Object.keys(messagesByDate).forEach(dateKey => {
            // Add date separator
            const dateElement = document.createElement('div');
            dateElement.className = 'message-date';
            dateElement.textContent = new Date(dateKey).toLocaleDateString(undefined, { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
            chatMessages.appendChild(dateElement);
            
            // Add messages for this date
            messagesByDate[dateKey].forEach(msg => {
                appendMessage(msg.content, msg.isUser ? 'user' : 'bot', msg.time);
            });
        });
        
        // Update message count
        messageCount = messages.length;
        updateMessageCount();
    }
    
    function loadRecentConversations() {
        try {
            const conversationList = document.getElementById('conversationList');
            const recentConversations = JSON.parse(localStorage.getItem('recent_conversations') || '[]');
            
            if (recentConversations.length === 0) {
                return;
            }
            
            // Clear default empty message
            conversationList.innerHTML = '';
            
            // Add each conversation
            recentConversations.forEach(conversation => {
                const conversationEl = document.createElement('div');
                conversationEl.className = 'conversation-item';
                
                // Highlight current session
                if (conversation.id === sessionId) {
                    conversationEl.classList.add('active');
                }
                
                // Parse dates
                const startDate = new Date(conversation.startTime);
                const lastActive = new Date(conversation.lastActive);
                
                // Format relative time
                const timeAgo = getRelativeTimeString(lastActive);
                
                conversationEl.innerHTML = `
                    <div class="avatar">
                        <i class="bi bi-robot"></i>
                    </div>
                    <div class="conversation-info">
                        <div class="conversation-title">${escapeHtml(conversation.chatbotName)}</div>
                        <div class="conversation-preview">${escapeHtml(conversation.department)}</div>
                    </div>
                    <div class="conversation-time">${timeAgo}</div>
                `;
                
                // Add click handler to load conversation
                conversationEl.addEventListener('click', () => {
                    if (conversation.id !== sessionId) {
                        window.location.href = `/UserChat/Chat/${conversation.id}`;
                    }
                });
                
                conversationList.appendChild(conversationEl);
            });
        } catch (error) {
            console.error('Error loading recent conversations:', error);
        }
    }
    
    function getRelativeTimeString(date) {
        const now = new Date();
        const diffMs = now - date;
        const diffSec = Math.round(diffMs / 1000);
        const diffMin = Math.round(diffSec / 60);
        const diffHour = Math.round(diffMin / 60);
        const diffDay = Math.round(diffHour / 24);
        
        if (diffSec < 60) return 'Just now';
        if (diffMin < 60) return `${diffMin}m ago`;
        if (diffHour < 24) return `${diffHour}h ago`;
        if (diffDay < 7) return `${diffDay}d ago`;
        
        return date.toLocaleDateString();
    }
    
    // UI update functions
    function updateMessageCount() {
        document.getElementById('messageCount').textContent = messageCount;
    }
    
    function startChatDurationTimer() {
        const chatDurationEl = document.getElementById('chatDuration');
        
        setInterval(() => {
            const now = new Date();
            const diffMs = now - startTime;
            const diffMin = Math.floor(diffMs / 60000);
            
            chatDurationEl.textContent = `${diffMin}m`;
        }, 60000); // Update every minute
    }
    
    function trackResponseTime(responseTime) {
        lastResponseTimes.push(parseFloat(responseTime));
        updateAverageResponseTime();
    }
    
    function updateAverageResponseTime() {
        if (lastResponseTimes.length === 0) return;
        
        const avgResponseTimeEl = document.getElementById('avgResponseTime');
        const total = lastResponseTimes.reduce((sum, time) => sum + time, 0);
        const average = total / lastResponseTimes.length;
        
        avgResponseTimeEl.textContent = `${average.toFixed(1)}s`;
    }
    
    // Action functions
    function clearChat() {
        // Confirm first
        if (!confirm('Are you sure you want to clear this chat? This cannot be undone.')) {
            return;
        }
        
        // Clear messages
        chatMessages.innerHTML = '';
        
        // Add date header back
        const dateElement = document.createElement('div');
        dateElement.className = 'message-date';
        dateElement.id = 'currentDate';
        dateElement.textContent = new Date().toLocaleDateString(undefined, { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        });
        chatMessages.appendChild(dateElement);
        
        // Clear stored messages
        localStorage.removeItem(`chat_messages_${sessionId}`);
        
        // Reset stats
        messageCount = 0;
        updateMessageCount();
        lastResponseTimes = [];
        updateAverageResponseTime();
        
        // Add welcome message back
        addWelcomeMessage();
        
        // Close dropdown
        document.getElementById('chatMenu').classList.remove('show');
    }
    
    function exportChat() {
        try {
            // Get all messages
            const messages = getSavedMessages(sessionId);
            if (messages.length === 0) {
                alert('No messages to export.');
                return;
            }
            
            // Format for export
            let exportText = `Chat with ${@Html.Raw(Json.Serialize(Model.Chatbot.Name))} - ${new Date().toLocaleDateString()}\n\n`;
            
            messages.forEach(msg => {
                const sender = msg.isUser ? 'You' : @Html.Raw(Json.Serialize(Model.Chatbot.Name));
                exportText += `[${msg.time}] ${sender}:\n${msg.content}\n\n`;
            });
            
            // Create download link
            const blob = new Blob([exportText], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `chat-${sessionId}-${new Date().toISOString().slice(0, 10)}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            // Close dropdown
            document.getElementById('chatMenu').classList.remove('show');
        } catch (error) {
            console.error('Error exporting chat:', error);
            alert('Failed to export chat. Please try again.');
        }
    }
    
    function endChat() {
        // Confirm first
        if (!confirm('Are you sure you want to end this chat and start a new one?')) {
            return;
        }
        
        window.location.href = '/UserChat';
    }
    
    // Feedback and rating
    function setupFeedbackListeners() {
        // Star rating
        const stars = document.querySelectorAll('.rating-star');
        stars.forEach(star => {
            star.addEventListener('click', function() {
                const rating = parseInt(this.getAttribute('data-rating'));
                setRating(rating);
            });
            
            star.addEventListener('mouseover', function() {
                const rating = parseInt(this.getAttribute('data-rating'));
                highlightStars(rating);
            });
        });
        
        document.getElementById('chatRating').addEventListener('mouseout', function() {
            highlightStars(currentRating);
        });
        
        // Enable submit button when feedback entered
        document.getElementById('feedbackText').addEventListener('input', function() {
            document.getElementById('submitFeedback').disabled = currentRating === 0;
        });
        
        // Submit feedback
        document.getElementById('submitFeedback').addEventListener('click', submitFeedback);
    }
    
    function setRating(rating) {
        currentRating = rating;
        highlightStars(rating);
        document.getElementById('submitFeedback').disabled = false;
    }
    
    function highlightStars(rating) {
        const stars = document.querySelectorAll('.rating-star');
        stars.forEach(star => {
            const starRating = parseInt(star.getAttribute('data-rating'));
            if (starRating <= rating) {
                star.classList.remove('bi-star');
                star.classList.add('bi-star-fill');
            } else {
                star.classList.remove('bi-star-fill');
                star.classList.add('bi-star');
            }
        });
    }
    
    function submitFeedback() {
        if (currentRating === 0 || feedbackSubmitted) return;
        
        const feedbackText = document.getElementById('feedbackText').value;
        
        // Send feedback to server
        fetch('/UserChat/SubmitChatFeedback', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: JSON.stringify({
                sessionId: sessionId,
                rating: currentRating,
                feedback: feedbackText
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                feedbackSubmitted = true;
                
                // Update UI
                const feedbackSection = document.getElementById('feedbackSection');
                feedbackSection.innerHTML = `
                    <h4 class="section-title">FEEDBACK SUBMITTED</h4>
                    <div class="feedback-thank-you">
                        <i class="bi bi-check-circle-fill"></i>
                        <p>Thank you for your feedback!</p>
                    </div>
                `;
            } else {
                alert('Failed to submit feedback. Please try again.');
            }
        })
        .catch(error => {
            console.error('Error submitting feedback:', error);
            alert('Failed to submit feedback. Please try again.');
        });
    }
    // Add to your JavaScript
function showLoadingIndicator() {
    const loadingEl = document.createElement('div');
    loadingEl.className = 'chat-loading';
    loadingEl.id = 'chatLoading';
    loadingEl.innerHTML = `
        <div class="loading-spinner"></div>
        <span>Connecting to AI...</span>
    `;
    document.body.appendChild(loadingEl);
}

function hideLoadingIndicator() {
    const loadingEl = document.getElementById('chatLoading');
    if (loadingEl) {
        loadingEl.remove();
    }
}

// Then update your sendMessage function to use these
// At the beginning of API call:
showLoadingIndicator();

// In both success and error handlers:
hideLoadingIndicator();
</script>
}

@section Styles {
<style>
    /* Chat Container Styles */
    .chat-container {
        display: grid;
        grid-template-columns: 280px 1fr 300px;
        height: calc(100vh - 70px);
        min-height: 600px;
        background-color: var(--color-gray-100);
        border-radius: 12px;
        overflow: hidden;
        box-shadow: var(--shadow);
        transition: all 0.3s ease;
        position: relative;
    }
    
    /* Sidebar Styles */
    .chat-sidebar {
        background-color: white;
        border-right: 1px solid var(--color-gray-200);
        display: flex;
        flex-direction: column;
        transition: all 0.3s ease;
        z-index: 20;
        overflow-y: auto;
    }
    
    .sidebar-header {
        padding: 16px;
        border-bottom: 1px solid var(--color-gray-200);
        display: flex;
        align-items: center;
        justify-content: space-between;
        position: sticky;
        top: 0;
        background: white;
        z-index: 2;
    }
    
    .app-logo {
        display: flex;
        align-items: center;
        gap: 10px;
        font-weight: 600;
        color: var(--color-primary);
    }
    
    .app-logo i {
        font-size: 20px;
    }
    
    .conversation-list {
        flex: 1;
        overflow-y: auto;
        padding: 12px;
    }
    
    .empty-conversations-msg {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px;
        color: var(--color-gray-500);
        text-align: center;
    }
    
    .empty-conversations-msg i {
        font-size: 40px;
        margin-bottom: 10px;
        opacity: 0.5;
    }
    
    .conversation-item {
        display: flex;
        align-items: center;
        padding: 12px;
        border-radius: 10px;
        cursor: pointer;
        margin-bottom: 6px;
        transition: all 0.2s ease;
        position: relative;
    }
    
    .conversation-item:hover {
        background-color: var(--color-gray-100);
    }
    
    .conversation-item.active {
        background-color: var(--color-primary-light);
    }
    
    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: var(--color-primary-light);
        color: var(--color-primary);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 12px;
    }
    
    .conversation-info {
        flex: 1;
        min-width: 0;
    }
    
    .conversation-title {
        font-weight: 600;
        margin-bottom: 4px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .conversation-preview {
        font-size: 12px;
        color: var(--color-gray-500);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .conversation-time {
        font-size: 11px;
        color: var(--color-gray-500);
        white-space: nowrap;
        margin-left: 8px;
    }
    
    .sidebar-footer {
        border-top: 1px solid var(--color-gray-200);
        padding: 16px;
        position: sticky;
        bottom: 0;
        background: white;
        z-index: 2;
    }
    
    .btn-new-chat {
        width: 100%;
        padding: 10px;
        background-color: var(--color-primary);
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
    }
    
    .btn-new-chat:hover {
        background-color: var(--color-primary-dark);
        text-decoration: none;
        color: white;
    }
    
    /* Main Chat Area */
    .chat-main {
        display: flex;
        flex-direction: column;
        background-color: var(--color-gray-50);
        overflow: hidden;
    }
    
    .chat-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 12px 16px;
        height: 64px;
        border-bottom: 1px solid var(--color-gray-200);
        background-color: white;
        z-index: 10;
    }
    
    .mobile-toggle {
        display: none;
        margin-right: 8px;
    }
    
    .chat-header-info {
        display: flex;
        align-items: center;
    }
    
    .bot-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: var(--color-primary-light);
        color: var(--color-primary);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 12px;
    }
    
    .bot-name {
        font-weight: 600;
        margin-bottom: 4px;
    }
    
    .bot-status {
        display: flex;
        align-items: center;
        font-size: 12px;
        color: var(--color-gray-500);
    }
    
    .status-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 6px;
    }
    
    .status-indicator.online {
        background-color: var(--color-success);
    }
    
    .chat-header-actions {
        display: flex;
        gap: 8px;
        align-items: center;
    }
    
    .btn-icon {
        width: 36px;
        height: 36px;
        border-radius: 8px;
        background: none;
        border: none;
        color: var(--color-gray-600);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .btn-icon:hover {
        background-color: var(--color-gray-100);
        color: var(--color-gray-900);
    }
    
    .header-dropdown {
        position: relative;
    }
    
    .dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: white;
        border-radius: 8px;
        box-shadow: var(--shadow-lg);
        width: 180px;
        z-index: 30;
        overflow: hidden;
        display: none;
    }
    
    .dropdown-menu.show {
        display: block;
    }
    
    .dropdown-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 12px;
        color: var(--color-gray-700);
        text-decoration: none;
        transition: all 0.2s ease;
    }
    
    .dropdown-item:hover {
        background-color: var(--color-gray-100);
    }
    
    .dropdown-item i {
        font-size: 16px;
        color: var(--color-gray-600);
    }
    
    /* Chat Messages */
    .chat-messages {
        flex: 1;
        padding: 16px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 16px;
        scroll-behavior: smooth;
    }
    
    .message-date {
        text-align: center;
        font-size: 12px;
        color: var(--color-gray-500);
        margin: 8px 0;
        position: relative;
    }
    
    .message-date::before,
    .message-date::after {
        content: '';
        position: absolute;
        top: 50%;
        width: 30%;
        height: 1px;
        background-color: var(--color-gray-300);
    }
    
    .message-date::before {
        left: 10%;
    }
    
    .message-date::after {
        right: 10%;
    }
    
    .message {
        display: flex;
        max-width: 85%;
        position: relative;
        animation-duration: 0.3s;
        animation-fill-mode: forwards;
    }
    
    .message.user {
        align-self: flex-end;
        flex-direction: row-reverse;
        animation-name: slideInFromRight;
    }
    
    .message.bot {
        align-self: flex-start;
        animation-name: slideInFromLeft;
    }
    
    @@keyframes slideInFromLeft {
        from { transform: translateX(-20px); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @@keyframes slideInFromRight {
        from { transform: translateX(20px); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    .message-avatar {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: var(--color-primary-light);
        color: var(--color-primary);
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 12px;
        flex-shrink: 0;
    }
    
    .message-content {
        position: relative;
    }
    
    .message-bubble {
        padding: 12px 16px;
        border-radius: 18px;
        background-color: white;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        margin-bottom: 4px;
        position: relative;
    }
    
    .message.user .message-bubble {
        background-color: var(--color-primary);
        color: white;
        border-bottom-right-radius: 4px;
    }
    
    .message.bot .message-bubble {
        background-color: white;
        border-bottom-left-radius: 4px;
    }
    
    .message-bubble p {
        margin: 0;
        line-height: 1.5;
    }
    
    .message-time {
        font-size: 11px;
        color: var(--color-gray-500);
        margin-top: 4px;
    }
    
    .message.user .message-time {
        text-align: right;
        color: var(--color-gray-400);
    }
    
    .message-actions {
        position: absolute;
        top: -8px;
        right: 0;
        background-color: white;
        border-radius: 6px;
        display: flex;
        opacity: 0;
        transition: opacity 0.2s ease;
        box-shadow: var(--shadow-md);
        overflow: hidden;
    }
    
    .message:hover .message-actions {
        opacity: 1;
    }
    
    .action-btn {
        padding: 6px 8px;
        background: none;
        border: none;
        color: var(--color-gray-600);
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .action-btn:hover {
        background-color: var(--color-gray-100);
        color: var(--color-gray-900);
    }
    
    /* Typing Indicator */
    .typing-indicator {
        display: flex;
        gap: 4px;
        padding: 6px 0;
    }
    
    .typing-indicator span {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: var(--color-gray-400);
        animation: typingAnimation 1.4s infinite ease-in-out;
    }
    
    .typing-indicator span:nth-child(1) { animation-delay: 0s; }
    .typing-indicator span:nth-child(2) { animation-delay: 0.2s; }
    .typing-indicator span:nth-child(3) { animation-delay: 0.4s; }
    
    @@keyframes typingAnimation {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
    }
    
    /* Chat Input */
    .chat-input-container {
        display: flex;
        align-items: center;
        padding: 12px 16px;
        border-top: 1px solid var(--color-gray-200);
        background-color: white;
        gap: 8px;
    }
    
    .input-actions {
        display: flex;
        align-items: center;
    }
    
    .input-action-btn {
        background: none;
        border: none;
        color: var(--color-gray-600);
        font-size: 20px;
        cursor: pointer;
        padding: 8px;
        border-radius: 8px;
        transition: all 0.2s ease;
    }
    
    .input-action-btn:hover {
        background-color: var(--color-gray-100);
        color: var(--color-gray-900);
    }
    
    .input-wrapper {
        flex: 1;
        position: relative;
        display: flex;
        align-items: center;
        background-color: var(--color-gray-100);
        border-radius: 24px;
        padding: 8px 12px;
        transition: all 0.2s ease;
    }
    
    .input-wrapper:focus-within {
        background-color: white;
        box-shadow: 0 0 0 2px var(--color-primary-light);
    }
    
    #messageInput {
        flex: 1;
        border: none;
        background: transparent;
        padding: 8px;
        font-size: 14px;
        outline: none;
        resize: none;
        max-height: 120px;
        overflow-y: auto;
        line-height: 1.5;
    }
    
    .voice-input-btn {
        background: none;
        border: none;
        color: var(--color-gray-600);
        cursor: pointer;
        padding: 4px;
        transition: all 0.2s ease;
    }
    
    .voice-input-btn:hover {
        color: var(--color-gray-900);
    }
    
    .send-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: var(--color-primary);
        color: white;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .send-btn:hover:not(:disabled) {
        background-color: var(--color-primary-dark);
    }
    
    .send-btn:disabled {
        background-color: var(--color-gray-300);
        cursor: not-allowed;
    }
    
    /* Info Panel */
    .chat-info {
        background-color: white;
        border-left: 1px solid var(--color-gray-200);
        display: flex;
        flex-direction: column;
        transition: all 0.3s ease;
        z-index: 20;
        overflow-y: auto;
    }
    
    .info-header {
        padding: 16px;
        border-bottom: 1px solid var(--color-gray-200);
        display: flex;
        align-items: center;
        justify-content: space-between;
        position: sticky;
        top: 0;
        background: white;
        z-index: 2;
    }
    
    .info-header h3 {
        margin: 0;
        font-size: 16px;
        font-weight: 600;
    }
    
    .info-close {
        display: none;
    }
    
    .info-section {
        padding: 16px;
        border-bottom: 1px solid var(--color-gray-200);
    }
    
    .section-title {
        font-size: 12px;
        font-weight: 600;
        color: var(--color-gray-500);
        margin-bottom: 16px;
        letter-spacing: 0.5px;
    }
    
    .assistant-info {
        display: flex;
        align-items: center;
    }
    
    .assistant-avatar {
        width: 48px;
        height: 48px;
        border-radius: 8px;
        background-color: var(--color-primary-light);
        color: var(--color-primary);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 16px;
        font-size: 20px;
    }
    
    .assistant-name {
        font-weight: 600;
        margin-bottom: 4px;
    }
    
    .assistant-department {
        font-size: 12px;
        color: var(--color-gray-500);
        margin-bottom: 4px;
    }
    
    .assistant-model {
        display: inline-block;
        font-size: 12px;
        background-color: var(--color-gray-100);
        color: var(--color-gray-600);
        padding: 2px 8px;
        border-radius: 50px;
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 8px;
        text-align: center;
    }
    
    .stat-item {
        background-color: var(--color-gray-100);
        padding: 12px 8px;
        border-radius: 8px;
    }
    
    .stat-value {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 4px;
    }
    
    .stat-label {
        font-size: 12px;
        color: var(--color-gray-500);
    }
    
    /* Feedback Section */
    .feedback-container {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }
    
    .star-rating {
        display: flex;
        justify-content: center;
        gap: 8px;
        font-size: 24px;
        color: var(--color-gray-300);
    }
    
    .rating-star {
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .star-rating:hover .rating-star {
        color: #ffc107;
    }
    
    .rating-star:hover ~ .rating-star {
        color: var(--color-gray-300);
    }
    
    .bi-star-fill {
        color: #ffc107 !important;
    }
    
    .feedback-input-container {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }
    
    #feedbackText {
        padding: 12px;
        border-radius: 8px;
        border: 1px solid var(--color-gray-300);
        resize: none;
        font-size: 14px;
        min-height: 80px;
    }
    
    #feedbackText:focus {
        outline: none;
        border-color: var(--color-primary);
        box-shadow: 0 0 0 2px var(--color-primary-light);
    }
    
    .feedback-thank-you {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }
    
    .feedback-thank-you i {
        font-size: 48px;
        color: var(--color-success);
        margin-bottom: 12px;
    }
    
    .feedback-thank-you p {
        margin: 0;
        font-weight: 500;
    }
    
    /* Responsive Adjustments */
    @@media (max-width: 1200px) {
        .chat-container {
            grid-template-columns: 280px 1fr 0;
        }
        
        .chat-info {
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            width: 300px;
            transform: translateX(100%);
            box-shadow: var(--shadow-lg);
        }
        
        .chat-info.show {
            transform: translateX(0);
        }
        
        .info-close {
            display: block;
        }
    }
    
    @@media (max-width: 768px) {
        .chat-container {
            grid-template-columns: 0 1fr 0;
        }
        
        .chat-sidebar {
            position: fixed;
            top: 0;
            left: 0;
            bottom: 0;
            width: 280px;
            transform: translateX(-100%);
            box-shadow: var(--shadow-lg);
        }
        
        .chat-sidebar.show {
            transform: translateX(0);
        }
        
        .mobile-toggle {
            display: block;
        }
    }
    /* Feedback buttons */
.message-feedback {
    display: flex;
    gap: 8px;
    margin-top: 6px;
    opacity: 0;
    transition: opacity 0.2s ease;
}

.message:hover .message-feedback {
    opacity: 1;
}

.feedback-btn {
    background: none;
    border: none;
    color: var(--color-gray-500);
    font-size: 12px;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: all 0.2s ease;
}

.feedback-btn:hover {
    background-color: var(--color-gray-100);
    color: var(--color-gray-700);
}

.feedback-thanks {
    font-size: 12px;
    color: var(--color-success);
    font-style: italic;
}

/* Connection status */
.connection-status {
    display: flex;
    align-items: center;
    font-size: 12px;
    gap: 4px;
}

.connection-status.connected {
    color: var(--color-success);
}

.connection-status.disconnected {
    color: var(--color-danger);
}

.reconnect-button {
    background-color: var(--color-gray-100);
    border: none;
    border-radius: 4px;
    padding: 4px 8px;
    font-size: 12px;
    margin-left: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 4px;
}

.reconnect-button:hover {
    background-color: var(--color-gray-200);
}
/* Add to your CSS section */
.chat-loading {
    position: fixed;
    bottom: 24px;
    right: 24px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 8px;
    padding: 12px 16px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 8px;
    z-index: 1000;
    font-size: 14px;
}

.loading-spinner {
    width: 18px;
    height: 18px;
    border: 2px solid var(--color-primary);
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 0.8s linear infinite;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}
</style>
}