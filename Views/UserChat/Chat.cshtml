@Html.AntiForgeryToken()
@model AIHelpdeskSupport.ViewModels.UserChatViewModel
@{
    ViewData["Title"] = "Chat Support";
    bool isContinuingConversation = !string.IsNullOrEmpty(Model.SessionId);
    string sessionId = Model.SessionId;
    
    // Parse the localized names JSON if available
    var localizedNames = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(Model.Chatbot?.LocalizedNamesJson))
    {
        try
        {
            localizedNames = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(Model.Chatbot.LocalizedNamesJson);
        }
        catch { /* Use empty dictionary if parsing fails */ }
    }
}

<div class="chat-container">
    <!-- Chat sidebar -->
    <div class="chat-sidebar" id="chatSidebar">
        <div class="sidebar-header">
            <div class="logo-container">
                <div class="app-logo">
                    <i class="bi bi-robot"></i>
                    <span>AI Helpdesk</span>
                </div>
            </div>
            <button id="sidebarToggle" class="btn-icon sidebar-toggle">
                <i class="bi bi-chevron-left"></i>
            </button>
        </div>

        <div class="conversation-list" id="conversationList">
            <!-- Recent conversations will be loaded here -->
            <div class="empty-conversations-msg">
                <i class="bi bi-chat-square-text"></i>
                <p>Start a new conversation</p>
            </div>
        </div>
        
        <div class="sidebar-footer">
            <a href="/UserChat" class="btn-new-chat">
                <i class="bi bi-plus-circle"></i>
                <span>New Conversation</span>
            </a>
        </div>
    </div>

    <!-- Main chat area -->
    <div class="chat-main">
        <!-- Chat header -->
        <div class="chat-header">
            <div class="mobile-toggle" id="mobileSidebarToggle">
                <i class="bi bi-list"></i>
            </div>
            <div class="chat-header-info">
                <div class="bot-icon"><i class="bi bi-robot"></i></div>
                <div class="bot-details">
                    <div class="bot-name" id="chatbotNameDisplay">@Model.Chatbot.Name</div>
                    <div class="bot-status">
                        <span class="status-indicator online"></span>
                        <span>@Model.Chatbot.Department</span>
                    </div>
                </div>
            </div>
            <div class="chat-header-actions">
                <div class="language-selector">
                    <select id="languageSelect" class="language-select">
                        <option value="en">English</option>
                        <option value="th">ไทย</option>
                        <option value="ja">日本語</option>
                    </select>
                </div>
                <button class="btn-icon" id="infoToggle" title="Toggle Info Panel">
                    <i class="bi bi-info-circle"></i>
                </button>
                <div class="header-dropdown">
                    <button class="btn-icon" id="chatMenuBtn" title="Chat Menu">
                        <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <div class="dropdown-menu" id="chatMenu">
                        <a href="#" class="dropdown-item" id="exportChat">
                            <i class="bi bi-arrow-90deg-up"></i> Export Chat
                        </a>
                        <a href="#" class="dropdown-item" id="clearChat">
                            <i class="bi bi-trash"></i> Clear Chat
                        </a>
                        <a href="#" class="dropdown-item" id="endChat">
                            <i class="bi bi-x-circle"></i> End Chat
                        </a>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Chat messages container -->
        <div class="chat-messages" id="chatMessages">
            <!-- Welcome message -->
            <div class="message-date" id="currentDate">
                @DateTime.Now.ToString("MMMM d, yyyy")
            </div>
            
            <!-- Display existing messages -->
            @foreach (var message in Model.Messages)
            {
                <div class="message @(message.IsUser ? "user" : "bot")">
                    @if (!message.IsUser)
                    {
                        <div class="message-avatar">
                            <i class="bi bi-robot"></i>
                        </div>
                    }
                    <div class="message-content">
                        <div class="message-bubble">
                            <p>@Html.Raw(message.Content)</p>
                        </div>
                        <div class="message-time">@message.Timestamp.ToLocalTime().ToString("h:mm tt")</div>
                        @if (!message.IsUser)
                        {
                            <div class="message-actions">
                                <button class="action-btn" title="Copy to clipboard" onclick="copyToClipboard(this)">
                                    <i class="bi bi-clipboard"></i>
                                </button>
                                <button class="action-btn" title="Rate response">
                                    <i class="bi bi-hand-thumbs-up"></i>
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        
        <!-- Chat input area -->
        <div class="chat-input-container">
            <input type="hidden" id="sessionId" value="@Model.SessionId">
            <input type="hidden" id="chatbotId" value="@Model.Chatbot.Id">
            <input type="hidden" id="flowiseId" value="@Model.FlowiseId">
            
            <div class="input-actions">
                <button class="input-action-btn" title="Add attachment" id="attachmentBtn">
                    <i class="bi bi-paperclip"></i>
                </button>
            </div>
            
            <div class="input-wrapper">
                <textarea id="messageInput" placeholder="Type your message..." rows="1"></textarea>
                <button class="voice-input-btn" title="Voice input" id="voiceBtn">
                    <i class="bi bi-mic"></i>
                </button>
            </div>
            
            <button class="send-btn" id="sendMessage" disabled>
                <i class="bi bi-send"></i>
            </button>
        </div>
        
        <!-- Session information footer -->
        <div class="session-footer" id="chatDetails">
            <div class="session-item">
                <span class="session-label">Session:</span>
                <span id="sessionIdDisplay" class="session-value">@Model.SessionId</span>
            </div>
            <div class="session-item">
                <span class="session-label">Response time:</span>
                <span id="responseTime" class="session-value">-</span>
            </div>
        </div>
    </div>
    
    <!-- Info panel -->
    <div class="chat-info" id="chatInfo">
        <div class="info-header">
            <h3>Conversation Details</h3>
            <button class="btn-icon info-close" id="infoClose">
                <i class="bi bi-x"></i>
            </button>
        </div>
        
        <div class="info-section">
            <h4 class="section-title">AI ASSISTANT</h4>
            <div class="assistant-info">
                <div class="assistant-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="assistant-details">
                    <div class="assistant-name">@Model.Chatbot.Name</div>
                    <div class="assistant-department">@Model.Chatbot.Department</div>
                    <div class="assistant-model">@Model.Chatbot.AiModel</div>
                </div>
            </div>
            
            <!-- Chatbot capabilities section -->
            <div class="assistant-capabilities">
                <div class="capability-item">
                    <div class="capability-icon">
                        <i class="bi bi-translate"></i>
                    </div>
                    <div class="capability-text">Multilingual</div>
                </div>
                <div class="capability-item">
                    <div class="capability-icon">
                        <i class="bi bi-cpu"></i>
                    </div>
                    <div class="capability-text">Flowise ID: @(String.IsNullOrEmpty(Model.FlowiseId) ? "Not configured" : Model.FlowiseId.Substring(0, Math.Min(8, Model.FlowiseId.Length)) + "...")</div>
                </div>
                <div class="capability-item">
                    <div class="capability-icon">
                        <i class="bi bi-card-text"></i>
                    </div>
                    <div class="capability-text">@(String.IsNullOrEmpty(Model.Chatbot.Description) ? "General assistance" : Model.Chatbot.Description)</div>
                </div>
            </div>
        </div>
            
        <div class="info-section">
            <h4 class="section-title">CONVERSATION STATS</h4>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value" id="messageCount">@Model.Messages.Count</div>
                    <div class="stat-label">Messages</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="avgResponseTime">0.0s</div>
                    <div class="stat-label">Avg. Response</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="maxResponseTime">0.0s</div>
                    <div class="stat-label">Max Response</div>
                </div>
            </div>
        </div>
        
        <div class="info-section" id="feedbackSection">
            <h4 class="section-title">RATE CONVERSATION</h4>
            <div class="feedback-container">
                <div class="star-rating" id="chatRating">
                    <i class="bi bi-star rating-star" data-rating="1"></i>
                    <i class="bi bi-star rating-star" data-rating="2"></i>
                    <i class="bi bi-star rating-star" data-rating="3"></i>
                    <i class="bi bi-star rating-star" data-rating="4"></i>
                    <i class="bi bi-star rating-star" data-rating="5"></i>
                </div>
                <div class="feedback-input-container">
                    <textarea id="feedbackText" placeholder="Share your feedback (optional)..." rows="3"></textarea>
                    <button id="submitFeedback" class="btn btn-primary" disabled>Submit Feedback</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Global variables
        let sessionId = "@Model.SessionId";
        let chatbotId = @Model.Chatbot.Id;
        let flowiseId = "@Model.FlowiseId";
        let isConnected = true;
        let userScrolled = false;
        let isScrolledToBottom = true;
        let messageCount = @Model.Messages.Count;
        let lastMessageTime = new Date();
        let startTime = new Date();
        let lastResponseTimes = [];
        let currentRating = 0;
        let feedbackSubmitted = false;
        let currentLanguage = 'en';
        
        // Localized chatbot names
        const chatbotNames = {
            en: "@Html.Raw(Model.Chatbot.Name)", // Default English name
            th: "@Html.Raw(localizedNames.ContainsKey("th") ? localizedNames["th"] : Model.Chatbot.Name)",
            ja: "@Html.Raw(localizedNames.ContainsKey("ja") ? localizedNames["ja"] : Model.Chatbot.Name)"
        };
        
        // Welcome messages in different languages
        const welcomeMessages = {
            en: `Hello! I'm the ${chatbotNames.en} assistant. How can I help you today?`,
            th: `สวัสดีครับ/ค่ะ! ฉัน ${chatbotNames.th} ผู้ช่วยของคุณ มีอะไรให้ช่วยไหมครับ/คะ?`,
            ja: `こんにちは！私は${chatbotNames.ja}アシスタントです。今日はどのようにお手伝いできますか？`
        };
        
        // Input placeholder texts in different languages
        const placeholders = {
            en: "Type your message here...",
            th: "พิมพ์ข้อความของคุณที่นี่...",
            ja: "メッセージを入力してください..."
        };
        
        // Cache key DOM elements
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendMessage');
        const chatInfo = document.getElementById('chatInfo');
        const sidebar = document.getElementById('chatSidebar');

        // Initialize when document is ready
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Initializing chat interface...");
            console.log("Session ID:", sessionId);
            console.log("Chatbot ID:", chatbotId);
            console.log("Flowise ID:", flowiseId);
            
            // Set up event listeners
            setupEventListeners();
            
            // Load recent conversations
            loadRecentConversations();
            
            // Set initial message count
            updateMessageCount();
            
            // Focus input field
            messageInput.focus();
            
            // Scroll to bottom of chat
            scrollToBottom();
        });
        
        function setupEventListeners() {
            // Send message on button click
            sendButton.addEventListener('click', sendMessage);
            
            // Send message on Enter key (not Shift+Enter)
            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (!sendButton.disabled) {
                        sendMessage();
                    }
                }
            });
            
            // Auto-resize textarea as user types
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
                sendButton.disabled = this.value.trim() === '';
            });
            
            // Menu toggles
            document.getElementById('chatMenuBtn').addEventListener('click', function(e) {
                e.stopPropagation();
                document.getElementById('chatMenu').classList.toggle('show');
            });
            
            document.getElementById('infoToggle').addEventListener('click', function() {
                chatInfo.classList.toggle('show');
            });
            
            document.getElementById('infoClose').addEventListener('click', function() {
                chatInfo.classList.remove('show');
            });
            
            document.getElementById('sidebarToggle').addEventListener('click', function() {
                sidebar.classList.toggle('collapsed');
                this.querySelector('i').classList.toggle('bi-chevron-left');
                this.querySelector('i').classList.toggle('bi-chevron-right');
            });
            
            document.getElementById('mobileSidebarToggle').addEventListener('click', function() {
                sidebar.classList.toggle('show');
            });
            
            // Language selector event listener
            document.getElementById('languageSelect').addEventListener('change', function() {
                currentLanguage = this.value;
                updateLanguage();
            });
            
            // Chat actions
            document.getElementById('clearChat').addEventListener('click', clearChat);
            document.getElementById('exportChat').addEventListener('click', exportChat);
            document.getElementById('endChat').addEventListener('click', endChat);
            
            // Feedback and rating
            setupFeedbackListeners();
            
            // Close dropdown on click outside
            document.addEventListener('click', function() {
                document.getElementById('chatMenu').classList.remove('show');
            });
            
            // Handle scroll events
            chatMessages.addEventListener('scroll', function() {
                userScrolled = true;
                checkScrollPosition();
            });
            
            // Add wheel event listener for precise mouse wheel detection
            chatMessages.addEventListener('wheel', function(e) {
                if (e.deltaY < 0) { // Scrolling up
                    userScrolled = true;
                } else if (isScrolledToBottom) { // Scrolling down and already at bottom
                    userScrolled = false;
                }
                // Small delay to check position after scrolling
                setTimeout(checkScrollPosition, 50);
            });
        }
        
        function updateLanguage() {
            // Update placeholder
            messageInput.placeholder = placeholders[currentLanguage] || placeholders['en'];
            
            // Update chatbot name display
            document.getElementById('chatbotNameDisplay').textContent = chatbotNames[currentLanguage] || chatbotNames['en'];
        }
        
        async function sendMessage() {
            // Get message text
            const message = messageInput.value.trim();
            if (!message) {
                // Provide visual feedback for empty message
                messageInput.classList.add('shake-animation');
                setTimeout(() => messageInput.classList.remove('shake-animation'), 500);
                return;
            }
            
            // Get CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!token) {
                console.error('CSRF token not found');
                showErrorMessage('Security token missing. Please refresh the page.');
                return;
            }
            const csrfToken = token.value;
            
            // Get current time
            const now = new Date();
            const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            lastMessageTime = now;
            
            // Add user message to chat
            appendMessage(message, 'user', timeString);
            
            // Clear input and reset height
            messageInput.value = '';
            messageInput.style.height = 'auto';
            sendButton.disabled = true;
            
            // Scroll to bottom
            scrollToBottom();
            
            // Show typing indicator
            showTypingIndicator();
            
            // Start timing for response
            const startTime = performance.now();
            
            try {
                let response;
                
                // Try direct Flowise API call if flowiseId is available
                if (flowiseId && flowiseId.length > 5) {
                    console.log('Using direct Flowise API call with ID:', flowiseId);
                    try {
                        // Direct call to Flowise API (similar to Test.cshtml)
                        const flowiseResponse = await callFlowiseAPI(message);
                        response = {
                            success: true,
                            response: flowiseResponse,
                            timestamp: new Date().toISOString()
                        };
                    } catch (flowiseError) {
                        console.error('Flowise API call failed, falling back to server endpoint:', flowiseError);
                        // Fall back to server endpoint
                        const serverResponse = await fetch('/UserChat/SendMessageInSession', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': csrfToken
                            },
                            body: JSON.stringify({
                                sessionId: sessionId,
                                message: message,
                                language: currentLanguage
                            })
                        });
                        
                        if (!serverResponse.ok) {
                            throw new Error('Server response was not ok: ' + serverResponse.status);
                        }
                        
                        response = await serverResponse.json();
                    }
                } else {
                    console.log('Using server endpoint');
                    // Call through server endpoint
                    const serverResponse = await fetch('/UserChat/SendMessageInSession', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': csrfToken
                        },
                        body: JSON.stringify({
                            sessionId: sessionId,
                            message: message,
                            language: currentLanguage
                        })
                    });
                    
                    if (!serverResponse.ok) {
                        throw new Error('Network response was not ok: ' + serverResponse.status);
                    }
                    
                    response = await serverResponse.json();
                }
                
                console.log('Message response:', response);
                
                if (response.success) {
                    // Calculate response time
                    const endTime = performance.now();
                    const responseTime = ((endTime - startTime) / 1000).toFixed(2);
                    trackResponseTime(responseTime);
                    
                    // Update response time display
                    document.getElementById('responseTime').textContent = responseTime + 's';
                    
                    // Remove typing indicator
                    removeTypingIndicator();
                    
                    // Add bot response to chat - Don't modify HTML content from server
                    const botTime = new Date(response.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                    
                    // Use the response directly without additional processing if it contains HTML
                    appendMessage(response.response, 'bot', botTime);
                    
                    // Update UI
                    messageCount += 2; // User message + bot response
                    updateMessageCount();
                    updateAverageResponseTime();
                    
                    // Scroll to bottom
                    scrollToBottom();
                } else {
                    throw new Error(response.message || 'Unknown error');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                
                // Remove typing indicator
                removeTypingIndicator();
                
                // Show error message
                const errorMessage = "Sorry, I'm having trouble connecting to the server. Please try again later.";
                const errorTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                appendMessage(errorMessage, 'bot', errorTime);
                
                // Update UI
                messageCount += 2; // User message + error message
                updateMessageCount();
            } finally {
                // Re-enable input
                sendButton.disabled = false;
                messageInput.focus();
            }
        }
        
        // NEW: Direct API call to Flowise (similar to Test.cshtml)
        async function callFlowiseAPI(message) {
            try {
                // Build the Flowise API URL using the flowiseId
                // Use default URL format if needed, adjustable to your actual API URL structure
                const FLOWISE_API_URL = `http://localhost:3000/api/v1/prediction/${flowiseId}`;
                // Add your API key if necessary
                const FLOWISE_API_KEY = "0DE04hQaVt8RqxvR_rMigpeFm7n7twJq7TRlKJB4MqY";
                
                console.log("Calling Flowise API at:", FLOWISE_API_URL);
                
                const response = await fetch(FLOWISE_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': FLOWISE_API_KEY ? `Bearer ${FLOWISE_API_KEY}` : '',
                        'x-api-key': FLOWISE_API_KEY || ''
                    },
                    body: JSON.stringify({
                        question: message,
                        sessionId: sessionId,
                        overrideConfig: {
                            language: currentLanguage,
                            botName: chatbotNames[currentLanguage]
                        }
                    })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`API error: ${response.status} - ${errorText}`);
                }

                const data = await response.json();
                console.log("Flowise API response:", data);
                
                if (typeof data === 'object' && data !== null) {
                    if (data.text !== undefined) {
                        return data.text;
                    }
                    return JSON.stringify(data);
                }
                
                return data || "No response received";
            } catch (error) {
                console.error('Flowise API call failed:', error);
                throw error;
            }
        }
        
        function appendMessage(text, sender, time) {
            const messageEl = document.createElement('div');
            messageEl.className = `message ${sender}`;
            
            let messageContent = '';
            
            // Format the message text - Now properly handles HTML
            const formattedText = formatMessageText(text);
            
            if (sender === 'bot') {
                messageContent = `
                    <div class="message-avatar">
                        <i class="bi bi-robot"></i>
                    </div>
                    <div class="message-content">
                        <div class="message-bubble">
                            <p>${formattedText}</p>
                        </div>
                        <div class="message-time">${time}</div>
                        <div class="message-actions">
                            <button class="action-btn" title="Copy to clipboard" onclick="copyToClipboard(this)">
                                <i class="bi bi-clipboard"></i>
                            </button>
                            <button class="action-btn" title="Rate response">
                                <i class="bi bi-hand-thumbs-up"></i>
                            </button>
                        </div>
                    </div>
                `;
            } else {
                messageContent = `
                    <div class="message-content">
                        <div class="message-bubble">
                            <p>${formattedText}</p>
                        </div>
                        <div class="message-time">${time}</div>
                    </div>
                `;
            }
            
            messageEl.innerHTML = messageContent;
            chatMessages.appendChild(messageEl);
        }
        
        function showTypingIndicator() {
            const typingEl = document.createElement('div');
            typingEl.className = 'message bot typing-indicator';
            typingEl.id = 'typingIndicator';
            
            typingEl.innerHTML = `
                <div class="message-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="message-content">
                    <div class="typing-indicator">
                        <span></span><span></span><span></span>
                    </div>
                </div>
            `;
            
            chatMessages.appendChild(typingEl);
            scrollToBottom();
        }
        
        function removeTypingIndicator() {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }
        
        function scrollToBottom() {
            if (!userScrolled || isScrolledToBottom) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }
        
        function checkScrollPosition() {
            const scrollPosition = chatMessages.scrollTop + chatMessages.clientHeight;
            isScrolledToBottom = scrollPosition >= chatMessages.scrollHeight - 30; // 30px threshold
            
            if (isScrolledToBottom) {
                userScrolled = false;
            }
        }
        
        // Message formatting and processing
        function formatMessageText(text) {
            if (!text) return '';
            
            // Handle objects if any
            if (typeof text === 'object') {
                try {
                    text = JSON.stringify(text);
                } catch (e) {
                    text = String(text);
                }
            }
            
            // Check if the text is already HTML content
            // If it contains HTML tags like <p>, <div>, etc., don't escape it
            if (/<\/?[a-z][\s\S]*>/i.test(text)) {
                return text; // Return as-is if it's HTML
            }
            
            // Escape HTML
            text = escapeHtml(text);
            
            // Handle links
            text = text.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank">$1</a>');
            
            // Handle newlines
            text = text.replace(/\n/g, '<br>');
            
            return text;
        }
        
        function escapeHtml(text) {
            if (!text) return '';
            
            return String(text)
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;');
        }
        
        // Copy message to clipboard
        window.copyToClipboard = function(button) {
            const messageBubble = button.closest('.message-content').querySelector('.message-bubble p');
            // Use innerText to get the rendered text rather than HTML
            const text = messageBubble.innerText || messageBubble.textContent;
            
            navigator.clipboard.writeText(text).then(() => {
                // Visual feedback
                const originalIcon = button.innerHTML;
                button.innerHTML = '<i class="bi bi-check"></i>';
                setTimeout(() => {
                    button.innerHTML = originalIcon;
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy text: ', err);
                showErrorMessage('Failed to copy text to clipboard');
            });
        }
        
        async function loadRecentConversations() {
            try {
                // Show loading indicator
                const conversationList = document.getElementById('conversationList');
                conversationList.innerHTML = '<div class="loading-indicator">Loading conversations...</div>';
                
                const response = await fetch('/UserChat/GetChatHistory');
                
                // Log response for debugging
                console.log('Chat history response status:', response.status);
                
                if (!response.ok) {
                    throw new Error(`Failed to load chat history: ${response.status}`);
                }
                
                const conversations = await response.json();
                console.log('Received conversations:', conversations);
                
                // Clear and rebuild the conversation list
                conversationList.innerHTML = '';
                
                if (conversations && conversations.length > 0) {
                    // Add each conversation
                    conversations.forEach(conv => {
                        // Create conversation item
                        const conversationEl = document.createElement('div');
                        conversationEl.className = 'conversation-item';
                        
                        // Highlight current session
                        if (conv.sessionId === sessionId) {
                            conversationEl.classList.add('active');
                        }
                        
                        // Format relative time
                        let timeAgo;
                        try {
                            const startDate = new Date(conv.startTime);
                            timeAgo = getRelativeTimeString(startDate);
                        } catch (err) {
                            console.error('Time parsing error:', err);
                            timeAgo = 'Unknown time';
                        }
                        
                        // Safely escape HTML content
                        const chatbotName = escapeHtml(conv.chatbotName || 'Unknown Bot');
                        const department = escapeHtml(conv.department || 'General');
                        
                        conversationEl.innerHTML = `
                            <div class="avatar">
                                <i class="bi bi-robot"></i>
                            </div>
                            <div class="conversation-info">
                                <div class="conversation-title">${chatbotName}</div>
                                <div class="conversation-preview">${department}</div>
                            </div>
                            <div class="conversation-time">${timeAgo}</div>
                        `;
                        
                        // Add click handler to load conversation
                        conversationEl.addEventListener('click', () => {
                            if (conv.sessionId !== sessionId) {
                                window.location.href = `/Chat/${conv.sessionId}`;
                            }
                        });
                        
                        conversationList.appendChild(conversationEl);
                    });
                } else {
                    // Show empty state
                    conversationList.innerHTML = `
                        <div class="empty-conversations-msg">
                            <i class="bi bi-chat-square-text"></i>
                            <p>Start a new conversation</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading recent conversations:', error);
                // Show error state
                const conversationList = document.getElementById('conversationList');
                conversationList.innerHTML = `
                    <div class="error-state">
                        <i class="bi bi-exclamation-triangle"></i>
                        <p>Failed to load conversations</p>
                    </div>
                `;
            }
        }
        
        function getRelativeTimeString(date) {
            const now = new Date();
            const diffMs = now - date;
            const diffSec = Math.round(diffMs / 1000);
            const diffMin = Math.round(diffSec / 60);
            const diffHour = Math.round(diffMin / 60);
            const diffDay = Math.round(diffHour / 24);
            
            if (diffSec < 60) return 'Just now';
            if (diffMin < 60) return `${diffMin}m ago`;
            if (diffHour < 24) return `${diffHour}h ago`;
            if (diffDay < 7) return `${diffDay}d ago`;
            
            return date.toLocaleDateString();
        }
        
        // UI update functions
        function updateMessageCount() {
            document.getElementById('messageCount').textContent = messageCount;
        }
        
        function trackResponseTime(responseTime) {
            lastResponseTimes.push(parseFloat(responseTime));
            updateAverageResponseTime();
        }
        
        function updateAverageResponseTime() {
            if (lastResponseTimes.length === 0) return;
            
            const avgResponseTimeEl = document.getElementById('avgResponseTime');
            const maxResponseTimeEl = document.getElementById('maxResponseTime');
            
            const total = lastResponseTimes.reduce((sum, time) => sum + time, 0);
            const average = total / lastResponseTimes.length;
            const maxTime = Math.max(...lastResponseTimes);
            
            avgResponseTimeEl.textContent = `${average.toFixed(1)}s`;
            maxResponseTimeEl.textContent = `${maxTime.toFixed(1)}s`;
        }
        
        // Action functions
        async function clearChat() {
            // Confirm first
            if (!confirm('Are you sure you want to clear this chat? This cannot be undone.')) {
                return;
            }
            
            try {
                // Get CSRF token
                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                const csrfToken = token ? token.value : '';
                
                const response = await fetch('/UserChat/ClearChat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': csrfToken
                    },
                    body: JSON.stringify({ sessionId: sessionId })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to clear chat');
                }
                
                const result = await response.json();
                
                if (result.success) {
                    // Reload the page to show the cleared chat
                    window.location.reload();
                } else {
                    throw new Error(result.message || 'Unknown error');
                }
            } catch (error) {
                console.error('Error clearing chat:', error);
                showErrorMessage('Failed to clear chat. Please try again.');
            }
            
            // Close dropdown
            document.getElementById('chatMenu').classList.remove('show');
        }
        
        async function exportChat() {
            try {
                // Format chat for export
                const messages = Array.from(document.querySelectorAll('.message:not(.typing-indicator)'));
                
                if (messages.length === 0) {
                    alert('No messages to export.');
                    return;
                }
                
                let exportText = `Chat with @Model.Chatbot.Name - ${new Date().toLocaleDateString()}\n\n`;
                
                messages.forEach(msg => {
                    const isUser = msg.classList.contains('user');
                    const sender = isUser ? 'You' : '@Model.Chatbot.Name';
                    const content = msg.querySelector('.message-bubble p').textContent;
                    const time = msg.querySelector('.message-time').textContent;
                    
                    exportText += `[${time}] ${sender}:\n${content}\n\n`;
                });
                
                // Create download link
                const blob = new Blob([exportText], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `chat-${sessionId}-${new Date().toISOString().slice(0, 10)}.txt`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                // Close dropdown
                document.getElementById('chatMenu').classList.remove('show');
            } catch (error) {
                console.error('Error exporting chat:', error);
                showErrorMessage('Failed to export chat. Please try again.');
            }
        }
        
        async function endChat() {
            // Confirm first
            if (!confirm('Are you sure you want to end this chat and start a new one?')) {
                return;
            }
            
            try {
                // Get CSRF token
                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                const csrfToken = token ? token.value : '';
                
                const response = await fetch('/UserChat/EndChat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': csrfToken
                    },
                    body: JSON.stringify({ sessionId: sessionId })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to end chat');
                }
                
                const result = await response.json();
                
                if (result.success) {
                    // Redirect to index page to start a new chat
                    window.location.href = '/UserChat';
                } else {
                    throw new Error(result.message || 'Unknown error');
                }
            } catch (error) {
                console.error('Error ending chat:', error);
                showErrorMessage('Failed to end chat. Please try again.');
            }
        }
        
        // Feedback and rating
        function setupFeedbackListeners() {
            // Star rating
            const stars = document.querySelectorAll('.rating-star');
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const rating = parseInt(this.getAttribute('data-rating'));
                    setRating(rating);
                });
                
                star.addEventListener('mouseover', function() {
                    const rating = parseInt(this.getAttribute('data-rating'));
                    highlightStars(rating);
                });
            });
            
            document.getElementById('chatRating').addEventListener('mouseout', function() {
                highlightStars(currentRating);
            });
            
            // Enable submit button when feedback entered
            document.getElementById('feedbackText').addEventListener('input', function() {
                document.getElementById('submitFeedback').disabled = currentRating === 0;
            });
            
            // Submit feedback
            document.getElementById('submitFeedback').addEventListener('click', submitFeedback);
        }
        
        function setRating(rating) {
            currentRating = rating;
            highlightStars(rating);
            document.getElementById('submitFeedback').disabled = false;
        }
        
        function highlightStars(rating) {
            const stars = document.querySelectorAll('.rating-star');
            stars.forEach(star => {
                const starRating = parseInt(star.getAttribute('data-rating'));
                if (starRating <= rating) {
                    star.classList.remove('bi-star');
                    star.classList.add('bi-star-fill');
                } else {
                    star.classList.remove('bi-star-fill');
                    star.classList.add('bi-star');
                }
            });
        }
        
        async function submitFeedback() {
            if (currentRating === 0 || feedbackSubmitted) return;
            
            const feedbackText = document.getElementById('feedbackText').value;
            
            try {
                // Get CSRF token
                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                const csrfToken = token ? token.value : '';
                
                // Send feedback to server
                const response = await fetch('/UserChat/SubmitChatFeedback', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': csrfToken
                    },
                    body: JSON.stringify({
                        sessionId: sessionId,
                        rating: currentRating,
                        feedback: feedbackText
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                
                const result = await response.json();
                
                if (result.success) {
                    feedbackSubmitted = true;
                    
                    // Update UI
                    const feedbackSection = document.getElementById('feedbackSection');
                    feedbackSection.innerHTML = `
                        <h4 class="section-title">FEEDBACK SUBMITTED</h4>
                        <div class="feedback-thank-you">
                            <i class="bi bi-check-circle-fill"></i>
                            <p>Thank you for your feedback!</p>
                        </div>
                    `;
                } else {
                    throw new Error(result.message || 'Unknown error');
                }
            } catch (error) {
                console.error('Error submitting feedback:', error);
                showErrorMessage('Failed to submit feedback. Please try again.');
            }
        }
        
        function showErrorMessage(text) {
            const errorEl = document.createElement('div');
            errorEl.className = 'error-toast';
            errorEl.textContent = text;
            document.body.appendChild(errorEl);
            
            setTimeout(() => {
                errorEl.classList.add('show');
            }, 10);
            
            setTimeout(() => {
                errorEl.classList.remove('show');
                setTimeout(() => errorEl.remove(), 300);
            }, 4000);
        }
    </script>
}

@section Styles {
    <style>
        /* Chat Container Styles */
        .chat-container {
            display: grid;
            grid-template-columns: 280px 1fr 300px;
            height: calc(100vh - 70px);
            min-height: 600px;
            background-color: var(--color-gray-100);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            position: relative;
        }
        
        /* Sidebar Styles */
        .chat-sidebar {
            background-color: white;
            border-right: 1px solid var(--color-gray-200);
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
            z-index: 20;
            overflow-y: auto;
        }
        
        .sidebar-header {
            padding: 16px;
            border-bottom: 1px solid var(--color-gray-200);
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: sticky;
            top: 0;
            background: white;
            z-index: 2;
        }
        
        .app-logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 600;
            color: var(--color-primary);
        }
        
        .app-logo i {
            font-size: 20px;
        }
        
        .conversation-list {
            flex: 1;
            overflow-y: auto;
            padding: 12px;
        }
        
        .empty-conversations-msg {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
            color: var(--color-gray-500);
            text-align: center;
        }
        
        .empty-conversations-msg i {
            font-size: 40px;
            margin-bottom: 10px;
            opacity: 0.5;
        }
        
        .conversation-item {
            display: flex;
            align-items: center;
            padding: 12px;
            border-radius: 10px;
            cursor: pointer;
            margin-bottom: 6px;
            transition: all 0.2s ease;
            position: relative;
        }
        
        .conversation-item:hover {
            background-color: var(--color-gray-100);
        }
        
        .conversation-item.active {
            background-color: var(--color-primary-light);
        }
        
        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--color-primary-light);
            color: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
        }
        
        .conversation-info {
            flex: 1;
            min-width: 0;
        }
        
        .conversation-title {
            font-weight: 600;
            margin-bottom: 4px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .conversation-preview {
            font-size: 12px;
            color: var(--color-gray-500);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .conversation-time {
            font-size: 11px;
            color: var(--color-gray-500);
            white-space: nowrap;
            margin-left: 8px;
        }
        
        .sidebar-footer {
            border-top: 1px solid var(--color-gray-200);
            padding: 16px;
            position: sticky;
            bottom: 0;
            background: white;
            z-index: 2;
        }
        
        .btn-new-chat {
            width: 100%;
            padding: 10px;
            background-color: var(--color-primary);
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
        }
        
        .btn-new-chat:hover {
            background-color: var(--color-primary-dark);
            text-decoration: none;
            color: white;
        }
        
        /* Main Chat Area */
        .chat-main {
            display: flex;
            flex-direction: column;
            background-color: var(--color-gray-50);
            overflow: hidden;
        }
        
        .chat-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 16px;
            height: 64px;
            border-bottom: 1px solid var(--color-gray-200);
            background-color: white;
            z-index: 10;
        }
        
        .mobile-toggle {
            display: none;
            margin-right: 8px;
        }
        
        .chat-header-info {
            display: flex;
            align-items: center;
        }
        
        .bot-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--color-primary-light);
            color: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
        }
        
        .bot-name {
            font-weight: 600;
            margin-bottom: 4px;
        }
        
        .bot-status {
            display: flex;
            align-items: center;
            font-size: 12px;
            color: var(--color-gray-500);
        }
        
        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 6px;
        }
        
        .status-indicator.online {
            background-color: var(--color-success);
        }
        
        .chat-header-actions {
            display: flex;
            gap: 8px;
            align-items: center;
        }
        
        .btn-icon {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            background: none;
            border: none;
            color: var(--color-gray-600);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .btn-icon:hover {
            background-color: var(--color-gray-100);
            color: var(--color-gray-900);
        }
        
        .header-dropdown {
            position: relative;
        }
        
        .dropdown-menu {
            position: absolute;
            top: 100%;
            right: 0;
            background-color: white;
            border-radius: 8px;
            box-shadow: var(--shadow-lg);
            width: 180px;
            z-index: 30;
            overflow: hidden;
            display: none;
        }
        
        .dropdown-menu.show {
            display: block;
        }
        
        .dropdown-item {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 12px;
            color: var(--color-gray-700);
            text-decoration: none;
            transition: all 0.2s ease;
        }
        
        .dropdown-item:hover {
            background-color: var(--color-gray-100);
        }
        
        .dropdown-item i {
            font-size: 16px;
            color: var(--color-gray-600);
        }
        
        /* Language selector */
        .language-selector {
            margin-right: 8px;
        }
        
        .language-select {
            padding: 4px 8px;
            border-radius: 6px;
            border: 1px solid var(--color-gray-300);
            background-color: white;
            font-size: 14px;
            color: var(--color-gray-700);
            cursor: pointer;
        }
        
        .language-select:focus {
            outline: none;
            border-color: var(--color-primary);
            box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.1);
        }
        
        /* Chat Messages */
        .chat-messages {
            flex: 1;
            padding: 16px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 16px;
            scroll-behavior: smooth;
        }
        
        .message-date {
            text-align: center;
            font-size: 12px;
            color: var(--color-gray-500);
            margin: 8px 0;
            position: relative;
        }
        
        .message-date::before,
        .message-date::after {
            content: '';
            position: absolute;
            top: 50%;
            width: 30%;
            height: 1px;
            background-color: var(--color-gray-300);
        }
        
        .message-date::before {
            left: 10%;
        }
        
        .message-date::after {
            right: 10%;
        }
        
        .message {
            display: flex;
            max-width: 85%;
            position: relative;
            animation-duration: 0.3s;
            animation-fill-mode: forwards;
        }
        
        .message.user {
            align-self: flex-end;
            flex-direction: row-reverse;
            animation-name: slideInFromRight;
        }
        
        .message.bot {
            align-self: flex-start;
            animation-name: slideInFromLeft;
        }
        
        @@keyframes slideInFromLeft {
            from { transform: translateX(-20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @@keyframes slideInFromRight {
            from { transform: translateX(20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background-color: var(--color-primary-light);
            color: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 12px;
            flex-shrink: 0;
        }
        
        .message-content {
            position: relative;
        }
        
        .message-bubble {
            padding: 12px 16px;
            border-radius: 18px;
            background-color: white;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
            margin-bottom: 4px;
            position: relative;
        }
        
        .message.user .message-bubble {
            background-color: var(--color-primary);
            color: white;
            border-bottom-right-radius: 4px;
        }
        
        .message.bot .message-bubble {
            background-color: white;
            border-bottom-left-radius: 4px;
        }
        
        .message-bubble p {
            margin: 0;
            line-height: 1.5;
        }
        
        .message-time {
            font-size: 11px;
            color: var(--color-gray-500);
            margin-top: 4px;
        }
        
        .message.user .message-time {
            text-align: right;
            color: var(--color-gray-400);
        }
        
        .message-actions {
            position: absolute;
            top: -8px;
            right: 0;
            background-color: white;
            border-radius: 6px;
            display: flex;
            opacity: 0;
            transition: opacity 0.2s ease;
            box-shadow: var(--shadow-md);
            overflow: hidden;
        }
        
        .message:hover .message-actions {
            opacity: 1;
        }
        
        .action-btn {
            padding: 6px 8px;
            background: none;
            border: none;
            color: var(--color-gray-600);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .action-btn:hover {
            background-color: var(--color-gray-100);
            color: var(--color-gray-900);
        }
        
        /* Typing Indicator */
        .typing-indicator {
            display: flex;
            gap: 4px;
            padding: 6px 0;
        }
        
        .typing-indicator span {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--color-gray-400);
            animation: typingAnimation 1.4s infinite ease-in-out;
        }
        
        .typing-indicator span:nth-child(1) { animation-delay: 0s; }
        .typing-indicator span:nth-child(2) { animation-delay: 0.2s; }
        .typing-indicator span:nth-child(3) { animation-delay: 0.4s; }
        
        @@keyframes typingAnimation {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
        
        /* Chat Input */
        .chat-input-container {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            border-top: 1px solid var(--color-gray-200);
            background-color: white;
            gap: 8px;
        }
        
        .input-actions {
            display: flex;
            align-items: center;
        }
        
        .input-action-btn {
            background: none;
            border: none;
            color: var(--color-gray-600);
            font-size: 20px;
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
            transition: all 0.2s ease;
        }
        
        .input-action-btn:hover {
            background-color: var(--color-gray-100);
            color: var(--color-gray-900);
        }
        
        .input-wrapper {
            flex: 1;
            position: relative;
            display: flex;
            align-items: center;
            background-color: var(--color-gray-100);
            border-radius: 24px;
            padding: 8px 12px;
            transition: all 0.2s ease;
        }
        
        .input-wrapper:focus-within {
            background-color: white;
            box-shadow: 0 0 0 2px var(--color-primary-light);
        }
        
        #messageInput {
            flex: 1;
            border: none;
            background: transparent;
            padding: 8px;
            font-size: 14px;
            outline: none;
            resize: none;
            max-height: 120px;
            overflow-y: auto;
            line-height: 1.5;
        }
        
        .voice-input-btn {
            background: none;
            border: none;
            color: var(--color-gray-600);
            cursor: pointer;
            padding: 4px;
            transition: all 0.2s ease;
        }
        
        .voice-input-btn:hover {
            color: var(--color-gray-900);
        }
        
        .send-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--color-primary);
            color: white;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .send-btn:hover:not(:disabled) {
            background-color: var(--color-primary-dark);
        }
        
        .send-btn:disabled {
            background-color: var(--color-gray-300);
            cursor: not-allowed;
        }
        
        /* Session Footer */
        .session-footer {
            display: flex;
            padding: 8px 16px;
            background-color: rgba(249, 250, 251, 0.8);
            font-size: 12px;
            border-top: 1px solid var(--color-gray-200);
            color: var(--color-gray-600);
            gap: 16px;
        }
        
        .session-item {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .session-label {
            font-weight: 500;
        }
        
        .session-value {
            font-family: monospace;
        }
        
        /* Info Panel */
        .chat-info {
            background-color: white;
            border-left: 1px solid var(--color-gray-200);
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
            z-index: 20;
            overflow-y: auto;
        }
        
        .info-header {
            padding: 16px;
            border-bottom: 1px solid var(--color-gray-200);
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: sticky;
            top: 0;
            background: white;
            z-index: 2;
        }
        
        .info-header h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }
        
        .info-close {
            display: none;
        }
        
        .info-section {
            padding: 16px;
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .section-title {
            font-size: 12px;
            font-weight: 600;
            color: var(--color-gray-500);
            margin-bottom: 16px;
            letter-spacing: 0.5px;
        }
        
        .assistant-info {
            display: flex;
            align-items: center;
        }
        
        .assistant-avatar {
            width: 48px;
            height: 48px;
            border-radius: 8px;
            background-color: var(--color-primary-light);
            color: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 16px;
            font-size: 20px;
        }
        
        .assistant-name {
            font-weight: 600;
            margin-bottom: 4px;
        }
        
        .assistant-department {
            font-size: 12px;
            color: var(--color-gray-500);
            margin-bottom: 4px;
        }
        
        .assistant-model {
            display: inline-block;
            font-size: 12px;
            background-color: var(--color-gray-100);
            color: var(--color-gray-600);
            padding: 2px 8px;
            border-radius: 50px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
            text-align: center;
        }
        
        .stat-item {
            background-color: var(--color-gray-100);
            padding: 12px 8px;
            border-radius: 8px;
        }
        
        .stat-value {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 4px;
        }
        
        .stat-label {
            font-size: 12px;
            color: var(--color-gray-500);
        }
        
        /* Feedback Section */
        .feedback-container {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
        
        .star-rating {
            display: flex;
            justify-content: center;
            gap: 8px;
            font-size: 24px;
            color: var(--color-gray-300);
        }
        
        .rating-star {
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .star-rating:hover .rating-star {
            color: #ffc107;
        }
        
        .rating-star:hover ~ .rating-star {
            color: var(--color-gray-300);
        }
        
        .bi-star-fill {
            color: #ffc107 !important;
        }
        
        .feedback-input-container {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        #feedbackText {
            padding: 12px;
            border-radius: 8px;
            border: 1px solid var(--color-gray-300);
            resize: none;
            font-size: 14px;
            min-height: 80px;
        }
        
        #feedbackText:focus {
            outline: none;
            border-color: var(--color-primary);
            box-shadow: 0 0 0 2px var(--color-primary-light);
        }
        
        .feedback-thank-you {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .feedback-thank-you i {
            font-size: 48px;
            color: var(--color-success);
            margin-bottom: 12px;
        }
        
        .feedback-thank-you p {
            margin: 0;
            font-weight: 500;
        }
        
        /* Loading Indicator */
        .chat-loading {
            position: fixed;
            bottom: 24px;
            right: 24px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 8px;
            padding: 12px 16px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            gap: 8px;
            z-index: 1000;
            font-size: 14px;
        }

        .loading-spinner {
            width: 18px;
            height: 18px;
            border: 2px solid var(--color-primary);
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 0.8s linear infinite;
        }

        @@keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Error Toast */
        .error-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #f8d7da;
            color: #721c24;
            padding: 12px 16px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            z-index: 1050;
            max-width: 350px;
            transform: translateY(-20px);
            opacity: 0;
            transition: all 0.3s ease;
        }
        
        .error-toast.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        /* Shake animation for empty input */
        @@keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
        
        .shake-animation {
            animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
        }
        
        /* Assistant Capabilities */
        .assistant-capabilities {
            margin-top: 16px;
            display: flex;
            flex-direction: column;
            gap: 8px;
            background-color: var(--color-gray-50);
            border-radius: 8px;
            padding: 12px;
        }

        .capability-item {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .capability-icon {
            width: 28px;
            height: 28px;
            border-radius: 6px;
            background-color: var(--color-primary-light);
            color: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            flex-shrink: 0;
        }

        .capability-text {
            font-size: 13px;
            color: var(--color-gray-700);
            line-height: 1.4;
        }

        /* Enhanced styling for existing elements */
        .assistant-info {
            background-color: white;
            border-radius: 8px;
            padding: 12px;
            display: flex;
            align-items: center;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        }

        .assistant-avatar {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            background: linear-gradient(135deg, var(--color-primary-light) 0%, var(--color-primary) 100%);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 16px;
            font-size: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .assistant-name {
            font-weight: 600;
            margin-bottom: 4px;
            color: var(--color-gray-900);
            font-size: 15px;
        }

        .assistant-department {
            font-size: 13px;
            color: var(--color-gray-600);
            margin-bottom: 6px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .assistant-department::before {
            content: '';
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--color-success);
        }

        .assistant-model {
            display: inline-block;
            font-size: 11px;
            background-color: var(--color-gray-100);
            color: var(--color-gray-600);
            padding: 3px 8px;
            border-radius: 4px;
            font-weight: 500;
            letter-spacing: 0.3px;
        }
        
        /* Responsive Adjustments */
        @@media (max-width: 1200px) {
            .chat-container {
                grid-template-columns: 280px 1fr 0;
            }
            
            .chat-info {
                position: fixed;
                top: 0;
                right: 0;
                bottom: 0;
                width: 300px;
                transform: translateX(100%);
                box-shadow: var(--shadow-lg);
            }
            
            .chat-info.show {
                transform: translateX(0);
            }
            
            .info-close {
                display: block;
            }
        }
        
        @@media (max-width: 768px) {
            .chat-container {
                grid-template-columns: 0 1fr 0;
            }
            
            .chat-sidebar {
                position: fixed;
                top: 0;
                left: 0;
                bottom: 0;
                width: 280px;
                transform: translateX(-100%);
                box-shadow: var(--shadow-lg);
            }
            
            .chat-sidebar.show {
                transform: translateX(0);
            }
            
            .mobile-toggle {
                display: block;
            }
        }
    </style>
}