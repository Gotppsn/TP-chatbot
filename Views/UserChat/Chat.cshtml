@model AIHelpdeskSupport.ViewModels.UserChatViewModel
@{
    ViewData["Title"] = "Chat";
}

<div class="chat-container">
    <div class="chat-header">
        <div class="d-flex align-items-center">
            <div class="chatbot-icon @GetColorClass(Model.Chatbot.Department)">
                <i class="bi @GetIconClass(Model.Chatbot.Department)"></i>
            </div>
            <div class="chatbot-info">
                <h1 class="chatbot-title">@Model.Chatbot.Name</h1>
                <div class="chatbot-meta">
                    <span class="badge badge-@GetColorClass(Model.Chatbot.Department)">@Model.Chatbot.Department</span>
                    <span class="badge badge-secondary">@Model.Chatbot.AiModel</span>
                </div>
            </div>
        </div>
        <div class="chat-actions">
            <a href="@Url.Action("Index", "UserChat")" class="btn btn-sm btn-outline">
                <i class="bi bi-arrow-left me-1"></i> Back to Chatbots
            </a>
        </div>
    </div>

    <div class="chat-body">
        <div class="messages-container" id="messagesContainer">
            <div class="chat-message bot">
                <div class="message-avatar">
                    <i class="bi @GetIconClass(Model.Chatbot.Department)"></i>
                </div>
                <div class="message-content">
                    <div class="message-bubble">
                        <p>ðŸ‘‹ Hello! I'm <strong>@Model.Chatbot.Name</strong> from the @Model.Chatbot.Department
                            department. How can I help you today?</p>
                    </div>
                    <div class="message-info">
                        <span class="message-time">Now</span>
                    </div>
                </div>
            </div>
            <!-- Messages will be added here dynamically -->
        </div>

        <div class="chat-input">
            <form id="chatForm" class="chat-form">
                <input type="hidden" id="chatbotId" value="@Model.Chatbot.Id" />
                <input type="hidden" id="sessionId" value="@Model.SessionId" />

                <div class="input-attachments">
                    @if (Model.Chatbot.Department == "IT Support" || Model.Chatbot.Department == "Technical")
                    {
                        <button type="button" class="btn-icon attachment-btn" id="uploadFileBtn" title="Upload File">
                            <i class="bi bi-paperclip"></i>
                        </button>
                    }
                </div>

                <div class="input-group">
                    <textarea id="messageInput" class="form-control" placeholder="Type your message here..." rows="1"
                        required></textarea>
                    <button type="submit" id="sendButton" class="btn btn-primary send-btn" disabled>
                        <i class="bi bi-send"></i>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chatForm = document.getElementById('chatForm');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const messagesContainer = document.getElementById('messagesContainer');
            const chatbotId = document.getElementById('chatbotId').value;
            const sessionId = document.getElementById('sessionId').value;

            // Auto-resize textarea
            messageInput.addEventListener('input', function () {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';

                // Enable/disable send button
                sendButton.disabled = this.value.trim() === '';
            });

            // Handle form submission
            chatForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const message = messageInput.value.trim();
                if (!message) return;

                // Add user message to chat
                addMessage('user', message);

                // Clear input and reset height
                messageInput.value = '';
                messageInput.style.height = 'auto';
                sendButton.disabled = true;

                // Show typing indicator
                showTypingIndicator();

                // Send message to server
                sendMessageToServer(message);
            });

            function addMessage(type, text) {
                const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                const messageDiv = document.createElement('div');
                messageDiv.className = `chat-message ${type}`;

                const avatarIcon = type === 'bot'
                    ? `<i class="bi @GetIconClass(Model.Chatbot.Department)"></i>`
                    : `<i class="bi bi-person"></i>`;

                messageDiv.innerHTML = `
                        <div class="message-avatar">
                            ${avatarIcon}
                        </div>
                        <div class="message-content">
                            <div class="message-bubble">
                                <p>${text}</p>
                            </div>
                            <div class="message-info">
                                <span class="message-time">${time}</span>
                            </div>
                        </div>
                    `;

                messagesContainer.appendChild(messageDiv);
                scrollToBottom();
            }

            function showTypingIndicator() {
                const typingDiv = document.createElement('div');
                typingDiv.className = 'chat-message bot typing';
                typingDiv.id = 'typingIndicator';

                typingDiv.innerHTML = `
                        <div class="message-avatar">
                            <i class="bi @GetIconClass(Model.Chatbot.Department)"></i>
                        </div>
                        <div class="message-content">
                            <div class="message-bubble">
                                <div class="typing-indicator">
                                    <span></span><span></span><span></span>
                                </div>
                            </div>
                        </div>
                    `;

                messagesContainer.appendChild(typingDiv);
                scrollToBottom();
            }

            function hideTypingIndicator() {
                const typingIndicator = document.getElementById('typingIndicator');
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }

            function scrollToBottom() {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }

            async function sendMessageToServer(message) {
                try {
                    const response = await fetch('/api/userchat/message', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            chatbotId: chatbotId,
                            message: message,
                            sessionId: sessionId
                        })
                    });

                    const data = await response.json();

                    // Hide typing indicator
                    hideTypingIndicator();

                    if (data.success) {
                        // Add bot response to chat
                        addMessage('bot', data.response);
                    } else {
                        // Show error message
                        addMessage('bot', 'Sorry, I encountered an error. Please try again later.');
                        console.error('Error:', data.errorMessage);
                    }
                } catch (error) {
                    hideTypingIndicator();
                    addMessage('bot', 'Sorry, I encountered an error. Please try again later.');
                    console.error('Error:', error);
                }
            }

            // Initialize file upload if enabled
            const uploadFileBtn = document.getElementById('uploadFileBtn');
            if (uploadFileBtn) {
                uploadFileBtn.addEventListener('click', function () {
                    // Implement file upload functionality here
                    alert('File upload functionality would be implemented here.');
                });
            }
        });
    </script>
}

@section Styles {
    <style>
        .chat-container {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 120px);
            background-color: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow);
            overflow: hidden;
        }

        .chat-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--color-gray-200);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chatbot-icon {
            width: 40px;
            height: 40px;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            margin-right: 1rem;
        }

        .chatbot-icon.primary {
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
        }

        .chatbot-icon.info {
            background-color: rgba(13, 202, 240, 0.1);
            color: var(--color-info);
        }

        .chatbot-icon.warning {
            background-color: rgba(255, 193, 7, 0.1);
            color: var(--color-warning);
        }

        .chatbot-icon.danger {
            background-color: rgba(220, 53, 69, 0.1);
            color: var(--color-danger);
        }

        .chatbot-icon.success {
            background-color: rgba(32, 201, 151, 0.1);
            color: var(--color-success);
        }

        .chatbot-icon.secondary {
            background-color: rgba(108, 117, 125, 0.1);
            color: var(--color-secondary);
        }

        .chatbot-info {
            min-width: 0;
        }

        .chatbot-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0 0 0.25rem;
        }

        .chatbot-meta {
            display: flex;
            gap: 0.5rem;
        }

        .badge {
            font-size: 0.75rem;
            padding: 0.25em 0.6em;
            border-radius: 100px;
        }

        .badge-primary {
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
        }

        .badge-info {
            background-color: rgba(13, 202, 240, 0.1);
            color: var(--color-info);
        }

        .badge-warning {
            background-color: rgba(255, 193, 7, 0.1);
            color: var(--color-warning);
        }

        .badge-danger {
            background-color: rgba(220, 53, 69, 0.1);
            color: var(--color-danger);
        }

        .badge-success {
            background-color: rgba(32, 201, 151, 0.1);
            color: var(--color-success);
        }

        .badge-secondary {
            background-color: rgba(108, 117, 125, 0.1);
            color: var(--color-secondary);
        }

        .chat-body {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 1.5rem;
            background-color: var(--color-gray-50);
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .chat-message {
            display: flex;
            align-items: flex-start;
            max-width: 85%;
        }

        .chat-message.user {
            align-self: flex-end;
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--color-gray-200);
            color: var(--color-gray-700);
            font-size: 1.125rem;
            flex-shrink: 0;
            margin: 0 0.75rem;
        }

        .chat-message.bot .message-avatar {
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
        }

        .message-content {
            flex: 1;
            min-width: 0;
        }

        .message-bubble {
            padding: 0.75rem 1rem;
            border-radius: 1rem;
            position: relative;
        }

        .chat-message.bot .message-bubble {
            background-color: white;
            border: 1px solid var(--color-gray-200);
            border-bottom-left-radius: 0.25rem;
        }

        .chat-message.user .message-bubble {
            background-color: var(--color-primary);
            color: white;
            border-bottom-right-radius: 0.25rem;
        }

        .message-bubble p {
            margin: 0;
            line-height: 1.5;
        }

        .message-info {
            margin-top: 0.25rem;
            font-size: 0.6875rem;
            color: var(--color-gray-500);
            padding: 0 0.25rem;
        }

        /* Typing indicator */
        .typing-indicator {
            display: flex;
            align-items: center;
            gap: 4px;
            padding: 0.5rem 0;
        }

        .typing-indicator span {
            display: inline-block;
            width: 8px;
            height: 8px;
            background-color: var(--color-gray-400);
            border-radius: 50%;
            animation: typing 1s infinite ease-in-out;
        }

        .typing-indicator span:nth-child(1) {
            animation-delay: 0s;
        }

        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }

        @@keyframes typing {

                0%,
                100% {
                    transform: translateY(0);
                }

                50% {
                    transform: translateY(-4px);
                }
            }

            .chat-input {
                padding: 1rem;
                border-top: 1px solid var(--color-gray-200);
                background-color: white;
            }

            .chat-form {
                display: flex;
                align-items: flex-end;
                gap: 0.5rem;
            }

            .input-attachments {
                flex-shrink: 0;
            }

            .input-group {
                flex: 1;
                display: flex;
                position: relative;
            }

            .input-group textarea {
                border-radius: 20px;
                padding: 0.75rem 3rem 0.75rem 1rem;
                resize: none;
                max-height: 150px;
                transition: all 0.3s ease;
            }

            .send-btn {
                position: absolute;
                right: 4px;
                bottom: 4px;
                width: 36px;
                height: 36px;
                border-radius: 50%;
                padding: 0;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .btn-icon {
                width: 36px;
                height: 36px;
                border-radius: var(--border-radius);
                border: none;
                background-color: transparent;
                display: flex;
                align-items: center;
                justify-content: center;
                color: var(--color-gray-600);
                cursor: pointer;
                transition: all 0.2s ease;
            }

            .btn-icon:hover {
                background-color: var(--color-gray-100);
                color: var(--color-gray-800);
            }

            /* Responsive adjustments */
            @@media(max - width: 768px) {
                    .chat-container {
                        height: calc(100vh - 100px);
                        border-radius: 0;
                        margin: -1.5rem;
                    }

                    .messages-container {
                        padding: 1rem;
                    }

                    .chat-message {
                        max-width: 95%;
                    }
                }
            </style>
        }

@functions {
    string GetColorClass(string department)
    {
        return department switch
        {
            "Customer Service" => "primary",
            "IT Support" => "info",
            "Sales" => "warning",
            "Billing" => "danger",
            "Technical" => "success",
            _ => "secondary"
        };
    }

    string GetIconClass(string department)
    {
        return department switch
        {
            "Customer Service" => "bi-headset",
            "IT Support" => "bi-pc-display",
            "Sales" => "bi-currency-dollar",
            "Billing" => "bi-credit-card",
            "Technical" => "bi-wrench",
            _ => "bi-robot"
        };
    }
}