@model AIHelpdeskSupport.ViewModels.UserChatViewModel
@{
    ViewData["Title"] = "Chat Support";
    bool isContinuingConversation = Model.SessionId.StartsWith("session-");
    string sessionId = Model.SessionId;
    var previousMessages = new List<(string message, bool isBot, string time)>();
    
    if (sessionId == "session-1234-abcd") {
        previousMessages = new List<(string, bool, string)> {
            ("Hello! I'm the Customer Support Bot. How can I help you today?", true, "10:30 AM"),
            ("I need help with my recent order #12345", false, "10:31 AM"),
            ("I'd be happy to help you with that order. Let me check the status for you.", true, "10:31 AM"),
            ("I can see that your order #12345 has been shipped on Monday and is expected to arrive tomorrow.", true, "10:32 AM"),
            ("Thank you for checking. Can you also tell me if partial refunds are possible?", false, "10:33 AM"),
            ("Yes, we do offer partial refunds for items you wish to return while keeping others. Would you like me to process a return for part of your order?", true, "10:34 AM"),
            ("Not right now, I'll wait for the package to arrive first", false, "10:35 AM"),
            ("Understood. Once your package arrives, you can initiate a return through your account or contact us again and we'll help you with the process.", true, "10:36 AM"),
            ("Thank you for your help!", false, "10:37 AM")
        };
    } 
    else if (sessionId == "session-9012-ijkl") {
        previousMessages = new List<(string, bool, string)> {
            ("Hello! I'm the Sales Assistant. How can I help you today?", true, "2:15 PM"),
            ("I'm interested in your business subscription plans", false, "2:16 PM"),
            ("Great! We offer several business subscription tiers designed to meet different organizational needs. Are you looking for something specific?", true, "2:17 PM"),
            ("We have a team of 15 people. What would you recommend?", false, "2:18 PM"),
            ("For a team of 15, I'd recommend our Professional plan at $199/month which includes 20 user seats, premium support, and all advanced features. Would you like to know more specific details?", true, "2:19 PM"),
            ("What are the pricing options?", false, "2:20 PM")
        };
    }
}

<div class="chat-container">
    <div class="chat-sidebar">
        <div class="sidebar-header">
            <div class="search-container">
                <i class="bi bi-search search-icon"></i>
                <input type="text" class="search-input" placeholder="Search conversations...">
            </div>
            <button class="btn-icon sidebar-toggle" id="sidebarToggle">
                <i class="bi bi-chevron-left"></i>
            </button>
        </div>
        <div class="conversation-list">
            <div class="conversation-item active">
                <div class="avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="conversation-info">
                    <div class="conversation-title">Current Conversation</div>
                    <div class="conversation-preview">Started just now</div>
                </div>
                <div class="conversation-time">Now</div>
            </div>
            
            <div class="conversation-item">
                <div class="avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="conversation-info">
                    <div class="conversation-title">Password Reset Help</div>
                    <div class="conversation-preview">I need help with resetting...</div>
                </div>
                <div class="conversation-time">2h ago</div>
            </div>
            
            <div class="conversation-item">
                <div class="avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="conversation-info">
                    <div class="conversation-title">Billing Question</div>
                    <div class="conversation-preview">I have a question about...</div>
                </div>
                <div class="conversation-time">Yesterday</div>
            </div>
            
            <div class="conversation-item">
                <div class="avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="conversation-info">
                    <div class="conversation-title">Product Inquiry</div>
                    <div class="conversation-preview">I'd like to know more about...</div>
                </div>
                <div class="conversation-time">3d ago</div>
            </div>
        </div>
        <div class="sidebar-footer">
            <button class="btn-new-chat">
                <i class="bi bi-plus-circle"></i>
                <span>New Conversation</span>
            </button>
        </div>
    </div>
    
    <div class="chat-main">
        <div class="chat-header">
            <div class="mobile-toggle" id="mobileSidebarToggle">
                <i class="bi bi-list"></i>
            </div>
            <div class="chat-header-info">
                <div class="bot-icon"><i class="bi bi-robot"></i></div>
                <div class="bot-details">
                    <div class="bot-name">@(sessionId == "session-1234-abcd" ? "Customer Support Bot" : (sessionId == "session-9012-ijkl" ? "Sales Assistant" : "AI Assistant"))</div>
                    <div class="bot-status">
                        <span class="status-indicator online"></span>
                        <span>Online - @(sessionId == "session-1234-abcd" ? "Customer Service" : (sessionId == "session-9012-ijkl" ? "Sales" : "Support"))</span>
                    </div>
                </div>
            </div>
            <div class="chat-header-actions">
                <button class="btn-icon" id="infoToggle" title="Toggle Info Panel">
                    <i class="bi bi-info-circle"></i>
                </button>
                <div class="header-dropdown">
                    <button class="btn-icon" id="chatMenuBtn" title="Chat Menu">
                        <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <div class="dropdown-menu" id="chatMenu">
                        <a href="#" class="dropdown-item"><i class="bi bi-arrow-90deg-up"></i> Export Chat</a>
                        <a href="#" class="dropdown-item"><i class="bi bi-star"></i> Save to Favorites</a>
                        <a href="#" class="dropdown-item"><i class="bi bi-x-circle"></i> End Chat</a>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <div class="message-date">@(isContinuingConversation ? previousMessages.Count > 0 ? DateTime.Now.AddDays(-2).ToString("MMMM d, yyyy") : "Today" : "Today")</div>
            
            @if (isContinuingConversation && previousMessages.Count > 0)
            {
                foreach (var msg in previousMessages)
                {
                    <div class="message @(msg.isBot ? "bot" : "user")" data-timestamp="@msg.time">
                        <div class="message-avatar">
                            <i class="bi @(msg.isBot ? "bi-robot" : "bi-person")"></i>
                        </div>
                        <div class="message-content">
                            <div class="message-bubble">
                                <p>@msg.message</p>
                            </div>
                            <div class="message-time">@msg.time</div>
                            <div class="message-actions">
                                @if(msg.isBot) {
                                    <button class="action-btn" title="Copy to clipboard">
                                        <i class="bi bi-clipboard"></i>
                                    </button>
                                    <button class="action-btn" title="Rate response">
                                        <i class="bi bi-hand-thumbs-up"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="message bot">
                    <div class="message-avatar">
                        <i class="bi bi-robot"></i>
                    </div>
                    <div class="message-content">
                        <div class="message-bubble">
                            <p>ðŸ‘‹ Hello! I'm your AI support agent. How can I assist you today?</p>
                        </div>
                        <div class="message-time">@DateTime.Now.ToString("h:mm tt")</div>
                        <div class="message-actions">
                            <button class="action-btn" title="Copy to clipboard">
                                <i class="bi bi-clipboard"></i>
                            </button>
                            <button class="action-btn" title="Rate response">
                                <i class="bi bi-hand-thumbs-up"></i>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <div class="suggestion-chips" id="suggestionChips">
            <button class="suggestion-chip">How do I reset my password?</button>
            <button class="suggestion-chip">What's the status of my order?</button>
            <button class="suggestion-chip">I need help with billing</button>
        </div>
        
        <div class="chat-input-container">
            <input type="hidden" id="sessionId" value="@Model.SessionId">
            <input type="hidden" id="chatbotId" value="@Model.Chatbot.Id">
            <div class="input-actions">
                <button class="input-action-btn" title="Add attachment" id="attachmentBtn">
                    <i class="bi bi-paperclip"></i>
                </button>
            </div>
            <div class="input-wrapper">
                <textarea id="messageInput" placeholder="Type your message..." rows="1"></textarea>
                <button class="voice-input-btn" title="Voice input" id="voiceBtn">
                    <i class="bi bi-mic"></i>
                </button>
            </div>
            <button class="send-btn" id="sendMessage" disabled>
                <i class="bi bi-send"></i>
            </button>
        </div>
    </div>
    
    <div class="chat-info" id="chatInfo">
        <div class="info-header">
            <h3>Conversation Details</h3>
            <button class="btn-icon info-close" id="infoClose">
                <i class="bi bi-x"></i>
            </button>
        </div>
        
        <div class="info-section">
            <div class="section-title">AI ASSISTANT</div>
            <div class="assistant-info">
                <div class="assistant-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="assistant-details">
                    <div class="assistant-name">@(sessionId == "session-1234-abcd" ? "Customer Support Bot" : (sessionId == "session-9012-ijkl" ? "Sales Assistant" : Model.Chatbot.Name))</div>
                    <div class="assistant-department">@(sessionId == "session-1234-abcd" ? "Customer Service" : (sessionId == "session-9012-ijkl" ? "Sales" : Model.Chatbot.Department))</div>
                    <div class="assistant-model">@(Model.Chatbot.AiModel)</div>
                </div>
            </div>
        </div>
        
        <div class="info-section">
            <div class="section-title">CONVERSATION STATS</div>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value" id="messageCount">0</div>
                    <div class="stat-label">Messages</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">2.4s</div>
                    <div class="stat-label">Avg. Response</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="chatDuration">0m</div>
                    <div class="stat-label">Duration</div>
                </div>
            </div>
        </div>
        
        <div class="info-section">
            <div class="section-title">KNOWLEDGE SOURCES</div>
            <div class="knowledge-sources">
                <div class="knowledge-source">
                    <i class="bi bi-file-earmark-text"></i>
                    <span>Product Documentation</span>
                </div>
                <div class="knowledge-source">
                    <i class="bi bi-file-earmark-text"></i>
                    <span>FAQ Database</span>
                </div>
                <div class="knowledge-source">
                    <i class="bi bi-file-earmark-text"></i>
                    <span>Support Policies</span>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
<style>
/* Core Variables */
:root {
    --chat-primary: #0d6efd;
    --chat-primary-light: rgba(13, 110, 253, 0.1);
    --chat-primary-hover: #0a58ca;
    --chat-success: #20c997;
    --chat-danger: #dc3545;
    --chat-warning: #ffc107;
    --chat-info: #0dcaf0;
    
    --chat-bg: #f9fafb;
    --chat-sidebar-bg: #ffffff;
    --chat-main-bg: #ffffff;
    --chat-info-bg: #ffffff;
    
    --chat-text: #1f2937;
    --chat-text-light: #4b5563;
    --chat-text-lighter: #6b7280;
    
    --chat-border: #e5e7eb;
    --chat-border-light: #f3f4f6;
    
    --bubble-user: var(--chat-primary);
    --bubble-user-text: white;
    --bubble-bot: white;
    --bubble-bot-text: #1f2937;
    --bubble-bot-border: #e5e7eb;
    
    --transition-normal: all 0.3s ease;
    --transition-fast: all 0.15s ease;
    
    --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    
    --chat-sidebar-width: 280px;
    --chat-info-width: 300px;
    --chat-header-height: 64px;
    --chat-input-height: 68px;
    --chat-border-radius: 12px;
    --chat-bubble-radius: 18px;
}

/* Main Container */
.chat-container {
    display: grid;
    grid-template-columns: var(--chat-sidebar-width) 1fr var(--chat-info-width);
    height: calc(100vh - 150px);
    min-height: 500px;
    background-color: var(--chat-bg);
    border-radius: var(--chat-border-radius);
    overflow: hidden;
    box-shadow: var(--shadow-md);
    transition: var(--transition-normal);
    position: relative;
}

/* Sidebar Styles */
.chat-sidebar {
    background-color: var(--chat-sidebar-bg);
    border-right: 1px solid var(--chat-border);
    display: flex;
    flex-direction: column;
    transition: var(--transition-normal);
    z-index: 20;
}

.sidebar-header {
    padding: 16px;
    border-bottom: 1px solid var(--chat-border);
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.search-container {
    position: relative;
    flex: 1;
}

.search-icon {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--chat-text-lighter);
    pointer-events: none;
}

.search-input {
    width: 100%;
    padding: 8px 8px 8px 32px;
    border: 1px solid var(--chat-border);
    border-radius: 50px;
    background-color: var(--chat-border-light);
    font-size: 14px;
    transition: var(--transition-fast);
}

.search-input:focus {
    outline: none;
    border-color: var(--chat-primary);
    background-color: white;
    box-shadow: 0 0 0 3px var(--chat-primary-light);
}

.sidebar-toggle {
    margin-left: 8px;
}

.conversation-list {
    flex: 1;
    overflow-y: auto;
    padding: 12px;
}

.conversation-item {
    display: flex;
    align-items: center;
    padding: 12px;
    border-radius: 10px;
    cursor: pointer;
    margin-bottom: 6px;
    transition: var(--transition-fast);
}

.conversation-item:hover {
    background-color: var(--chat-border-light);
}

.conversation-item.active {
    background-color: var(--chat-primary-light);
}

.avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--chat-primary-light);
    color: var(--chat-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 12px;
    flex-shrink: 0;
}

.conversation-info {
    flex: 1;
    min-width: 0;
}

.conversation-title {
    font-weight: 600;
    margin-bottom: 4px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--chat-text);
}

.conversation-preview {
    font-size: 12px;
    color: var(--chat-text-lighter);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.conversation-time {
    font-size: 11px;
    color: var(--chat-text-lighter);
    white-space: nowrap;
    margin-left: 8px;
}

.sidebar-footer {
    border-top: 1px solid var(--chat-border);
    padding: 16px;
}

.btn-new-chat {
    width: 100%;
    padding: 10px;
    background-color: var(--chat-primary);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    cursor: pointer;
    transition: var(--transition-fast);
}

.btn-new-chat:hover {
    background-color: var(--chat-primary-hover);
}

/* Main Chat Area */
.chat-main {
    display: flex;
    flex-direction: column;
    background-color: var(--chat-main-bg);
}

.chat-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 12px 16px;
    height: var(--chat-header-height);
    border-bottom: 1px solid var(--chat-border);
    background-color: white;
    z-index: 10;
}

.mobile-toggle {
    display: none;
    margin-right: 8px;
}

.chat-header-info {
    display: flex;
    align-items: center;
}

.bot-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--chat-primary-light);
    color: var(--chat-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 12px;
}

.bot-name {
    font-weight: 600;
    margin-bottom: 4px;
    color: var(--chat-text);
}

.bot-status {
    display: flex;
    align-items: center;
    font-size: 12px;
    color: var(--chat-text-lighter);
}

.status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    margin-right: 6px;
}

.status-indicator.online {
    background-color: var(--chat-success);
}

.chat-header-actions {
    display: flex;
    gap: 8px;
    align-items: center;
}

.btn-icon {
    width: 36px;
    height: 36px;
    border-radius: 8px;
    border: none;
    background-color: transparent;
    color: var(--chat-text-light);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: var(--transition-fast);
}

.btn-icon:hover {
    background-color: var(--chat-border-light);
    color: var(--chat-text);
}

.header-dropdown {
    position: relative;
}

.dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    background-color: white;
    border-radius: 8px;
    box-shadow: var(--shadow-lg);
    width: 180px;
    z-index: 30;
    overflow: hidden;
    display: none;
}

.dropdown-menu.show {
    display: block;
}

.dropdown-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 12px;
    color: var(--chat-text);
    text-decoration: none;
    transition: var(--transition-fast);
}

.dropdown-item:hover {
    background-color: var(--chat-border-light);
}

.dropdown-item i {
    font-size: 16px;
    color: var(--chat-text-light);
}

/* Chat Messages */
.chat-messages {
    flex: 1;
    padding: 16px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 16px;
    background-color: var(--chat-bg);
    /* Improved scrolling with momentum scrolling for touch devices */
    -webkit-overflow-scrolling: touch;
    scroll-behavior: smooth;
    height: calc(100vh - var(--chat-header-height) - var(--chat-input-height) - 200px);
    min-height: 200px;
}

/* Custom scrollbar for webkit browsers */
.chat-messages::-webkit-scrollbar {
    width: 8px;
}

.chat-messages::-webkit-scrollbar-track {
    background: transparent;
}

.chat-messages::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.1);
    border-radius: 4px;
}

.chat-messages::-webkit-scrollbar-thumb:hover {
    background-color: rgba(0, 0, 0, 0.2);
}

.message-date {
    text-align: center;
    font-size: 12px;
    color: var(--chat-text-lighter);
    margin: 8px 0;
    position: relative;
}

.message-date::before,
.message-date::after {
    content: '';
    position: absolute;
    top: 50%;
    width: 30%;
    height: 1px;
    background-color: var(--chat-border);
}

.message-date::before {
    left: 10%;
}

.message-date::after {
    right: 10%;
}

.message {
    display: flex;
    max-width: 85%;
    position: relative;
    transition: transform 0.3s ease;
}

.message.user {
    align-self: flex-end;
    flex-direction: row-reverse;
}

.message:hover .message-actions {
    opacity: 1;
}

.message-avatar {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 12px;
    flex-shrink: 0;
}

.message.bot .message-avatar {
    background-color: var(--chat-primary-light);
    color: var(--chat-primary);
}

.message.user .message-avatar {
    background-color: var(--chat-border-light);
    color: var(--chat-text-light);
}

.message-content {
    display: flex;
    flex-direction: column;
    position: relative;
}

.message-bubble {
    padding: 12px 16px;
    border-radius: var(--chat-bubble-radius);
    margin-bottom: 4px;
    position: relative;
    transition: var(--transition-fast);
}

.message.bot .message-bubble {
    background-color: var(--bubble-bot);
    color: var(--bubble-bot-text);
    border: 1px solid var(--bubble-bot-border);
    border-bottom-left-radius: 4px;
}

.message.user .message-bubble {
    background-color: var(--bubble-user);
    color: var(--bubble-user-text);
    border-bottom-right-radius: 4px;
}

.message-bubble p {
    margin: 0;
    line-height: 1.5;
}

.message-time {
    font-size: 11px;
    color: var(--chat-text-lighter);
    margin-top: 2px;
}

.message.user .message-time {
    align-self: flex-end;
}

.message-actions {
    position: absolute;
    top: -8px;
    right: 0;
    background-color: white;
    border-radius: 6px;
    display: flex;
    opacity: 0;
    transition: opacity 0.2s ease;
    box-shadow: var(--shadow-md);
    overflow: hidden;
}

.message.user .message-actions {
    right: auto;
    left: 0;
}

.action-btn {
    padding: 6px 8px;
    background: none;
    border: none;
    color: var(--chat-text-light);
    cursor: pointer;
    transition: var(--transition-fast);
}

.action-btn:hover {
    background-color: var(--chat-border-light);
    color: var(--chat-text);
}

/* Suggestion Chips */
.suggestion-chips {
    padding: 8px 16px;
    display: flex;
    gap: 8px;
    overflow-x: auto;
    border-top: 1px solid var(--chat-border);
    scrollbar-width: none; /* Firefox */
}

.suggestion-chips::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Edge */
}

.suggestion-chip {
    white-space: nowrap;
    padding: 8px 12px;
    background-color: var(--chat-border-light);
    border: 1px solid var(--chat-border);
    border-radius: 50px;
    font-size: 13px;
    color: var(--chat-text);
    cursor: pointer;
    transition: var(--transition-fast);
}

.suggestion-chip:hover {
    background-color: var(--chat-primary-light);
    border-color: var(--chat-primary-light);
    color: var(--chat-primary);
}

/* Chat Input */
.chat-input-container {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    height: var(--chat-input-height);
    border-top: 1px solid var(--chat-border);
    background-color: white;
    gap: 8px;
}

.input-actions {
    display: flex;
    align-items: center;
}

.input-action-btn {
    background: none;
    border: none;
    color: var(--chat-text-light);
    font-size: 20px;
    cursor: pointer;
    padding: 8px;
    border-radius: 8px;
    transition: var(--transition-fast);
}

.input-action-btn:hover {
    background-color: var(--chat-border-light);
    color: var(--chat-text);
}

.input-wrapper {
    flex: 1;
    position: relative;
    display: flex;
    align-items: center;
    background-color: var(--chat-border-light);
    border-radius: 24px;
    padding: 8px 12px;
    transition: var(--transition-fast);
}

.input-wrapper:focus-within {
    background-color: white;
    box-shadow: 0 0 0 2px var(--chat-primary-light);
}

#messageInput {
    flex: 1;
    border: none;
    background: transparent;
    padding: 8px;
    font-size: 14px;
    outline: none;
    resize: none;
    max-height: 120px;
    overflow-y: auto;
    line-height: 1.5;
}

.voice-input-btn {
    background: none;
    border: none;
    color: var(--chat-text-light);
    cursor: pointer;
    padding: 4px;
    transition: var(--transition-fast);
}

.voice-input-btn:hover {
    color: var(--chat-text);
}

.send-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--chat-primary);
    color: white;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: var(--transition-fast);
}

.send-btn:hover:not(:disabled) {
    background-color: var(--chat-primary-hover);
}

.send-btn:disabled {
    background-color: var(--chat-border);
    cursor: not-allowed;
}

/* Info Panel */
.chat-info {
    background-color: var(--chat-info-bg);
    border-left: 1px solid var(--chat-border);
    display: flex;
    flex-direction: column;
    transition: var(--transition-normal);
    z-index: 20;
    overflow-y: auto;
}

.info-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 16px;
    border-bottom: 1px solid var(--chat-border);
}

.info-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    color: var(--chat-text);
}

.info-close {
    display: none;
}

.info-section {
    padding: 16px;
    border-bottom: 1px solid var(--chat-border);
}

.section-title {
    font-size: 12px;
    font-weight: 600;
    color: var(--chat-text-lighter);
    margin-bottom: 16px;
    letter-spacing: 0.5px;
}

.assistant-info {
    display: flex;
    align-items: center;
}

.assistant-avatar {
    width: 48px;
    height: 48px;
    border-radius: 8px;
    background-color: var(--chat-primary-light);
    color: var(--chat-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 16px;
    font-size: 20px;
}

.assistant-name {
    font-weight: 600;
    margin-bottom: 4px;
    color: var(--chat-text);
}

.assistant-department {
    font-size: 12px;
    color: var(--chat-text-light);
    margin-bottom: 4px;
}

.assistant-model {
    display: inline-block;
    font-size: 12px;
    background-color: var(--chat-border-light);
    color: var(--chat-text-light);
    padding: 2px 8px;
    border-radius: 50px;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 8px;
    text-align: center;
}

.stat-item {
    background-color: var(--chat-border-light);
    padding: 12px 8px;
    border-radius: 8px;
}

.stat-value {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 4px;
    color: var(--chat-text);
}

.stat-label {
    font-size: 12px;
    color: var(--chat-text-lighter);
}

.knowledge-sources {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.knowledge-source {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 8px 12px;
    background-color: var(--chat-border-light);
    border-radius: 8px;
    color: var(--chat-text-light);
    font-size: 14px;
}

/* Typing Animation */
.typing-dots {
    display: flex;
    gap: 4px;
    padding: 6px 0;
}

.typing-dots span {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: var(--chat-text-lighter);
    animation: typingAnimation 1.4s infinite ease-in-out;
}

.typing-dots span:nth-child(1) { animation-delay: 0s; }
.typing-dots span:nth-child(2) { animation-delay: 0.2s; }
.typing-dots span:nth-child(3) { animation-delay: 0.4s; }

@@keyframes typingAnimation {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-5px); }
}

/* Message Entry Animations */
@@keyframes messageEntryBot {
    from {
        opacity: 0;
        transform: translateX(-20px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

@@keyframes messageEntryUser {
    from {
        opacity: 0;
        transform: translateX(20px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

.message.bot {
    animation: messageEntryBot 0.3s ease forwards;
}

.message.user {
    animation: messageEntryUser 0.3s ease forwards;
}

/* Scroll to bottom indicator */
.scroll-bottom-indicator {
    position: fixed;
    right: calc(var(--chat-info-width) + 20px);
    bottom: 100px;
    width: 40px;
    height: 40px;
    background-color: white;
    border-radius: 50%;
    box-shadow: var(--shadow-lg);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.3s ease, transform 0.3s ease;
    z-index: 15;
}

.scroll-bottom-indicator.visible {
    opacity: 1;
    transform: translateY(0);
}

/* Responsive Design */
@@media (max-width: 1200px) {
    .chat-container {
        grid-template-columns: var(--chat-sidebar-width) 1fr 0;
    }
    
    .chat-info {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        width: var(--chat-info-width);
        transform: translateX(100%);
        box-shadow: var(--shadow-lg);
    }
    
    .chat-info.show {
        transform: translateX(0);
    }
    
    .info-close {
        display: block;
    }

    .scroll-bottom-indicator {
        right: 20px;
    }
}

@@media (max-width: 768px) {
    .chat-container {
        grid-template-columns: 0 1fr 0;
    }
    
    .chat-sidebar {
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        width: var(--chat-sidebar-width);
        transform: translateX(-100%);
        box-shadow: var(--shadow-lg);
    }
    
    .chat-sidebar.show {
        transform: translateX(0);
    }
    
    .mobile-toggle {
        display: block;
    }
}

/* Focus state for accessibility */
button:focus-visible,
input:focus-visible,
textarea:focus-visible {
    outline: 2px solid var(--chat-primary);
    outline-offset: 2px;
}
</style>
}

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendMessage');
    const chatMessages = document.getElementById('chatMessages');
    const sidebarToggle = document.getElementById('sidebarToggle');
    const mobileSidebarToggle = document.getElementById('mobileSidebarToggle');
    const infoToggle = document.getElementById('infoToggle');
    const infoClose = document.getElementById('infoClose');
    const chatMenuBtn = document.getElementById('chatMenuBtn');
    const chatMenu = document.getElementById('chatMenu');
    const chatContainer = document.querySelector('.chat-container');
    const sidebar = document.querySelector('.chat-sidebar');
    const chatInfo = document.querySelector('.chat-info');
    const suggestionChips = document.querySelectorAll('.suggestion-chip');
    const messageCount = document.getElementById('messageCount');
    const chatDuration = document.getElementById('chatDuration');
    
    // Create scroll to bottom indicator
    const scrollIndicator = document.createElement('div');
    scrollIndicator.className = 'scroll-bottom-indicator';
    scrollIndicator.innerHTML = '<i class="bi bi-arrow-down"></i>';
    scrollIndicator.addEventListener('click', scrollToBottom);
    document.body.appendChild(scrollIndicator);
    
    // Initialize message count
    updateMessageCount();
    
    // Initialize chat duration timer
    startChatDurationTimer();
    
    // Scroll to bottom of chat on load
    scrollToBottom();
    
    // Check scroll position and show/hide indicator
    chatMessages.addEventListener('scroll', function() {
        const isScrolledToBottom = chatMessages.scrollHeight - chatMessages.clientHeight <= chatMessages.scrollTop + 100;
        
        if (!isScrolledToBottom && chatMessages.scrollHeight > chatMessages.clientHeight + 300) {
            scrollIndicator.classList.add('visible');
        } else {
            scrollIndicator.classList.remove('visible');
        }
    });
    
    // Auto-resize the textarea
    messageInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
        sendButton.disabled = this.value.trim() === '';
    });
    
    // Toggle sidebar
    sidebarToggle.addEventListener('click', function() {
        sidebar.classList.toggle('collapsed');
        this.querySelector('i').classList.toggle('bi-chevron-left');
        this.querySelector('i').classList.toggle('bi-chevron-right');
    });
    
    // Mobile sidebar toggle
    mobileSidebarToggle.addEventListener('click', function() {
        sidebar.classList.toggle('show');
    });
    
    // Toggle info panel
    infoToggle.addEventListener('click', function() {
        chatInfo.classList.toggle('show');
    });
    
    // Close info panel
    infoClose.addEventListener('click', function() {
        chatInfo.classList.remove('show');
    });
    
    // Toggle dropdown menu
    chatMenuBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        chatMenu.classList.toggle('show');
    });
    
    // Close dropdown on click outside
    document.addEventListener('click', function() {
        chatMenu.classList.remove('show');
    });
    
    // Send message on button click
    sendButton.addEventListener('click', sendMessage);
    
    // Send message on Enter key (not Shift+Enter)
    messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            if (!sendButton.disabled) {
                sendMessage();
            }
        }
    });
    
    // Handle suggestion chips
    suggestionChips.forEach(chip => {
        chip.addEventListener('click', function() {
            messageInput.value = this.textContent;
            messageInput.dispatchEvent(new Event('input'));
            sendMessage();
        });
    });
    
    // Send message function
    function sendMessage() {
        const message = messageInput.value.trim();
        if (!message) return;
        
        // Get current time
        const now = new Date();
        const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        // Create user message
        appendMessage(message, 'user', timeString);
        
        // Clear input and reset height
        messageInput.value = '';
        messageInput.style.height = 'auto';
        sendButton.disabled = true;
        
        // Scroll to bottom
        scrollToBottom();
        
        // Show typing indicator
        showTypingIndicator();
        
        // Simulate bot response after a delay
        setTimeout(() => {
            // Remove typing indicator
            removeTypingIndicator();
            
            // Add bot response
            const botResponse = getBotResponse(message);
            appendMessage(botResponse, 'bot', timeString);
            
            // Update message count
            updateMessageCount();
            
            // Scroll to bottom
            scrollToBottom();
            
            // Update suggestion chips
            updateSuggestionChips(message);
        }, Math.random() * 1000 + 1000); // Random delay between 1-2 seconds
    }
    
    // Append message to chat
    function appendMessage(content, type, time) {
        const messageEl = document.createElement('div');
        messageEl.className = `message ${type}`;
        messageEl.setAttribute('data-timestamp', time);
        
        let actionsHtml = '';
        if (type === 'bot') {
            actionsHtml = `
                <div class="message-actions">
                    <button class="action-btn" title="Copy to clipboard" onclick="copyToClipboard(this)">
                        <i class="bi bi-clipboard"></i>
                    </button>
                    <button class="action-btn" title="Rate response">
                        <i class="bi bi-hand-thumbs-up"></i>
                    </button>
                </div>
            `;
        }
        
        messageEl.innerHTML = `
            <div class="message-avatar">
                <i class="bi ${type === 'bot' ? 'bi-robot' : 'bi-person'}"></i>
            </div>
            <div class="message-content">
                <div class="message-bubble">
                    <p>${content}</p>
                </div>
                <div class="message-time">${time}</div>
                ${actionsHtml}
            </div>
        `;
        
        chatMessages.appendChild(messageEl);
    }
    
    // Show typing indicator
    function showTypingIndicator() {
        const typingEl = document.createElement('div');
        typingEl.className = 'message bot typing-indicator';
        typingEl.id = 'typingIndicator';
        typingEl.innerHTML = `
            <div class="message-avatar">
                <i class="bi bi-robot"></i>
            </div>
            <div class="message-content">
                <div class="message-bubble">
                    <div class="typing-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        `;
        
        chatMessages.appendChild(typingEl);
        scrollToBottom();
    }
    
    // Remove typing indicator
    function removeTypingIndicator() {
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
    
    // Get context-aware bot response
    function getBotResponse(message) {
        const path = window.location.pathname;
        const sessionId = path.substring(path.lastIndexOf('/') + 1);
        
        if (sessionId === "session-1234-abcd") {
            // Customer Support bot responses
            if (message.toLowerCase().includes("refund") || message.toLowerCase().includes("return")) {
                return "Based on our previous conversation, I can confirm that partial refunds are available. Would you like me to provide the detailed return process now?";
            }
            if (message.toLowerCase().includes("order") || message.toLowerCase().includes("delivery")) {
                return "Your order #12345 is still on track for delivery tomorrow. The carrier's tracking number is TRK78901234, in case you'd like to follow its progress.";
            }
        } else if (sessionId === "session-9012-ijkl") {
            // Sales Assistant bot responses
            if (message.toLowerCase().includes("price") || message.toLowerCase().includes("cost") || message.toLowerCase().includes("discount")) {
                return "Our Professional plan is $199/month billed annually or $249/month billed monthly. We also offer a 15% discount for non-profits and educational institutions. Would you like me to send you our detailed pricing sheet?";
            }
            if (message.toLowerCase().includes("feature") || message.toLowerCase().includes("include")) {
                return "The Professional plan includes: 20 user seats, priority email support, advanced analytics, custom integrations, unlimited projects, 100GB storage, and all our premium features. Is there a specific feature you're interested in?";
            }
        }
        
        // Generic responses if no contextual match
        const responses = [
            "I understand your question. Let me get you some more information about that.",
            "Thanks for providing those details. Based on what you've shared, here's what I can tell you.",
            "I appreciate your question. Here's what you need to know about that.",
            "That's a good point. Let me address that for you specifically.",
            "I can definitely help with that. Here's the information you're looking for."
        ];
        
        return responses[Math.floor(Math.random() * responses.length)];
    }
    
    // Update suggestion chips based on conversation
    function updateSuggestionChips(lastMessage) {
        const container = document.getElementById('suggestionChips');
        
        // Different suggestions based on context
        const path = window.location.pathname;
        const sessionId = path.substring(path.lastIndexOf('/') + 1);
        
        let suggestions = [];
        
        if (sessionId === "session-1234-abcd") {
            // Customer support suggestions
            if (lastMessage.toLowerCase().includes("refund")) {
                suggestions = [
                    "What's the refund policy?",
                    "How long do refunds take?",
                    "Can I return just part of my order?"
                ];
            } else if (lastMessage.toLowerCase().includes("delivery")) {
                suggestions = [
                    "Can I change delivery address?",
                    "What if I'm not home?",
                    "Do you offer express shipping?"
                ];
            } else {
                suggestions = [
                    "Track my order",
                    "Return policy",
                    "Speak to a human agent"
                ];
            }
        } else if (sessionId === "session-9012-ijkl") {
            // Sales suggestions
            if (lastMessage.toLowerCase().includes("price") || lastMessage.toLowerCase().includes("plan")) {
                suggestions = [
                    "Enterprise pricing",
                    "Annual vs Monthly",
                    "Available discounts"
                ];
            } else {
                suggestions = [
                    "Product features",
                    "Free trial options",
                    "Schedule a demo"
                ];
            }
        } else {
            // Default suggestions
            suggestions = [
                "How can I get started?",
                "What services do you offer?",
                "I need technical support"
            ];
        }
        
        // Clear and update suggestions
        container.innerHTML = '';
        suggestions.forEach(text => {
            const chip = document.createElement('button');
            chip.className = 'suggestion-chip';
            chip.textContent = text;
            chip.addEventListener('click', function() {
                messageInput.value = this.textContent;
                messageInput.dispatchEvent(new Event('input'));
                sendMessage();
            });
            container.appendChild(chip);
        });
    }
    
    // Update message count in the info panel
    function updateMessageCount() {
        if (messageCount) {
            const count = document.querySelectorAll('.message:not(.typing-indicator)').length;
            messageCount.textContent = count;
        }
    }
    
    // Start chat duration timer
    function startChatDurationTimer() {
        if (chatDuration) {
            const startTime = new Date();
            setInterval(() => {
                const now = new Date();
                const diffMs = now - startTime;
                const diffMins = Math.floor(diffMs / 60000);
                chatDuration.textContent = `${diffMins}m`;
            }, 60000); // Update every minute
        }
    }
    
    // Improved scroll to bottom function
    function scrollToBottom() {
        chatMessages.scrollTo({
            top: chatMessages.scrollHeight,
            behavior: 'smooth'
        });
        
        scrollIndicator.classList.remove('visible');
    }
    
    // Generate multiple messages for testing scroll
    window.generateTestMessages = function(count = 20) {
        const now = new Date();
        const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        for (let i = 0; i < count; i++) {
            if (i % 2 === 0) {
                appendMessage(`This is test message ${i+1} from the user. Testing scroll functionality.`, 'user', timeString);
            } else {
                appendMessage(`This is test message ${i+1} from the bot. Responding to test the scrolling feature.`, 'bot', timeString);
            }
        }
        
        updateMessageCount();
    };
});

// Copy message to clipboard
function copyToClipboard(button) {
    const messageBubble = button.closest('.message-content').querySelector('.message-bubble p');
    const text = messageBubble.textContent;
    
    navigator.clipboard.writeText(text).then(() => {
        // Visual feedback
        const originalIcon = button.innerHTML;
        button.innerHTML = '<i class="bi bi-check"></i>';
        setTimeout(() => {
            button.innerHTML = originalIcon;
        }, 2000);
    });
}
</script>
}