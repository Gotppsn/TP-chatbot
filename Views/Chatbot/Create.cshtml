@model AIHelpdeskSupport.Models.Chatbot
@{
    ViewData["Title"] = "Create Chatbot";
    
    // Get departments list from ViewBag
    var allDepartments = ViewBag.Departments as List<string> ?? new List<string>();
}

<div class="page-header">
    <div>
        <h1 class="page-title">Create New Chatbot</h1>
        <p class="text-muted">Configure your AI-powered chatbot for customer support</p>
    </div>
    <div class="page-actions">
        <a href="/Chatbot" class="btn btn-outline">
            <i class="bi bi-arrow-left"></i>
            <span>Back to List</span>
        </a>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <form asp-action="Create" method="post">
            <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
            
            <div class="form-group mb-4">
                <label asp-for="Name" class="form-label">Chatbot Name <span class="required">*</span></label>
                <input asp-for="Name" class="form-control" placeholder="e.g. Customer Support Bot" required />
                <div class="form-text">
                    Give your chatbot a descriptive name that identifies its purpose
                </div>
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            
            <div class="form-group mb-4">
                <label asp-for="FlowiseId" class="form-label">Flowise Chatflow ID <span class="required">*</span></label>
                <input type="text" asp-for="FlowiseId" class="form-control" placeholder="e.g. 275a8c78-fa28-494c-98a5" required />
                <div class="form-text">
                    Enter your Flowise Chatflow ID to connect this chatbot to your AI workflow
                </div>
                <span asp-validation-for="FlowiseId" class="text-danger"></span>
            </div>
            
            <div class="form-group mb-4">
                <label asp-for="Department" class="form-label">Department <span class="required">*</span></label>
                <select asp-for="Department" class="form-control">
                    @foreach (var department in allDepartments)
                    {
                        <option value="@department">@department</option>
                    }
                </select>
                <div class="form-text">
                    Select the department this chatbot belongs to
                </div>
                <span asp-validation-for="Department" class="text-danger"></span>
            </div>
            
            <div class="form-group mb-4">
                <label asp-for="AiModel" class="form-label">AI Model</label>
                <select asp-for="AiModel" class="form-control">
                    <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                    <option value="gpt-4">GPT-4</option>
                    <option value="claude-3-opus">Claude 3 Opus</option>
                    <option value="claude-3-sonnet">Claude 3 Sonnet</option>
                </select>
                <div class="form-text">
                    Select the AI model that powers this chatbot
                </div>
                <span asp-validation-for="AiModel" class="text-danger"></span>
            </div>
            
            <div class="form-group mb-4">
                <label asp-for="Description" class="form-label">Description</label>
                <textarea asp-for="Description" class="form-control" rows="3" placeholder="Describe what this chatbot will help with..."></textarea>
                <div class="form-text">
                    Add details about what this chatbot does and which departments it serves
                </div>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            
            <div class="form-group mb-4">
                <label asp-for="AccessType" class="form-label">Access Control</label>
                <select asp-for="AccessType" id="accessType" class="form-control">
                    <option value="All">All Users</option>
                    <option value="Specific">Specific Users Only</option>
                </select>
                <div class="form-text">
                    Control who can access this chatbot
                </div>
            </div>
            
            <!-- User Access Container (Initially Hidden) -->
            <div id="userAccessContainer" class="mt-3 d-none">
                <div class="input-group mb-3">
                    <input type="text" id="userSearch" class="form-control" placeholder="Search users...">
                    <button type="button" id="addUserBtn" class="btn btn-outline-primary">
                        <i class="bi bi-plus"></i> Add
                    </button>
                </div>

                <div class="selected-users-container">
                    <div class="selected-users" id="selectedUsers">
                        <!-- Selected users will appear here -->
                    </div>
                </div>
            </div>
            
            <div class="form-group mb-4">
                <div class="form-switch">
                    <input asp-for="IsActive" class="form-switch-input" checked />
                    <label asp-for="IsActive" class="form-switch-label">Active</label>
                </div>
                <div class="form-text">Enable this chatbot immediately after creation</div>
            </div>
            
            <div class="form-buttons">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-check-lg"></i>
                    Create Chatbot
                </button>
            </div>
        </form>
    </div>
</div>

<!-- User Search Results Modal -->
<div class="modal" id="userSearchModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select Users</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="search-input-container mb-3">
                    <input type="text" id="modalUserSearch" class="form-control" placeholder="Filter users...">
                </div>
                <div class="search-results-container">
                    <div id="userSearchResults" class="user-search-results">
                        <!-- Results will be populated by JS -->
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Access type toggle
            const accessTypeSelect = document.getElementById('accessType');
            const userAccessContainer = document.getElementById('userAccessContainer');

            accessTypeSelect.addEventListener('change', function() {
                if (this.value === 'Specific') {
                    userAccessContainer.classList.remove('d-none');
                } else {
                    userAccessContainer.classList.add('d-none');
                }
            });

            // User search and selection
            const userSearch = document.getElementById('userSearch');
            const modalUserSearch = document.getElementById('modalUserSearch');
            const addUserBtn = document.getElementById('addUserBtn');
            const userSearchModal = document.getElementById('userSearchModal');
            const userSearchResults = document.getElementById('userSearchResults');
            const selectedUsers = document.getElementById('selectedUsers');

            if (addUserBtn) {
                addUserBtn.addEventListener('click', function() {
                    // Clear previous results
                    userSearchResults.innerHTML = '';

                    // Clear modal search
                    if (modalUserSearch) modalUserSearch.value = '';

                    // Get selected users
                    const selectedUserIds = Array.from(
                        document.querySelectorAll('.selected-user-item input[name="AllowedUsers"]')
                    ).map(input => input.value);

                    // Show loading state
                    userSearchResults.innerHTML = '<div class="text-center py-3"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">Loading users...</p></div>';

                    // Fetch users from API endpoint
                    fetch('/api/users/getall')
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            userSearchResults.innerHTML = '';
                            
                            // Filter out already selected users
                            const availableUsers = data.filter(u => !selectedUserIds.includes(u.userName));
                            
                            if (availableUsers.length === 0) {
                                userSearchResults.innerHTML = `
                                    <div class="no-results-message">
                                        <i class="bi bi-info-circle"></i>
                                        <p>All users have been added or no users available.</p>
                                    </div>
                                `;
                                return;
                            }

                            // Create user elements
                            availableUsers.forEach(function(user) {
                                const userEl = document.createElement('div');
                                userEl.className = 'user-search-item';
                                userEl.dataset.username = user.userName;
                                userEl.dataset.fullname = user.firstName + ' ' + user.lastName;

                                const userInfo = document.createElement('div');
                                userInfo.className = 'user-info';

                                const userName = document.createElement('div');
                                userName.className = 'user-name';
                                userName.textContent = user.firstName + ' ' + user.lastName;

                                const userUsername = document.createElement('div');
                                userUsername.className = 'user-username';
                                userUsername.textContent = '@@' + user.userName;

                                const addButton = document.createElement('button');
                                addButton.type = 'button';
                                addButton.className = 'btn btn-sm btn-outline-primary Add';
                                addButton.setAttribute('data-username', user.userName);
                                addButton.textContent = 'Add';

                                userInfo.appendChild(userName);
                                userInfo.appendChild(userUsername);
                                userEl.appendChild(userInfo);
                                userEl.appendChild(addButton);

                                userSearchResults.appendChild(userEl);
                            });
                        })
                        .catch(error => {
                            console.error('Error fetching users:', error);
                            userSearchResults.innerHTML = `
                                <div class="no-results-message">
                                    <i class="bi bi-exclamation-triangle"></i>
                                    <p>Error loading users: ${error.message}</p>
                                </div>
                            `;
                        });

                    // Show modal
                    userSearchModal.classList.add('show');
                    document.body.classList.add('modal-open');
                });
            }

            // Direct event handler for Add buttons
            document.addEventListener('click', function(e) {
                if (e.target && e.target.classList.contains('Add')) {
                    const username = e.target.getAttribute('data-username');
                    if (username) {
                        addSelectedUser(username);
                        e.target.disabled = true;
                        e.target.textContent = 'Added';
                    }
                }
            });

            function addSelectedUser(username) {
                // Check if user is already selected
                const existingUsers = Array.from(document.querySelectorAll('.selected-user-item input[name="AllowedUsers"]'))
                    .map(input => input.value);

                if (existingUsers.includes(username)) {
                    return;
                }

                const userItem = document.createElement('div');
                userItem.className = 'selected-user-item';

                const span = document.createElement('span');
                span.textContent = username;

                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'AllowedUsers';
                input.value = username;

                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'btn-remove';

                const icon = document.createElement('i');
                icon.className = 'bi bi-x';

                removeBtn.appendChild(icon);
                userItem.appendChild(span);
                userItem.appendChild(input);
                userItem.appendChild(removeBtn);

                selectedUsers.appendChild(userItem);

                // Add remove event listener
                removeBtn.addEventListener('click', function() {
                    userItem.remove();
                });
            }

            // Close modal buttons
            document.querySelectorAll('.btn-close, [data-bs-dismiss="modal"]').forEach(function(button) {
                button.addEventListener('click', function() {
                    const modal = this.closest('.modal');
                    modal.classList.remove('show');
                    document.body.classList.remove('modal-open');
                });
            });

            // Close modal on outside click
            document.querySelectorAll('.modal').forEach(function(modal) {
                modal.addEventListener('click', function(event) {
                    if (event.target === this) {
                        this.classList.remove('show');
                        document.body.classList.remove('modal-open');
                    }
                });
            });
        });
    </script>
}

@section Styles {
    <style>
        /* Form Styling */
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-label {
            font-weight: 500;
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .form-control {
            padding: 0.625rem 0.875rem;
            border-radius: var(--border-radius);
            border: 1px solid var(--color-gray-300);
            width: 100%;
            transition: all 0.2s ease;
        }
        
        .form-control:focus {
            border-color: var(--color-primary);
            box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.1);
            outline: none;
        }
        
        .form-text {
            font-size: 0.75rem;
            color: var(--color-gray-500);
            margin-top: 0.5rem;
        }

        /* Form Switch */
        .form-switch {
            display: flex;
            align-items: center;
        }
        
        .form-switch-input {
            appearance: none;
            width: 3.25rem;
            height: 1.75rem;
            border-radius: 100px;
            background-color: var(--color-gray-300);
            position: relative;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        .form-switch-input:checked {
            background-color: var(--color-primary);
        }
        
        .form-switch-input::before {
            content: '';
            position: absolute;
            width: 1.25rem;
            height: 1.25rem;
            border-radius: 50%;
            background-color: white;
            top: 0.25rem;
            left: 0.25rem;
            transition: transform 0.3s ease;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);
        }
        
        .form-switch-input:checked::before {
            transform: translateX(1.5rem);
        }
        
        .form-switch-label {
            margin-left: 0.75rem;
            font-weight: 500;
            font-size: 0.9375rem;
            cursor: pointer;
        }
        
        /* User access styles */
        .selected-users-container {
            border: 1px solid var(--color-gray-300);
            border-radius: var(--border-radius);
            padding: 0.5rem;
            background-color: var(--color-gray-50);
            min-height: 100px;
            max-height: 200px;
            overflow-y: auto;
        }

        .selected-users {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .selected-user-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.25rem 0.5rem;
            background-color: rgba(13, 110, 253, 0.1);
            border-radius: 100px;
            font-size: 0.875rem;
        }

        .btn-remove {
            background: none;
            border: none;
            padding: 0;
            font-size: 1rem;
            line-height: 1;
            color: var(--color-gray-500);
            cursor: pointer;
        }

        .btn-remove:hover {
            color: var(--color-danger);
        }
        
        /* User search modal styles */
        .user-search-results {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            max-height: 300px;
            overflow-y: auto;
        }

        .user-search-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            border-radius: var(--border-radius);
            border: 1px solid var(--color-gray-200);
            background-color: var(--color-gray-50);
            transition: all 0.2s ease;
            margin-bottom: 0.5rem;
        }

        .user-search-item:hover {
            background-color: var(--color-gray-100);
            border-color: var(--color-gray-300);
        }

        .no-results-message {
            text-align: center;
            padding: 2rem 0;
            color: var(--color-gray-500);
        }

        .no-results-message i {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            display: block;
        }

        .user-info {
            display: flex;
            flex-direction: column;
        }

        .user-name {
            font-weight: 500;
        }

        .user-username {
            font-size: 0.75rem;
            color: var(--color-gray-500);
        }
        
        /* Form Buttons */
        .form-buttons {
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--color-gray-200);
            display: flex;
            justify-content: flex-end;
        }
        
        /* Required Field */
        .required {
            color: var(--color-danger);
        }
        
        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1050;
            overflow: auto;
        }

        .modal.show {
            display: block;
        }

        .modal-dialog {
            margin: 1.75rem auto;
            max-width: 600px;
        }

        .modal-content {
            position: relative;
            background-color: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-lg);
            display: flex;
            flex-direction: column;
            outline: 0;
        }

        .modal-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid var(--color-gray-200);
        }

        .modal-title {
            font-size: 1.125rem;
            font-weight: 600;
            margin: 0;
        }

        .btn-close {
            padding: 0;
            background: transparent;
            border: 0;
            font-size: 1.5rem;
            line-height: 1;
            color: var(--color-gray-500);
            cursor: pointer;
        }

        .modal-body {
            position: relative;
            flex: 1 1 auto;
            padding: 1.5rem;
        }

        .modal-footer {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding: 1.25rem 1.5rem;
            border-top: 1px solid var(--color-gray-200);
            gap: 0.75rem;
        }
        
        /* Helper classes */
        .d-none {
            display: none !important;
        }
        
        .mt-3 {
            margin-top: 1rem;
        }
        
        .mb-3 {
            margin-bottom: 1rem;
        }
        
        .text-center {
            text-align: center;
        }
        
        .py-3 {
            padding-top: 1rem;
            padding-bottom: 1rem;
        }
    </style>
}