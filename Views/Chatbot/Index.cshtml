@model IEnumerable<AIHelpdeskSupport.Models.Chatbot>
@{
    ViewData["Title"] = "Chatbots";
}

<div class="page-header">
    <div>
        <h1 class="page-title">Chatbots</h1>
        <p class="text-muted">Manage and monitor your AI-powered chatbots</p>
    </div>
    <div class="page-actions">
        <div class="filter-wrapper">
            <button class="btn btn-outline dropdown-toggle">
                <i class="bi bi-funnel"></i>
                <span>Filter</span>
            </button>
            <div class="dropdown-menu">
                <a class="dropdown-item active" href="#">All Chatbots</a>
                <a class="dropdown-item" href="#">Active Only</a>
                <a class="dropdown-item" href="#">Inactive Only</a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="#">Customer Service</a>
                <a class="dropdown-item" href="#">IT Support</a>
                <a class="dropdown-item" href="#">Sales</a>
                <a class="dropdown-item" href="#">Billing</a>
            </div>
        </div>
        <a href="/Chatbot/Create" class="btn btn-primary">
            <i class="bi bi-plus-lg"></i>
            <span>Create Chatbot</span>
        </a>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <div class="card-header-actions">
            <div class="search-box">
                <i class="bi bi-search search-icon"></i>
                <input type="text" id="chatbotSearch" class="search-input" placeholder="Search chatbots...">
            </div>
            <div class="view-options">
                <button class="btn-icon view-option active" id="gridView" title="Grid View">
                    <i class="bi bi-grid"></i>
                </button>
                <button class="btn-icon view-option" id="listView" title="List View">
                    <i class="bi bi-list-ul"></i>
                </button>
            </div>
        </div>
    </div>
    
    <div class="card-body">
        <!-- Grid View (Default) -->
        <div class="chatbots-grid" id="chatbotsGridView">
            @foreach (var chatbot in Model)
            {
                <div class="chatbot-card animate-card">
                    <div class="chatbot-card-header">
                        @{
                            string iconClass = chatbot.Department switch
                            {
                                "Customer Service" => "bi-headset",
                                "IT Support" => "bi-pc-display",
                                "Sales" => "bi-currency-dollar",
                                "Billing" => "bi-credit-card",
                                "Technical" => "bi-wrench",
                                _ => "bi-robot"
                            };
                            
                            string colorClass = chatbot.Department switch
                            {
                                "Customer Service" => "primary",
                                "IT Support" => "info",
                                "Sales" => "warning",
                                "Billing" => "danger",
                                "Technical" => "success",
                                _ => "secondary"
                            };
                        }
                        <div class="chatbot-avatar @colorClass">
                            <i class="bi @iconClass"></i>
                        </div>
                        <div class="chatbot-status @(chatbot.IsActive ? "active" : "inactive")">
                            @(chatbot.IsActive ? "Active" : "Inactive")
                        </div>
                    </div>
                    
                    <div class="chatbot-card-body">
                        <h3 class="chatbot-name">@chatbot.Name</h3>
                        <div class="chatbot-model">@chatbot.AiModel</div>
                        
                        <div class="chatbot-details">
                            <div class="chatbot-detail">
                                <div class="detail-label">Department</div>
                                <div class="detail-value">@chatbot.Department</div>
                            </div>
                        </div>
                        
                        <div class="chatbot-description">
                            @if (string.IsNullOrEmpty(chatbot.Description))
                            {
                                <span class="text-muted">No description provided</span>
                            }
                            else
                            {
                                @chatbot.Description
                            }
                        </div>
                    </div>
                    
                    <div class="chatbot-stats">
                        <div class="chatbot-stat">
                            <div class="stat-value">254</div>
                            <div class="stat-label">Conversations</div>
                        </div>
                        <div class="chatbot-stat">
                            <div class="stat-value">93%</div>
                            <div class="stat-label">Success Rate</div>
                        </div>
                        <div class="chatbot-stat">
                            <div class="stat-value">2.6s</div>
                            <div class="stat-label">Avg. Response</div>
                        </div>
                    </div>
                    
                    <div class="chatbot-card-footer">
                        <button class="btn btn-sm btn-outline-primary" onclick="location.href='/Chatbot/Edit/@chatbot.Id'">
                            <i class="bi bi-pencil"></i>
                            <span>Edit</span>
                        </button>
                        <button class="btn btn-sm btn-outline" onclick="location.href='/Chatbot/Test/@chatbot.Id'">
                            <i class="bi bi-chat-dots"></i>
                            <span>Test</span>
                        </button>
                        <div class="dropdown ms-auto">
                            <button class="btn btn-sm btn-icon dropdown-toggle">
                                <i class="bi bi-three-dots-vertical"></i>
                            </button>
                            <div class="dropdown-menu dropdown-menu-end">
                                <a class="dropdown-item" href="/Chatbot/Details/@chatbot.Id">
                                    <i class="bi bi-info-circle me-2"></i> View Details
                                </a>
                                <a class="dropdown-item" href="/ChatWidget/Embed/@chatbot.Id">
                                    <i class="bi bi-code-slash me-2"></i> Get Embed Code
                                </a>
                                <a class="dropdown-item" href="/Analytics/Chatbot/@chatbot.Id">
                                    <i class="bi bi-graph-up me-2"></i> View Analytics
                                </a>
                                <div class="dropdown-divider"></div>
                                <form action="/Chatbot/ToggleStatus/@chatbot.Id" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="dropdown-item @(chatbot.IsActive ? "text-warning" : "text-success")">
                                        <i class="bi @(chatbot.IsActive ? "bi-pause-circle" : "bi-play-circle") me-2"></i>
                                        @(chatbot.IsActive ? "Deactivate" : "Activate")
                                    </button>
                                </form>
                                <div class="dropdown-divider"></div>
                                <form action="/Chatbot/Delete/@chatbot.Id" method="post" class="d-inline" 
                                     onsubmit="return confirm('Are you sure you want to delete this chatbot?');">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="dropdown-item text-danger">
                                        <i class="bi bi-trash me-2"></i> Delete
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
            
            <!-- Create New Chatbot Card -->
            <div class="chatbot-card create-card animate-card" onclick="location.href='/Chatbot/Create'">
                <div class="create-card-content">
                    <div class="create-icon">
                        <i class="bi bi-plus-lg"></i>
                    </div>
                    <div class="create-text">Create New Chatbot</div>
                </div>
            </div>
        </div>
        
        <!-- List View (Hidden by default) -->
        <div class="chatbots-list" id="chatbotsListView" style="display: none;">
            <table class="table">
                <thead>
                    <tr>
                        <th>Chatbot</th>
                        <th>Department</th>
                        <th>Model</th>
                        <th>Conversations</th>
                        <th>Success Rate</th>
                        <th>Avg. Response</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var chatbot in Model)
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    @{
                                        string listIconClass = chatbot.Department switch
                                        {
                                            "Customer Service" => "bi-headset",
                                            "IT Support" => "bi-pc-display",
                                            "Sales" => "bi-currency-dollar",
                                            "Billing" => "bi-credit-card",
                                            "Technical" => "bi-wrench",
                                            _ => "bi-robot"
                                        };
                                        
                                        string listColorClass = chatbot.Department switch
                                        {
                                            "Customer Service" => "primary",
                                            "IT Support" => "info",
                                            "Sales" => "warning",
                                            "Billing" => "danger",
                                            "Technical" => "success",
                                            _ => "secondary"
                                        };
                                    }
                                    <div class="list-avatar @listColorClass">
                                        <i class="bi @listIconClass"></i>
                                    </div>
                                    <div class="list-chatbot-info">
                                        <div class="list-chatbot-name">@chatbot.Name</div>
                                        <div class="list-chatbot-model">@chatbot.AiModel</div>
                                    </div>
                                </div>
                            </td>
                            <td>@chatbot.Department</td>
                            <td>@chatbot.AiModel</td>
                            <td>254</td>
                            <td>93%</td>
                            <td>2.6s</td>
                            <td>
                                <span class="badge @(chatbot.IsActive ? "bg-success" : "bg-secondary")">
                                    @(chatbot.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td>
                                <div class="list-actions">
                                    <button class="btn-icon" onclick="location.href='/Chatbot/Edit/@chatbot.Id'" title="Edit">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn-icon" onclick="location.href='/Chatbot/Test/@chatbot.Id'" title="Test">
                                        <i class="bi bi-chat-dots"></i>
                                    </button>
                                    <div class="dropdown">
                                        <button class="btn-icon dropdown-toggle">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <div class="dropdown-menu dropdown-menu-end">
                                            <a class="dropdown-item" href="/Chatbot/Details/@chatbot.Id">
                                                <i class="bi bi-info-circle me-2"></i> View Details
                                            </a>
                                            <a class="dropdown-item" href="/ChatWidget/Embed/@chatbot.Id">
                                                <i class="bi bi-code-slash me-2"></i> Get Embed Code
                                            </a>
                                            <a class="dropdown-item" href="/Analytics/Chatbot/@chatbot.Id">
                                                <i class="bi bi-graph-up me-2"></i> View Analytics
                                            </a>
                                            <div class="dropdown-divider"></div>
                                            <form action="/Chatbot/ToggleStatus/@chatbot.Id" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="dropdown-item @(chatbot.IsActive ? "text-warning" : "text-success")">
                                                    <i class="bi @(chatbot.IsActive ? "bi-pause-circle" : "bi-play-circle") me-2"></i>
                                                    @(chatbot.IsActive ? "Deactivate" : "Activate")
                                                </button>
                                            </form>
                                            <div class="dropdown-divider"></div>
                                            <form action="/Chatbot/Delete/@chatbot.Id" method="post" class="d-inline"
                                                  onsubmit="return confirm('Are you sure you want to delete this chatbot?');">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="dropdown-item text-danger">
                                                    <i class="bi bi-trash me-2"></i> Delete
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize view toggle
            const gridView = document.getElementById('gridView');
            const listView = document.getElementById('listView');
            const chatbotsGridView = document.getElementById('chatbotsGridView');
            const chatbotsListView = document.getElementById('chatbotsListView');
            
            gridView.addEventListener('click', function() {
                gridView.classList.add('active');
                listView.classList.remove('active');
                chatbotsGridView.style.display = 'grid';
                chatbotsListView.style.display = 'none';
            });
            
            listView.addEventListener('click', function() {
                listView.classList.add('active');
                gridView.classList.remove('active');
                chatbotsListView.style.display = 'block';
                chatbotsGridView.style.display = 'none';
            });
            
            // Search functionality
            const chatbotSearch = document.getElementById('chatbotSearch');
            
            chatbotSearch.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                
                // Search in grid view
                const chatbotCards = document.querySelectorAll('.chatbot-card:not(.create-card)');
                chatbotCards.forEach(card => {
                    const chatbotName = card.querySelector('.chatbot-name').textContent.toLowerCase();
                    const chatbotModel = card.querySelector('.chatbot-model').textContent.toLowerCase();
                    const chatbotDept = card.querySelector('.detail-value').textContent.toLowerCase();
                    
                    if (chatbotName.includes(searchTerm) || chatbotModel.includes(searchTerm) || chatbotDept.includes(searchTerm)) {
                        card.style.display = 'flex';
                    } else {
                        card.style.display = 'none';
                    }
                });
                
                // Search in list view
                const chatbotRows = document.querySelectorAll('#chatbotsListView tbody tr');
                chatbotRows.forEach(row => {
                    const chatbotName = row.querySelector('.list-chatbot-name').textContent.toLowerCase();
                    const chatbotModel = row.querySelector('.list-chatbot-model').textContent.toLowerCase();
                    const chatbotDept = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                    
                    if (chatbotName.includes(searchTerm) || chatbotModel.includes(searchTerm) || chatbotDept.includes(searchTerm)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
            
            // Initialize dropdowns
            document.querySelectorAll('.dropdown-toggle').forEach(toggle => {
                toggle.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const dropdown = this.nextElementSibling;
                    
                    // Close all other open dropdowns first
                    document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
                        if (menu !== dropdown) {
                            menu.classList.remove('show');
                        }
                    });
                    
                    // Toggle this dropdown
                    dropdown.classList.toggle('show');
                });
            });
            
            // Close dropdowns when clicking outside
            document.addEventListener('click', function(event) {
                const dropdowns = document.querySelectorAll('.dropdown-menu.show');
                dropdowns.forEach(dropdown => {
                    if (!dropdown.previousElementSibling.contains(event.target)) {
                        dropdown.classList.remove('show');
                    }
                });
            });
            
            // Handle dropdown item selection
            document.querySelectorAll('.dropdown-item').forEach(item => {
                item.addEventListener('click', function(e) {
                    // Don't prevent default for submit buttons in forms
                    if (!this.closest('form')) {
                        e.preventDefault();
                    }
                    
                    // If it's a filter dropdown, update active state
                    const filterDropdown = this.closest('.page-actions .dropdown-menu');
                    if (filterDropdown) {
                        filterDropdown.querySelectorAll('.dropdown-item').forEach(el => {
                            el.classList.remove('active');
                        });
                        this.classList.add('active');
                        
                        // Update dropdown button text
                        const dropdownButton = this.closest('.dropdown').querySelector('.dropdown-toggle span');
                        dropdownButton.textContent = this.textContent;
                    }
                    
                    // Hide dropdown
                    this.closest('.dropdown-menu').classList.remove('show');
                });
            });
        });
    </script>
}

@section Styles {
    <style>
        /* Card Header Actions */
        .card-header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
        }
        
        .search-box {
            position: relative;
            width: 300px;
        }
        
        .search-icon {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--color-gray-500);
        }
        
        .search-input {
            width: 100%;
            padding: 0.5rem 1rem 0.5rem 2rem;
            border: 1px solid var(--color-gray-300);
            border-radius: var(--border-radius);
            font-size: 0.875rem;
        }
        
        .view-options {
            display: flex;
            gap: 0.5rem;
        }
        
        .view-option {
            width: 36px;
            height: 36px;
        }
        
        .view-option.active {
            background-color: var(--color-gray-100);
            color: var(--color-primary);
        }
        
        /* Chatbots Grid */
        .chatbots-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 1.5rem;
            margin-top: 1rem;
        }
        
        .chatbot-card {
            background-color: white;
            border-radius: var(--border-radius);
            border: 1px solid var(--color-gray-200);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            animation: fadeInUp 0.5s ease forwards;
            opacity: 0;
            min-height: 400px; /* Set a minimum height */
        }
        
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .chatbot-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
            border-color: var(--color-gray-300);
        }
        
        .chatbot-card-header {
            padding: 1.25rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .chatbot-avatar {
            width: 48px;
            height: 48px;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
        }
        
        .chatbot-avatar.primary { background-color: rgba(13, 110, 253, 0.1); color: var(--color-primary); }
        .chatbot-avatar.info { background-color: rgba(13, 202, 240, 0.1); color: var(--color-info); }
        .chatbot-avatar.warning { background-color: rgba(255, 193, 7, 0.1); color: var(--color-warning); }
        .chatbot-avatar.danger { background-color: rgba(220, 53, 69, 0.1); color: var(--color-danger); }
        .chatbot-avatar.success { background-color: rgba(32, 201, 151, 0.1); color: var(--color-success); }
        .chatbot-avatar.secondary { background-color: rgba(108, 117, 125, 0.1); color: var(--color-secondary); }
        
        .chatbot-status {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.5rem;
            border-radius: 100px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .chatbot-status.active {
            background-color: rgba(32, 201, 151, 0.1);
            color: var(--color-success);
        }
        
        .chatbot-status.inactive {
            background-color: rgba(108, 117, 125, 0.1);
            color: var(--color-secondary);
        }
        
        .chatbot-card-body {
            padding: 1.25rem;
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .chatbot-name {
            font-size: 1.125rem;
            font-weight: 600;
            margin: 0 0 0.25rem;
        }
        
        .chatbot-model {
            font-size: 0.875rem;
            color: var(--color-gray-500);
            margin-bottom: 1.25rem;
        }
        
        .chatbot-details {
            display: flex;
            margin-bottom: 1rem;
        }
        
        .chatbot-detail {
            min-width: 0;
        }
        
        .detail-label {
            font-size: 0.75rem;
            color: var(--color-gray-500);
            margin-bottom: 0.25rem;
        }
        
        .detail-value {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--color-gray-800);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            padding: 0.25rem 0.5rem;
            background-color: var(--color-gray-100);
            border-radius: 4px;
            display: inline-block;
        }
        
        .chatbot-description {
            font-size: 0.875rem;
            color: var(--color-gray-600);
            line-height: 1.5;
            margin-bottom: 1rem;
            flex: 1;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
        }
        
        /* Stats section as a separate component from card body */
        .chatbot-stats {
            padding: 1rem 1.25rem;
            border-top: 1px solid var(--color-gray-200);
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            background-color: var(--color-gray-50);
        }
        
        .chatbot-stat {
            text-align: center;
        }
        
        .stat-value {
            font-weight: 600;
            font-size: 1rem;
            color: var(--color-gray-800);
        }
        
        .stat-label {
            font-size: 0.75rem;
            color: var(--color-gray-500);
            margin-top: 0.25rem;
        }
        
        .chatbot-card-footer {
            padding: 1rem 1.25rem;
            border-top: 1px solid var(--color-gray-200);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background-color: var(--color-gray-50);
        }
        
        /* Create Card */
        .create-card {
            border: 2px dashed var(--color-gray-300);
            background-color: var(--color-gray-50);
            cursor: pointer;
            min-height: 400px; /* Match height of other cards */
            justify-content: center;
            align-items: center;
        }
        
        .create-card:hover {
            border-color: var(--color-primary);
            background-color: rgba(13, 110, 253, 0.05);
        }
        
        .create-card-content {
            text-align: center;
            padding: 2rem;
        }
        
        .create-icon {
            width: 64px;
            height: 64px;
            border-radius: 50%;
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin: 0 auto 1rem;
            transition: all 0.3s ease;
        }
        
        .create-card:hover .create-icon {
            transform: scale(1.1);
            background-color: var(--color-primary);
            color: white;
        }
        
        .create-text {
            font-weight: 500;
            color: var(--color-gray-700);
        }
        
        .create-card:hover .create-text {
            color: var(--color-primary);
        }
        
        /* List View */
        .chatbots-list {
            overflow-x: auto;
            margin-top: 1rem;
        }
        
        .list-avatar {
            width: 36px;
            height: 36px;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
            margin-right: 1rem;
        }
        
        .list-avatar.primary { background-color: rgba(13, 110, 253, 0.1); color: var(--color-primary); }
        .list-avatar.info { background-color: rgba(13, 202, 240, 0.1); color: var(--color-info); }
        .list-avatar.warning { background-color: rgba(255, 193, 7, 0.1); color: var(--color-warning); }
        .list-avatar.danger { background-color: rgba(220, 53, 69, 0.1); color: var(--color-danger); }
        .list-avatar.success { background-color: rgba(32, 201, 151, 0.1); color: var(--color-success); }
        .list-avatar.secondary { background-color: rgba(108, 117, 125, 0.1); color: var(--color-secondary); }
        
        .list-chatbot-info {
            min-width: 0;
        }
        
        .list-chatbot-name {
            font-weight: 500;
            margin-bottom: 0.25rem;
        }
        
        .list-chatbot-model {
            font-size: 0.75rem;
            color: var(--color-gray-500);
        }
        
        .list-actions {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn-icon {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: var(--border-radius);
            border: 1px solid var(--color-gray-300);
            background-color: transparent;
            color: var(--color-gray-600);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .btn-icon:hover {
            background-color: var(--color-gray-100);
            color: var(--color-gray-800);
        }
        
        .badge {
            font-size: 0.75rem;
            font-weight: 500;
            padding: 0.35em 0.65em;
            border-radius: 100px;
        }
        
        /* Dropdown Menu */
        .dropdown {
            position: relative;
        }
        
        .dropdown-menu {
            position: absolute;
            right: 0;
            top: 100%;
            z-index: 1000;
            min-width: 180px;
            padding: 0.5rem 0;
            margin-top: 0.125rem;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-md);
            border: 1px solid var(--color-gray-200);
            display: none;
        }
        
        .dropdown-menu.show {
            display: block;
            animation: dropdownFadeIn 0.2s ease;
        }
        
        @@keyframes dropdownFadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .dropdown-menu-end {
            right: 0;
            left: auto;
        }
        
        .dropdown-item {
            display: block;
            width: 100%;
            padding: 0.5rem 1rem;
            clear: both;
            text-align: inherit;
            white-space: nowrap;
            background-color: transparent;
            border: 0;
            cursor: pointer;
            text-decoration: none;
            color: var(--color-gray-700);
            font-size: 0.875rem;
            transition: all 0.2s ease;
        }
        
        .dropdown-item:hover {
            background-color: var(--color-gray-100);
        }
        
        .dropdown-divider {
            height: 0;
            margin: 0.5rem 0;
            overflow: hidden;
            border-top: 1px solid var(--color-gray-200);
        }
        
        /* Enhanced Filter Wrapper */
        .filter-wrapper {
            position: relative;
            margin-right: 0.75rem;
        }
        
        /* Table Styles */
        .table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .table th {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 2px solid var(--color-gray-200);
            font-weight: 600;
            font-size: 0.875rem;
            color: var(--color-gray-700);
            white-space: nowrap;
        }
        
        .table td {
            padding: 0.75rem;
            vertical-align: middle;
            border-bottom: 1px solid var(--color-gray-200);
            font-size: 0.875rem;
        }
        
        .table tbody tr:hover {
            background-color: var(--color-gray-50);
        }
        
        /* Responsive Adjustments */
        @@media (max-width: 1200px) {
            .chatbots-grid {
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            }
        }
        
        @@media (max-width: 991px) {
            .chatbots-grid {
                grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            }
        }
        
        @@media (max-width: 768px) {
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .page-actions {
                width: 100%;
                display: flex;
                justify-content: space-between;
            }
            
            .card-header-actions {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .search-box {
                width: 100%;
            }
            
            .view-options {
                margin-top: 0.5rem;
                align-self: flex-end;
            }
            
            .chatbots-grid {
                grid-template-columns: 1fr;
            }
            
            .table-responsive {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
            }
        }
        
        /* Helper Classes */
        .d-flex {
            display: flex;
        }
        
        .align-items-center {
            align-items: center;
        }
        
        .ms-auto {
            margin-left: auto;
        }
        
        .me-2 {
            margin-right: 0.5rem;
        }
        
        .d-inline {
            display: inline;
        }
        
        .text-muted {
            color: var(--color-gray-500);
        }
        
        .text-danger {
            color: var(--color-danger);
        }
        
        .text-success {
            color: var(--color-success);
        }
        
        .text-warning {
            color: var(--color-warning);
        }
        
        .bg-success {
            background-color: var(--color-success);
            color: white;
        }
        
        .bg-secondary {
            background-color: var(--color-secondary);
            color: white;
        }
        
        /* Animation for new cards */
        .animate-card {
            animation-delay: calc(var(--i, 0) * 0.1s);
        }
    </style>
}