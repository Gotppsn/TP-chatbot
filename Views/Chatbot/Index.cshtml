@model IEnumerable<AIHelpdeskSupport.Models.Chatbot>
@{
    ViewData["Title"] = "Chatbots";
}

<div class="page-header">
    <div>
        <h1 class="page-title">Chatbots</h1>
        <p class="text-muted">Manage and monitor your AI-powered chatbots</p>
    </div>
    <div class="page-actions">
        <div class="filter-wrapper">
            <button class="btn btn-outline dropdown-toggle">
                <i class="bi bi-funnel"></i>
                <span>Filter</span>
            </button>
            <div class="dropdown-menu">
                <a class="dropdown-item active" href="#">All Chatbots</a>
                <a class="dropdown-item" href="#">Active Only</a>
                <a class="dropdown-item" href="#">Inactive Only</a>
            </div>
        </div>
        <form asp-action="SyncWithFlowise" method="post" class="d-inline me-2">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-outline-primary">
                <i class="bi bi-arrow-repeat"></i>
                <span>Sync with Flowise</span>
            </button>
        </form>
        <a href="/Chatbot/Create" class="btn btn-primary">
            <i class="bi bi-plus-lg"></i>
            <span>Create Chatbot</span>
        </a>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="card main-card">
    <div class="card-header">
        <div class="card-header-actions">
            <div class="search-box">
                <i class="bi bi-search search-icon"></i>
                <input type="text" id="chatbotSearch" class="search-input" placeholder="Search chatbots...">
            </div>
            <div class="view-options">
                <button class="btn-icon view-option active" id="gridView" title="Grid View">
                    <i class="bi bi-grid"></i>
                </button>
                <button class="btn-icon view-option" id="listView" title="List View">
                    <i class="bi bi-list-ul"></i>
                </button>
            </div>
        </div>
    </div>
    
    <div class="card-body">
        <!-- Grid View (Default) -->
        <div class="chatbots-grid" id="chatbotsGridView">
            @if (Model != null && Model.Any())
            {
                foreach (var chatbot in Model)
                {
                    bool isActive = chatbot.IsActive;
                    if (string.IsNullOrEmpty(chatbot.FlowiseId))
                    {
                        isActive = false;
                    }
                    <div class="chatbot-card animate-card">
                        <div class="chatbot-card-header">
                            <div class="chatbot-avatar @(string.IsNullOrEmpty(chatbot.FlowiseId) ? "warning" : "primary")">
                                <i class="bi bi-robot"></i>
                            </div>
                            <div class="chatbot-status @(isActive ? "active" : "inactive")">
                                @(isActive ? "Active" : "Inactive")
                            </div>
                        </div>
                        
                        <div class="chatbot-card-body">
                            <h3 class="chatbot-name">@chatbot.Name</h3>
                            <div class="chatbot-id">
                                @if (string.IsNullOrEmpty(chatbot.FlowiseId))
                                {
                                    <span class="text-warning"><i class="bi bi-exclamation-triangle"></i> No ID assigned</span>
                                }
                                else
                                {
                                    <span>ID: @chatbot.FlowiseId</span>
                                }
                            </div>
                            
                            <div class="chatbot-description">
                                @if (string.IsNullOrEmpty(chatbot.Description))
                                {
                                    <span class="text-muted">No description provided</span>
                                }
                                else
                                {
                                    @chatbot.Description
                                }
                            </div>
                        </div>
                        
                        <div class="chatbot-stats">
                            <div class="chatbot-stat">
                                <div class="stat-value">@chatbot.Department</div>
                                <div class="stat-label">Department</div>
                            </div>
                            <div class="chatbot-stat">
                                <div class="stat-value">@chatbot.AiModel</div>
                                <div class="stat-label">Model</div>
                            </div>
                            <div class="chatbot-stat">
                                <div class="stat-value">@chatbot.CreatedAt.ToString("MM/dd/yyyy")</div>
                                <div class="stat-label">Created</div>
                            </div>
                        </div>
                        
                        <div class="chatbot-card-footer">
                            <div class="card-actions">
                                <button class="btn btn-sm btn-primary" onclick="location.href='/Chatbot/Edit/@chatbot.Id'">
                                    <i class="bi bi-pencil"></i>
                                    <span>Edit</span>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" onclick="location.href='/Chatbot/Test/@chatbot.Id'">
                                    <i class="bi bi-chat-dots"></i>
                                    <span>Test</span>
                                </button>
                            </div>
                            <div class="dropdown ms-auto">
                                <button class="btn btn-sm btn-icon dropdown-toggle">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <div class="dropdown-menu dropdown-menu-end">
                                    <form action="/Chatbot/ToggleStatus/@chatbot.Id" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="dropdown-item @(isActive ? "text-warning" : "text-success")">
                                            <i class="bi @(isActive ? "bi-pause-circle" : "bi-play-circle") me-2"></i>
                                            @(isActive ? "Deactivate" : "Activate")
                                        </button>
                                    </form>
                                    <div class="dropdown-divider"></div>
                                    <form action="/Chatbot/Delete/@chatbot.Id" method="post" class="d-inline" 
                                         onsubmit="return confirm('Are you sure you want to delete this chatbot?');">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="dropdown-item text-danger">
                                            <i class="bi bi-trash me-2"></i> Delete
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-data-message">
                    <div class="no-data-icon">
                        <i class="bi bi-robot"></i>
                    </div>
                    <h3>No Chatbots Found</h3>
                    <p>Create your first chatbot or sync with Flowise to get started.</p>
                </div>
            }
            
            <!-- Create New Chatbot Card -->
            <div class="chatbot-card create-card animate-card" onclick="location.href='/Chatbot/Create'">
                <div class="create-card-content">
                    <div class="create-icon">
                        <i class="bi bi-plus-lg"></i>
                    </div>
                    <div class="create-text">Create New Chatbot</div>
                </div>
            </div>
        </div>
        
        <!-- List View (Hidden by default) -->
        <div class="chatbots-list" id="chatbotsListView" style="display: none;">
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Flowise ID</th>
                        <th>Department</th>
                        <th>AI Model</th>
                        <th>Created</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var chatbot in Model)
                        {
                            bool isActive = chatbot.IsActive;
                            if (string.IsNullOrEmpty(chatbot.FlowiseId))
                            {
                                isActive = false;
                            }
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="list-avatar @(string.IsNullOrEmpty(chatbot.FlowiseId) ? "warning" : "primary")">
                                            <i class="bi bi-robot"></i>
                                        </div>
                                        <div class="list-chatbot-name">@chatbot.Name</div>
                                    </div>
                                </td>
                                <td>
                                    @if (string.IsNullOrEmpty(chatbot.FlowiseId))
                                    {
                                        <span class="text-warning"><i class="bi bi-exclamation-triangle"></i> Not assigned</span>
                                    }
                                    else
                                    {
                                        <span class="text-monospace">@chatbot.FlowiseId</span>
                                    }
                                </td>
                                <td>@chatbot.Department</td>
                                <td>@chatbot.AiModel</td>
                                <td>@chatbot.CreatedAt.ToString("MM/dd/yyyy")</td>
                                <td>
                                    <span class="badge @(isActive ? "bg-success" : "bg-secondary")">
                                        @(isActive ? "Active" : "Inactive")
                                    </span>
                                </td>
                                <td>
                                    <div class="list-actions">
                                        <div class="action-buttons">
                                            <button class="btn-icon" onclick="location.href='/Chatbot/Edit/@chatbot.Id'" title="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn-icon" onclick="location.href='/Chatbot/Test/@chatbot.Id'" title="Test">
                                                <i class="bi bi-chat-dots"></i>
                                            </button>
                                        </div>
                                        <div class="dropdown">
                                            <button class="btn-icon dropdown-toggle">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>
                                            <div class="dropdown-menu dropdown-menu-end">
                                                <form action="/Chatbot/ToggleStatus/@chatbot.Id" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="dropdown-item @(isActive ? "text-warning" : "text-success")">
                                                        <i class="bi @(isActive ? "bi-pause-circle" : "bi-play-circle") me-2"></i>
                                                        @(isActive ? "Deactivate" : "Activate")
                                                    </button>
                                                </form>
                                                <div class="dropdown-divider"></div>
                                                <form action="/Chatbot/Delete/@chatbot.Id" method="post" class="d-inline"
                                                      onsubmit="return confirm('Are you sure you want to delete this chatbot?');">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="dropdown-item text-danger">
                                                        <i class="bi bi-trash me-2"></i> Delete
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-center py-4">
                                <div class="py-3">
                                    <div class="no-data-icon mb-2">
                                        <i class="bi bi-robot"></i>
                                    </div>
                                    <h3>No Chatbots Found</h3>
                                    <p>Create your first chatbot or sync with Flowise to get started.</p>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize view toggle
            const gridView = document.getElementById('gridView');
            const listView = document.getElementById('listView');
            const chatbotsGridView = document.getElementById('chatbotsGridView');
            const chatbotsListView = document.getElementById('chatbotsListView');
            
            gridView.addEventListener('click', function() {
                gridView.classList.add('active');
                listView.classList.remove('active');
                chatbotsGridView.style.display = 'grid';
                chatbotsListView.style.display = 'none';
            });
            
            listView.addEventListener('click', function() {
                listView.classList.add('active');
                gridView.classList.remove('active');
                chatbotsListView.style.display = 'block';
                chatbotsGridView.style.display = 'none';
            });
            
            // Search functionality
            const chatbotSearch = document.getElementById('chatbotSearch');
            
            chatbotSearch.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                
                // Search in grid view
                const chatbotCards = document.querySelectorAll('.chatbot-card:not(.create-card)');
                chatbotCards.forEach(card => {
                    const chatbotName = card.querySelector('.chatbot-name').textContent.toLowerCase();
                    const chatbotId = card.querySelector('.chatbot-id').textContent.toLowerCase();
                    const chatbotDesc = card.querySelector('.chatbot-description').textContent.toLowerCase();
                    const department = card.querySelector('.chatbot-stat:nth-child(1) .stat-value').textContent.toLowerCase();
                    
                    if (chatbotName.includes(searchTerm) || 
                        chatbotId.includes(searchTerm) || 
                        chatbotDesc.includes(searchTerm) ||
                        department.includes(searchTerm)) {
                        card.style.display = 'flex';
                    } else {
                        card.style.display = 'none';
                    }
                });
                
                // Search in list view
                const chatbotRows = document.querySelectorAll('#chatbotsListView tbody tr');
                chatbotRows.forEach(row => {
                    if (row.cells.length > 1) { // Skip empty state row
                        const chatbotName = row.cells[0].textContent.toLowerCase();
                        const chatbotId = row.cells[1].textContent.toLowerCase();
                        const department = row.cells[2].textContent.toLowerCase();
                        const model = row.cells[3].textContent.toLowerCase();
                        
                        if (chatbotName.includes(searchTerm) || 
                            chatbotId.includes(searchTerm) || 
                            department.includes(searchTerm) ||
                            model.includes(searchTerm)) {
                            row.style.display = '';
                        } else {
                            row.style.display = 'none';
                        }
                    }
                });
            });
            
            // Initialize dropdowns
            document.querySelectorAll('.dropdown-toggle').forEach(toggle => {
                toggle.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const dropdown = this.nextElementSibling;
                    
                    // Close all other open dropdowns first
                    document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
                        if (menu !== dropdown) {
                            menu.classList.remove('show');
                        }
                    });
                    
                    // Toggle this dropdown
                    dropdown.classList.toggle('show');
                });
            });
            
            // Close dropdowns when clicking outside
            document.addEventListener('click', function(event) {
                const dropdowns = document.querySelectorAll('.dropdown-menu.show');
                dropdowns.forEach(dropdown => {
                    if (!dropdown.previousElementSibling.contains(event.target)) {
                        dropdown.classList.remove('show');
                    }
                });
            });
            
            // Handle dropdown item selection
            document.querySelectorAll('.dropdown-item').forEach(item => {
                item.addEventListener('click', function(e) {
                    // Don't prevent default for submit buttons in forms
                    if (!this.closest('form')) {
                        e.preventDefault();
                    }
                    
                    // If it's a filter dropdown, update active state
                    const filterDropdown = this.closest('.page-actions .dropdown-menu');
                    if (filterDropdown) {
                        filterDropdown.querySelectorAll('.dropdown-item').forEach(el => {
                            el.classList.remove('active');
                        });
                        this.classList.add('active');
                        
                        // Update dropdown button text
                        const dropdownButton = this.closest('.dropdown').querySelector('.dropdown-toggle span');
                        dropdownButton.textContent = this.textContent;
                        
                        // Implement filtering
                        const filter = this.textContent.trim();
                        filterChatbots(filter);
                    }
                    
                    // Hide dropdown
                    this.closest('.dropdown-menu').classList.remove('show');
                });
            });
            
            // Filter function
            function filterChatbots(filter) {
                const chatbotCards = document.querySelectorAll('.chatbot-card:not(.create-card)');
                const chatbotRows = document.querySelectorAll('#chatbotsListView tbody tr');
                
                chatbotCards.forEach(card => {
                    const statusElem = card.querySelector('.chatbot-status');
                    const isActive = statusElem && statusElem.classList.contains('active');
                    
                    if (filter === 'All Chatbots' || 
                        (filter === 'Active Only' && isActive) || 
                        (filter === 'Inactive Only' && !isActive)) {
                        card.style.display = 'flex';
                    } else {
                        card.style.display = 'none';
                    }
                });
                
                chatbotRows.forEach(row => {
                    if (row.cells.length > 1) { // Skip empty state row
                        const statusElem = row.querySelector('.badge');
                        const isActive = statusElem && statusElem.classList.contains('bg-success');
                        
                        if (filter === 'All Chatbots' || 
                            (filter === 'Active Only' && isActive) || 
                            (filter === 'Inactive Only' && !isActive)) {
                            row.style.display = '';
                        } else {
                            row.style.display = 'none';
                        }
                    }
                });
            }
            
            // Add staggered animation to cards
            document.querySelectorAll('.animate-card').forEach((card, index) => {
                card.style.setProperty('--i', index);
            });
        });
    </script>
}

@section Styles {
    <style>
        /* Main Card */
        .main-card {
            border: none;
            box-shadow: var(--shadow-lg);
            border-radius: var(--border-radius-lg);
            overflow: hidden;
        }
        
        /* Card Header Actions */
        .card-header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
        }
        
        .search-box {
            position: relative;
            width: 320px;
            transition: width 0.3s ease;
        }
        
        .search-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--color-gray-500);
            font-size: 0.875rem;
        }
        
        .search-input {
            width: 100%;
            padding: 0.625rem 1rem 0.625rem 2.25rem;
            border: 1px solid var(--color-gray-300);
            border-radius: var(--border-radius-lg);
            font-size: 0.875rem;
            transition: all 0.2s ease;
            background-color: var(--color-gray-50);
        }
        
        .search-input:focus {
            background-color: white;
            border-color: var(--color-primary);
            box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.1);
            outline: none;
        }
        
        .view-options {
            display: flex;
            gap: 0.5rem;
        }
        
        .view-option {
            width: 38px;
            height: 38px;
            border-radius: var(--border-radius);
            transition: all 0.2s ease;
        }
        
        .view-option.active {
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
            border-color: var(--color-primary);
        }
        
        /* Chatbots Grid */
        .chatbots-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(340px, 1fr));
            gap: 1.75rem;
            margin-top: 1.25rem;
        }
        
        .chatbot-card {
            background-color: white;
            border-radius: var(--border-radius-lg);
            border: 1px solid var(--color-gray-200);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            transition: all 0.3s ease;
            animation: fadeInUp 0.5s ease forwards;
            opacity: 0;
            min-height: 380px;
            box-shadow: var(--shadow);
        }
        
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .chatbot-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
            border-color: var(--color-primary-light, rgba(13, 110, 253, 0.2));
        }
        
        .chatbot-card-header {
            padding: 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid var(--color-gray-200);
            background-color: var(--color-gray-50);
        }
        
        .chatbot-avatar {
            width: 52px;
            height: 52px;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            transition: all 0.2s ease;
        }
        
        .chatbot-avatar.primary { 
            background-color: rgba(13, 110, 253, 0.1); 
            color: var(--color-primary); 
        }
        
        .chatbot-avatar.warning { 
            background-color: rgba(255, 193, 7, 0.1); 
            color: var(--color-warning); 
        }
        
        .chatbot-card:hover .chatbot-avatar.primary {
            background-color: rgba(13, 110, 253, 0.15);
            transform: scale(1.05);
        }
        
        .chatbot-card:hover .chatbot-avatar.warning {
            background-color: rgba(255, 193, 7, 0.15);
            transform: scale(1.05);
        }
        
        .chatbot-status {
            display: inline-flex;
            align-items: center;
            padding: 0.375rem 0.75rem;
            border-radius: 100px;
            font-size: 0.75rem;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        
        .chatbot-status.active {
            background-color: rgba(32, 201, 151, 0.1);
            color: var(--color-success);
        }
        
        .chatbot-status.inactive {
            background-color: rgba(108, 117, 125, 0.1);
            color: var(--color-secondary);
        }
        
        .chatbot-status.active::before,
        .chatbot-status.inactive::before {
            content: '';
            display: inline-block;
            width: 6px;
            height: 6px;
            border-radius: 50%;
            margin-right: 6px;
        }
        
        .chatbot-status.active::before {
            background-color: var(--color-success);
            box-shadow: 0 0 0 2px rgba(32, 201, 151, 0.2);
        }
        
        .chatbot-status.inactive::before {
            background-color: var(--color-secondary);
            box-shadow: 0 0 0 2px rgba(108, 117, 125, 0.2);
        }
        
        .chatbot-card-body {
            padding: 1.5rem;
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .chatbot-name {
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0 0 0.5rem;
            color: var(--color-gray-800);
        }
        
        .chatbot-id {
            font-size: 0.75rem;
            color: var(--color-gray-500);
            margin-bottom: 1.25rem;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .text-warning {
            color: var(--color-warning);
        }
        
        .chatbot-description {
            font-size: 0.875rem;
            color: var(--color-gray-600);
            line-height: 1.5;
            margin-bottom: 1rem;
            flex: 1;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 4;
            -webkit-box-orient: vertical;
        }
        
        /* Stats section */
        .chatbot-stats {
            padding: 1.25rem 1.5rem;
            border-top: 1px solid var(--color-gray-200);
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            background-color: var(--color-gray-50);
        }
        
        .chatbot-stat {
            text-align: center;
            position: relative;
        }
        
        .chatbot-stat:not(:last-child)::after {
            content: '';
            position: absolute;
            top: 10%;
            right: 0;
            height: 80%;
            width: 1px;
            background-color: var(--color-gray-200);
        }
        
        .stat-value {
            font-weight: 600;
            font-size: 1.125rem;
            color: var(--color-gray-800);
        }
        
        .stat-label {
            font-size: 0.75rem;
            color: var(--color-gray-500);
            margin-top: 0.25rem;
        }
        
        .chatbot-card-footer {
            padding: 1.25rem 1.5rem;
            border-top: 1px solid var(--color-gray-200);
            display: flex;
            align-items: center;
            justify-content: flex-start;
            gap: 0.75rem;
            height: 80px; /* Fixed height to ensure consistency */
        }
        
        /* Create Card */
        .create-card {
            border: 2px dashed var(--color-gray-300);
            background-color: var(--color-gray-50);
            cursor: pointer;
            min-height: 380px;
            justify-content: center;
            align-items: center;
            transition: all 0.3s ease;
        }
        
        .create-card:hover {
            border-color: var(--color-primary);
            background-color: rgba(13, 110, 253, 0.05);
            transform: translateY(-5px);
        }
        
        .create-card-content {
            text-align: center;
            padding: 2rem;
            transition: all 0.3s ease;
        }
        
        .create-icon {
            width: 72px;
            height: 72px;
            border-radius: 50%;
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.75rem;
            margin: 0 auto 1.5rem;
            transition: all 0.3s ease;
        }
        
        .create-card:hover .create-icon {
            transform: scale(1.1);
            background-color: var(--color-primary);
            color: white;
            box-shadow: 0 10px 20px -10px rgba(13, 110, 253, 0.5);
        }
        
        .create-text {
            font-weight: 500;
            font-size: 1.125rem;
            color: var(--color-gray-700);
            transition: all 0.3s ease;
        }
        
        .create-card:hover .create-text {
            color: var(--color-primary);
            transform: translateY(5px);
        }
        
        /* List View */
        .chatbots-list {
            overflow-x: auto;
            margin-top: 1.25rem;
            border-radius: var(--border-radius);
        }
        
        .table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }
        
        .table th {
            padding: 1rem;
            text-align: left;
            border-bottom: 2px solid var(--color-gray-200);
            font-weight: 600;
            font-size: 0.875rem;
            color: var(--color-gray-700);
            white-space: nowrap;
            position: sticky;
            top: 0;
            background-color: white;
            z-index: 1;
        }
        
        .table td {
            padding: 1rem;
            vertical-align: middle;
            border-bottom: 1px solid var(--color-gray-200);
            font-size: 0.875rem;
            transition: all 0.2s ease;
        }
        
        .table tbody tr {
            transition: all 0.2s ease;
        }
        
        .table tbody tr:hover {
            background-color: var(--color-gray-50);
        }
        
        .list-avatar {
            width: 38px;
            height: 38px;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            margin-right: 1rem;
            flex-shrink: 0;
        }
        
        .list-avatar.primary { 
            background-color: rgba(13, 110, 253, 0.1); 
            color: var(--color-primary); 
        }
        
        .list-avatar.warning { 
            background-color: rgba(255, 193, 7, 0.1); 
            color: var(--color-warning); 
        }
        
        .list-chatbot-name {
            font-weight: 500;
            color: var(--color-gray-800);
        }
        
        .text-monospace {
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            font-size: 0.8125rem;
        }
        
        .list-actions {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            justify-content: flex-end;
            min-width: 120px;
        }
        
        .btn-icon {
            width: 38px;
            height: 38px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: var(--border-radius);
            border: 1px solid var(--color-gray-300);
            background-color: transparent;
            color: var(--color-gray-600);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .btn-icon:hover {
            background-color: var(--color-gray-100);
            color: var(--color-gray-800);
            border-color: var(--color-gray-400);
        }
        
        .badge {
            font-size: 0.75rem;
            font-weight: 500;
            padding: 0.375rem 0.75rem;
            border-radius: 100px;
        }
        
        .bg-success {
            background-color: var(--color-success);
            color: white;
        }
        
        .bg-secondary {
            background-color: var(--color-secondary);
            color: white;
        }
        
        /* Card Actions */
        .card-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }
        
        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            transition: all 0.2s ease;
            font-size: 0.875rem;
            height: 38px;
            white-space: nowrap;
        }
        
        .btn-sm {
            padding: 0.375rem 0.75rem;
            font-size: 0.8125rem;
            height: 34px;
        }
        
        .btn-primary {
            background-color: var(--color-primary);
            color: white;
            border: 1px solid var(--color-primary);
        }
        
        .btn-primary:hover {
            background-color: #0b5ed7;
            border-color: #0a58ca;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px -1px rgba(13, 110, 253, 0.2);
        }
        
        .btn-outline-secondary {
            background-color: transparent;
            color: var(--color-gray-600);
            border: 1px solid var(--color-gray-300);
        }
        
        .btn-outline-secondary:hover {
            background-color: var(--color-gray-100);
            color: var(--color-gray-800);
            border-color: var(--color-gray-400);
        }
        
        .btn-outline-primary {
            background-color: transparent;
            color: var(--color-primary);
            border: 1px solid var(--color-primary);
        }
        
        .btn-outline-primary:hover {
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
            border-color: var(--color-primary);
        }
        
        /* Dropdown Menu */
        .dropdown {
            position: relative;
        }
        
        .dropdown-menu {
            position: absolute;
            right: 0;
            top: calc(100% + 8px);
            z-index: 1000;
            min-width: 180px;
            padding: 0.5rem 0;
            margin-top: 0.125rem;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-lg);
            border: 1px solid var(--color-gray-200);
            display: none;
            opacity: 0;
            transform: translateY(-10px);
            transition: opacity 0.2s ease, transform 0.2s ease;
        }
        
        .dropdown-menu.show {
            display: block;
            opacity: 1;
            transform: translateY(0);
        }
        
        .dropdown-menu-end {
            right: 0;
            left: auto;
        }
        
        .dropdown-item {
            display: block;
            width: 100%;
            padding: 0.625rem 1rem;
            clear: both;
            text-align: inherit;
            white-space: nowrap;
            background-color: transparent;
            border: 0;
            cursor: pointer;
            text-decoration: none;
            color: var(--color-gray-700);
            font-size: 0.875rem;
            transition: all 0.2s ease;
        }
        
        .dropdown-item:hover {
            background-color: var(--color-gray-100);
        }
        
        .dropdown-divider {
            height: 0;
            margin: 0.5rem 0;
            overflow: hidden;
            border-top: 1px solid var(--color-gray-200);
        }
        
        /* Filter Wrapper */
        .filter-wrapper {
            position: relative;
            margin-right: 0.75rem;
        }
        
        /* Animation for cards */
        .animate-card {
            animation-delay: calc(var(--i, 0) * 0.1s);
        }
        
        /* No data message */
        .no-data-message {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 3rem;
            text-align: center;
            background-color: var(--color-gray-50);
            border-radius: var(--border-radius-lg);
            grid-column: 1 / -1;
        }
        
        .no-data-icon {
            font-size: 2.5rem;
            color: var(--color-gray-400);
            margin-bottom: 1rem;
        }
        
        .no-data-message h3 {
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .no-data-message p {
            color: var(--color-gray-500);
        }
        
        /* Alert styling */
        .alert {
            padding: 1rem 1.25rem;
            margin-bottom: 1.25rem;
            border-radius: var(--border-radius);
            border: 1px solid transparent;
        }
        
        .alert-success {
            background-color: rgba(32, 201, 151, 0.1);
            border-color: rgba(32, 201, 151, 0.2);
            color: var(--color-success);
        }
        
        .alert-danger {
            background-color: rgba(220, 53, 69, 0.1);
            border-color: rgba(220, 53, 69, 0.2);
            color: var(--color-danger);
        }
        
        .btn-close {
            float: right;
            font-size: 1.25rem;
            font-weight: 700;
            line-height: 1;
            color: inherit;
            background: transparent;
            border: 0;
            opacity: 0.5;
            padding: 0;
            cursor: pointer;
        }
        
        /* Helper classes */
        .d-flex {
            display: flex;
        }
        
        .align-items-center {
            align-items: center;
        }
        
        .ms-auto {
            margin-left: auto;
        }
        
        .me-2 {
            margin-right: 0.5rem;
        }
        
        .d-inline {
            display: inline;
        }
        
        .text-muted {
            color: var(--color-gray-500);
        }
        
        .text-danger {
            color: var(--color-danger);
        }
        
        .text-success {
            color: var(--color-success);
        }
        
        /* Responsive Adjustments */
        @@media (max-width: 1200px) {
            .chatbots-grid {
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            }
        }
        
        @@media (max-width: 991px) {
            .chatbots-grid {
                grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            }
            
            .search-box {
                width: 260px;
            }
        }
        
        @@media (max-width: 768px) {
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .page-actions {
                width: 100%;
                display: flex;
                justify-content: space-between;
            }
            
            .card-header-actions {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .search-box {
                width: 100%;
            }
            
            .view-options {
                margin-top: 0.5rem;
                align-self: flex-end;
            }
            
            .chatbots-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
}