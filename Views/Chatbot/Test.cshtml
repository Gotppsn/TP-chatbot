@model AIHelpdeskSupport.Models.Chatbot
@{
    ViewData["Title"] = "Test Chatbot";
}

<div class="page-header">
    <div>
        <h1 class="page-title">Test Chatbot</h1>
        <p class="text-muted">Interact with your chatbot to test its behavior</p>
    </div>
    <div class="page-actions">
        <a href="/Chatbot" class="btn btn-outline">
            <i class="bi bi-arrow-left"></i>
            Back to List
        </a>
        <a href="/Chatbot/Edit/@Model.Id" class="btn btn-primary">
            <i class="bi bi-pencil"></i>
            Edit Chatbot
        </a>
    </div>
</div>

<div class="test-container">
    <div class="test-panel">
        <div class="chatbot-info">
            <div class="info-header">
                <div class="avatar @(Model.IsActive ? "active" : "inactive")">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="details">
                    <h2>@Model.Name</h2>
                    <div class="badges">
                        <span class="badge @(Model.IsActive ? "badge-success" : "badge-danger")">
                            @(Model.IsActive ? "Active" : "Inactive")
                        </span>
                    </div>
                </div>
                <div class="actions">
                    <a href="/Chatbot/Edit/@Model.Id" class="btn btn-sm btn-outline-primary">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <div class="info-description">
                    <p>@Model.Description</p>
                </div>
            }
            
            <div class="info-data">
                <div class="data-item">
                    <div class="data-label">Flowise ID</div>
                    <div class="data-value text-truncate" title="@Model.FlowiseId">@Model.FlowiseId</div>
                </div>
                <div class="data-item">
                    <div class="data-label">Response Time</div>
                    <div class="data-value">2.4s</div>
                </div>
                <div class="data-item">
                    <div class="data-label">Accuracy</div>
                    <div class="data-value">92%</div>
                </div>
            </div>
        </div>
        
        <div class="test-settings">
            <h3>Test Settings</h3>
            
            <div class="setting-group">
                <label class="setting-label">Test Mode</label>
                <div class="setting-options">
                    <div class="option-toggle">
                        <input type="radio" name="testMode" id="test-mode-standard" checked>
                        <label for="test-mode-standard">Standard</label>
                    </div>
                    <div class="option-toggle">
                        <input type="radio" name="testMode" id="test-mode-dev">
                        <label for="test-mode-dev">Developer</label>
                    </div>
                </div>
                <div class="setting-description">
                    Developer mode shows model tokens, reasoning and debug information
                </div>
            </div>
            
            <div class="setting-group">
                <label class="setting-label">Session</label>
                <div class="setting-field">
                    <select class="form-select">
                        <option value="new">New session</option>
                        <option value="continue">Continue previous</option>
                    </select>
                </div>
            </div>
            
            <div class="setting-actions">
                <button class="btn btn-outline-secondary" id="clearChat">
                    <i class="bi bi-trash"></i> Clear Chat
                </button>
                <button class="btn btn-outline-primary" id="saveSession">
                    <i class="bi bi-save"></i> Save Session
                </button>
            </div>
        </div>
    </div>
    
    <div class="chat-window">
        <div class="chat-header">
            <div class="chat-title">
                <i class="bi bi-chat-dots"></i>
                <span>Test Conversation</span>
            </div>
            <div class="chat-actions">
                <button class="btn-icon" id="exportChat" title="Export Conversation">
                    <i class="bi bi-download"></i>
                </button>
                <button class="btn-icon" id="expandChat" title="Expand Chat">
                    <i class="bi bi-arrows-angle-expand"></i>
                </button>
            </div>
        </div>
        
        <div class="chat-messages" id="chat-messages">
            <div class="message bot">
                <div class="message-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="message-content">
                    <div class="message-bubble">
                        <p>ðŸ‘‹ Hello! I'm <strong>@Model.Name</strong>, your assistant. How can I help you today?</p>
                    </div>
                    <div class="message-info">
                        <span class="message-time">Now</span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="chat-input-container">
            <div class="input-attachments">
                <button class="btn-icon" id="uploadFile" title="Upload File">
                    <i class="bi bi-paperclip"></i>
                </button>
            </div>
            <div class="input-wrapper">
                <textarea id="chat-input" placeholder="Type your message..." rows="1"></textarea>
                <button id="voice-input" title="Voice Input">
                    <i class="bi bi-mic"></i>
                </button>
            </div>
            <button id="send-message" class="send-button" disabled>
                <i class="bi bi-send"></i>
            </button>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .test-container {
            display: grid;
            grid-template-columns: 320px 1fr;
            gap: 1.5rem;
            height: calc(100vh - 200px);
            min-height: 600px;
        }
        
        /* Test Panel */
        .test-panel {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }
        
        .chatbot-info {
            background-color: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow);
            overflow: hidden;
        }
        
        .info-header {
            padding: 1.5rem;
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .avatar {
            width: 48px;
            height: 48px;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            flex-shrink: 0;
        }
        
        .avatar.active {
            background-color: rgba(32, 201, 151, 0.1);
            color: var(--color-success);
        }
        
        .avatar.inactive {
            background-color: rgba(108, 117, 125, 0.1);
            color: var(--color-secondary);
        }
        
        .details {
            flex: 1;
            min-width: 0;
        }
        
        .details h2 {
            font-size: 1.125rem;
            margin: 0 0 0.5rem;
            font-weight: 600;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .badges {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        
        .badge {
            font-size: 0.6875rem;
            padding: 0.25rem 0.5rem;
            border-radius: 100px;
            font-weight: 500;
            white-space: nowrap;
        }
        
        .badge-success {
            background-color: rgba(32, 201, 151, 0.1);
            color: var(--color-success);
        }
        
        .badge-danger {
            background-color: rgba(220, 53, 69, 0.1);
            color: var(--color-danger);
        }
        
        .info-description {
            padding: 0 1.5rem 1.5rem;
            color: var(--color-gray-600);
            font-size: 0.875rem;
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .info-description p {
            margin: 0;
            line-height: 1.5;
        }
        
        .info-data {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            padding: 1rem 0;
        }
        
        .data-item {
            text-align: center;
            padding: 0.5rem;
        }
        
        .data-label {
            font-size: 0.75rem;
            color: var(--color-gray-500);
            margin-bottom: 0.25rem;
        }
        
        .data-value {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--color-gray-800);
        }
        
        .text-truncate {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            max-width: 100%;
        }
        
        /* Test Settings */
        .test-settings {
            background-color: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow);
            padding: 1.5rem;
        }
        
        .test-settings h3 {
            font-size: 1rem;
            margin: 0 0 1.25rem;
            font-weight: 600;
        }
        
        .setting-group {
            margin-bottom: 1.25rem;
        }
        
        .setting-group:last-child {
            margin-bottom: 0;
        }
        
        .setting-label {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--color-gray-700);
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .setting-description {
            font-size: 0.75rem;
            color: var(--color-gray-500);
            margin-top: 0.5rem;
        }
        
        .setting-options {
            display: flex;
            gap: 0.5rem;
        }
        
        .option-toggle {
            position: relative;
        }
        
        .option-toggle input {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .option-toggle label {
            display: block;
            padding: 0.5rem 1rem;
            border: 1px solid var(--color-gray-300);
            border-radius: var(--border-radius);
            font-size: 0.875rem;
            color: var(--color-gray-700);
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .option-toggle input:checked + label {
            background-color: rgba(13, 110, 253, 0.1);
            border-color: var(--color-primary);
            color: var(--color-primary);
            font-weight: 500;
        }
        
        .setting-actions {
            display: flex;
            gap: 0.75rem;
            margin-top: 1.5rem;
        }
        
        /* Chat Window */
        .chat-window {
            background-color: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            height: 100%;
        }
        
        .chat-header {
            padding: 1rem 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .chat-title {
            display: flex;
            align-items: center;
            font-weight: 600;
        }
        
        .chat-title i {
            margin-right: 0.75rem;
            font-size: 1.25rem;
            color: var(--color-primary);
        }
        
        .chat-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1.5rem;
            background-color: var(--color-gray-50);
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }
        
        .message {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            max-width: 85%;
        }
        
        .message.user {
            margin-left: auto;
            flex-direction: row-reverse;
        }
        
        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.125rem;
            flex-shrink: 0;
        }
        
        .message.bot .message-avatar {
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
        }
        
        .message.user .message-avatar {
            background-color: rgba(108, 117, 125, 0.1);
            color: var(--color-secondary);
        }
        
        .message-content {
            display: flex;
            flex-direction: column;
        }
        
        .message-bubble {
            padding: 0.875rem 1.25rem;
            border-radius: 1rem;
            position: relative;
        }
        
        .message.bot .message-bubble {
            background-color: white;
            border: 1px solid var(--color-gray-200);
            border-bottom-left-radius: 0.25rem;
        }
        
        .message.user .message-bubble {
            background-color: var(--color-primary);
            color: white;
            border-bottom-right-radius: 0.25rem;
        }
        
        .message-bubble p {
            margin: 0;
            line-height: 1.5;
        }
        
        .message-info {
            margin-top: 0.25rem;
            font-size: 0.6875rem;
            color: var(--color-gray-500);
            display: flex;
            align-items: center;
            padding: 0 0.5rem;
        }
        
        .message-time {
            margin-right: 0.5rem;
        }
        
        .chat-input-container {
            padding: 1rem;
            border-top: 1px solid var(--color-gray-200);
            display: flex;
            align-items: flex-end;
            gap: 0.75rem;
        }
        
        .input-attachments {
            flex-shrink: 0;
        }
        
        .input-wrapper {
            position: relative;
            flex: 1;
        }
        
        #chat-input {
            width: 100%;
            padding: 0.75rem 2.5rem 0.75rem 1rem;
            border: 1px solid var(--color-gray-300);
            border-radius: 1.5rem;
            background-color: var(--color-gray-50);
            resize: none;
            max-height: 120px;
            font-size: 0.9375rem;
            line-height: 1.5;
            transition: all 0.3s ease;
        }
        
        #chat-input:focus {
            outline: none;
            border-color: var(--color-primary);
            background-color: white;
            box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.1);
        }
        
        #voice-input {
            position: absolute;
            right: 0.75rem;
            bottom: 0.75rem;
            background: none;
            border: none;
            color: var(--color-gray-500);
            cursor: pointer;
            font-size: 1.125rem;
            transition: color 0.3s ease;
        }
        
        #voice-input:hover {
            color: var(--color-primary);
        }
        
        .send-button {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--color-primary);
            color: white;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.125rem;
            cursor: pointer;
            flex-shrink: 0;
            transition: all 0.3s ease;
        }
        
        .send-button:disabled {
            background-color: var(--color-gray-300);
            cursor: not-allowed;
        }
        
        .send-button:not(:disabled):hover {
            background-color: #0b5ed7;
            transform: translateY(-2px);
        }
        
        .btn-icon {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: var(--border-radius);
            border: 1px solid var(--color-gray-300);
            background-color: transparent;
            color: var(--color-gray-600);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .btn-icon:hover {
            background-color: var(--color-gray-100);
            color: var(--color-gray-800);
        }
        
        /* Form Styling */
        .form-select {
            width: 100%;
            padding: 0.625rem 0.875rem;
            border-radius: var(--border-radius);
            border: 1px solid var(--color-gray-300);
            background-color: white;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 0.75rem center;
            background-size: 16px 12px;
            appearance: none;
            font-size: 0.875rem;
        }
        
        /* Responsive Styles */
        @@media (max-width: 991px) {
            .test-container {
                grid-template-columns: 1fr;
                grid-template-rows: auto 1fr;
            }
            
            .test-panel {
                grid-template-columns: 1fr 1fr;
                display: grid;
                gap: 1.5rem;
            }
        }
        
        @@media (max-width: 767px) {
            .test-panel {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatInput = document.getElementById('chat-input');
            const sendButton = document.getElementById('send-message');
            const chatMessages = document.getElementById('chat-messages');
            const clearChatButton = document.getElementById('clearChat');
            
            // Auto-resize input
            chatInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
                
                // Enable/disable send button
                sendButton.disabled = this.value.trim() === '';
            });
            
            // Handle message sending
            sendButton.addEventListener('click', sendMessage);
            
            chatInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (!sendButton.disabled) {
                        sendMessage();
                    }
                }
            });
            
            // Clear chat
            clearChatButton.addEventListener('click', function() {
                // Get first message (bot greeting)
                const firstMessage = chatMessages.firstChild;
                
                // Clear chat except for first message
                chatMessages.innerHTML = '';
                chatMessages.appendChild(firstMessage);
            });
            
            function sendMessage() {
                const message = chatInput.value.trim();
                if (!message) return;
                
                // Add user message
                addMessage('user', message);
                
                // Clear input
                chatInput.value = '';
                chatInput.style.height = 'auto';
                sendButton.disabled = true;
                
                // Simulate bot typing
                const typingIndicator = document.createElement('div');
                typingIndicator.className = 'message bot typing';
                typingIndicator.innerHTML = `
                    <div class="message-avatar">
                        <i class="bi bi-robot"></i>
                    </div>
                    <div class="message-content">
                        <div class="message-bubble">
                            <div class="typing-indicator">
                                <span></span><span></span><span></span>
                            </div>
                        </div>
                    </div>
                `;
                chatMessages.appendChild(typingIndicator);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                // Simulate API call delay
                setTimeout(() => {
                    // Remove typing indicator
                    chatMessages.removeChild(typingIndicator);
                    
                    // Get bot response
                    let botResponse = getBotResponse(message);
                    
                    // Add bot message
                    addMessage('bot', botResponse);
                }, 1500);
            }
            
            function addMessage(type, text) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${type}`;
                
                const avatar = type === 'bot' ? 
                    '<div class="message-avatar"><i class="bi bi-robot"></i></div>' : 
                    '<div class="message-avatar"><i class="bi bi-person"></i></div>';
                
                const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                
                messageDiv.innerHTML = `
                    ${avatar}
                    <div class="message-content">
                        <div class="message-bubble">
                            <p>${text}</p>
                        </div>
                        <div class="message-info">
                            <span class="message-time">${time}</span>
                        </div>
                    </div>
                `;
                
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            function getBotResponse(message) {
                // This is a simple simulation - in production, this would call your API
                const responses = [
                    "I understand you're asking about that. Let me provide some information that might help.",
                    "That's a great question. Based on my knowledge, here's what I can tell you.",
                    "I'd be happy to help with that. Here's what you need to know.",
                    "Let me look into that for you. Here's what I've found.",
                    "Thanks for your question. Here's my response based on the information available."
                ];
                
                const details = [
                    "Our services include comprehensive support for all our products. You can find more details in the user manual or contact our support team directly.",
                    "The specific features you're asking about are available in our premium tier. Would you like me to provide more details about the pricing?",
                    "This is typically resolved by restarting the application and clearing your cache. If the issue persists, our technical team can investigate further.",
                    "We recommend updating to the latest version to access these features. The update process usually takes about 5-10 minutes to complete."
                ];
                
                // Return a random response + detail
                return `${responses[Math.floor(Math.random() * responses.length)]} ${details[Math.floor(Math.random() * details.length)]}`;
            }
            
            // Expand chat
            document.getElementById('expandChat').addEventListener('click', function() {
                const testContainer = document.querySelector('.test-container');
                const testPanel = document.querySelector('.test-panel');
                
                if (testContainer.classList.contains('chat-expanded')) {
                    testContainer.classList.remove('chat-expanded');
                    testPanel.style.display = '';
                    this.innerHTML = '<i class="bi bi-arrows-angle-expand"></i>';
                    this.title = 'Expand Chat';
                } else {
                    testContainer.classList.add('chat-expanded');
                    testPanel.style.display = 'none';
                    this.innerHTML = '<i class="bi bi-arrows-angle-contract"></i>';
                    this.title = 'Collapse Chat';
                }
            });
            
            // Export chat
            document.getElementById('exportChat').addEventListener('click', function() {
                let chatContent = '';
                
                document.querySelectorAll('.message').forEach(message => {
                    const isBot = message.classList.contains('bot');
                    const text = message.querySelector('.message-bubble p').textContent;
                    const time = message.querySelector('.message-time').textContent;
                    
                    chatContent += `[${time}] ${isBot ? 'Bot' : 'User'}: ${text}\n\n`;
                });
                
                const blob = new Blob([chatContent], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                
                a.href = url;
                a.download = `chat-export-${new Date().toISOString().slice(0, 10)}.txt`;
                document.body.appendChild(a);
                a.click();
                
                setTimeout(() => {
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                }, 100);
            });
        });
    </script>
}