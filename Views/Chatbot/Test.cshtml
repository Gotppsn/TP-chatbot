@model AIHelpdeskSupport.Models.Chatbot
@{
    ViewData["Title"] = "Test Chatbot";
    
    // Parse the localized names JSON if available
    var localizedNames = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(Model.LocalizedNamesJson))
    {
        try
        {
            localizedNames = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(Model.LocalizedNamesJson);
        }
        catch { /* Use empty dictionary if parsing fails */ }
    }
}

<div class="chatbot-test-container">
    <!-- Header -->
    <div class="test-header">
        <div class="chatbot-title-area">
            <h1 class="chatbot-name">@Model.Name</h1>
            <div class="status-indicator @(Model.IsActive ? "active" : "inactive")">
                @(Model.IsActive ? "Active" : "Inactive")
            </div>
        </div>
        <div class="header-actions">
            <a href="/Chatbot/Edit/@Model.Id" class="btn-action edit">
                <i class="bi bi-pencil"></i> Edit
            </a>
            <a href="/Chatbot" class="btn-action back">
                <i class="bi bi-arrow-left"></i> Back to List
            </a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="test-content">
        <!-- Chat Panel -->
        <div class="chat-panel">
            <!-- Chat Header -->
            <div class="chat-header">
                <div class="bot-identity">
                    <div class="bot-avatar">
                        <i class="bi bi-robot"></i>
                    </div>
                    <div class="bot-name" id="chatbotNameDisplay">@Model.Name</div>
                    <div class="connection-status connected">
                        <span class="status-dot"></span>
                        <span id="connectionStatus">Connected</span>
                    </div>
                </div>
                <div class="chat-actions">
                    <!-- Language Selector -->
                    <div class="language-selector">
                        <select id="languageSelect" class="language-select">
                            <option value="en">English</option>
                            <option value="th">ไทย</option>
                            <option value="ja">日本語</option>
                        </select>
                    </div>
                    <button type="button" id="clearChat" class="btn-icon">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </div>
            
            <!-- Chat Messages -->
            <div class="chat-messages" id="chatMessages">
                <!-- Bot initial message - will be generated dynamically based on language -->
            </div>
            
            <!-- Chat Footer -->
            <div class="chat-footer">
                <!-- Session Info -->
                <div class="session-info" id="chatDetails">
                    <div class="session-item">
                        <span class="session-label">Session:</span>
                        <span id="sessionId" class="session-value">session-17413358703244-26496vk0</span>
                    </div>
                    <div class="session-item">
                        <span class="session-label">Response time:</span>
                        <span id="responseTime" class="session-value">2.18s</span>
                    </div>
                </div>
                
                <!-- Message Input -->
                <div class="message-input-area">
                    <input type="text" id="messageInput" placeholder="Type your message here..." autocomplete="off">
                    <button type="button" id="sendMessage" class="send-button">
                        <i class="bi bi-send-fill"></i>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Info Panel -->
        <div class="info-panel">
            <!-- Configuration Section -->
            <div class="info-section">
                <h3 class="section-title">Configuration</h3>
                <div class="info-content">
                    <div class="info-row">
                        <div class="info-item">
                            <div class="info-icon">
                                <i class="bi bi-building"></i>
                            </div>
                            <div class="info-details">
                                <div class="info-label">Department</div>
                                <div class="info-value">@Model.Department</div>
                            </div>
                        </div>
                        <div class="info-item">
                            <div class="info-icon">
                                <i class="bi bi-cpu"></i>
                            </div>
                            <div class="info-details">
                                <div class="info-label">AI Model</div>
                                <div class="info-value">@Model.AiModel</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="info-row">
                        <div class="info-item full-width">
                            <div class="info-icon">
                                <i class="bi bi-key"></i>
                            </div>
                            <div class="info-details">
                                <div class="info-label">Flowise ID</div>
                                <div class="info-value">@(string.IsNullOrEmpty(Model.FlowiseId) ? "Not configured" : Model.FlowiseId)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Details Section -->
            <div class="info-section">
                <h3 class="section-title">Details</h3>
                <div class="info-content">
                    <div class="info-row">
                        <div class="info-item full-width">
                            <div class="info-icon">
                                <i class="bi bi-info-circle"></i>
                            </div>
                            <div class="info-details">
                                <div class="info-label">Description</div>
                                <div class="info-value description-text">@(string.IsNullOrEmpty(Model.Description) ? "No description provided" : Model.Description)</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="info-row">
                        <div class="info-item">
                            <div class="info-icon">
                                <i class="bi bi-calendar"></i>
                            </div>
                            <div class="info-details">
                                <div class="info-label">Created On</div>
                                <div class="info-value">@Model.CreatedAt.ToString("MMM d, yyyy")</div>
                            </div>
                        </div>
                        <div class="info-item">
                            <div class="info-icon">
                                <i class="bi bi-person"></i>
                            </div>
                            <div class="info-details">
                                <div class="info-label">Created By</div>
                                <div class="info-value">@Model.CreatedBy</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Test Settings Section -->
            <div class="info-section">
                <h3 class="section-title">Test Settings</h3>
                <div class="info-content settings-content">
                    <div class="setting-item">
                        <div class="toggle-switch">
                            <input type="checkbox" id="debugInfo" class="toggle-input" checked>
                            <label for="debugInfo" class="toggle-label"></label>
                        </div>
                        <div class="setting-label">Debug Information</div>
                    </div>
                    
                    <div class="setting-item">
                        <div class="toggle-switch">
                            <input type="checkbox" id="showSystemPrompt" class="toggle-input">
                            <label for="showSystemPrompt" class="toggle-label"></label>
                        </div>
                        <div class="setting-label">Show System Prompt</div>
                    </div>
                </div>
            </div>
            
            <!-- System Prompt Section (Initially Hidden) -->
            @if (!string.IsNullOrEmpty(Model.SystemPrompt))
            {
                <div class="info-section" id="systemPromptSection" style="display: none;">
                    <h3 class="section-title">System Prompt</h3>
                    <div class="info-content">
                        <div class="system-prompt">@Model.SystemPrompt</div>
                    </div>
                </div>
            }
            
            <!-- Test Metrics Section -->
            <div class="info-section">
                <h3 class="section-title">Test Metrics</h3>
                <div class="info-content metrics-content">
                    <div class="metric-item">
                        <div class="metric-value" id="messageCount">0</div>
                        <div class="metric-label">Messages</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-value" id="avgResponseTime">0.0s</div>
                        <div class="metric-label">Avg. Response</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-value" id="maxResponseTime">0.0s</div>
                        <div class="metric-label">Max Response</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let sessionId = null;
        let isConnected = false;
        let lastResponseTimes = [];
        let messageCount = 0;
        let currentLanguage = 'en';
        
        // Flowise API configuration
        const FLOWISE_API_URL = "http://localhost:3000/api/v1/prediction/@Model.FlowiseId";
        const FLOWISE_API_KEY = "0DE04hQaVt8RqxvR_rMigpeFm7n7twJq7TRlKJB4MqY";

        // Localized chatbot names
        const chatbotNames = {
            en: "@Model.Name", // Default English name
            th: "@(localizedNames.ContainsKey("th") ? localizedNames["th"] : Model.Name)",
            ja: "@(localizedNames.ContainsKey("ja") ? localizedNames["ja"] : Model.Name)"
        };

        // Welcome messages in different languages
        const welcomeMessages = {
            en: `Hello! I'm the ${chatbotNames.en} assistant. How can I help you today?`,
            th: `สวัสดีครับ/ค่ะ! ฉัน ${chatbotNames.th} ผู้ช่วยของคุณ มีอะไรให้ช่วยไหมครับ/คะ?`,
            ja: `こんにちは！私は${chatbotNames.ja} アシスタントです。今日はどのようにお手伝いできますか？`
        };

        // Input placeholder texts in different languages
        const placeholders = {
            en: "Type your message here...",
            th: "พิมพ์ข้อความของคุณที่นี่...",
            ja: "メッセージを入力してください..."
        };

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize session ID
            sessionId = generateSessionId();
            document.getElementById('sessionId').textContent = sessionId;
            
            // Set up event listeners
            document.getElementById('sendMessage').addEventListener('click', sendMessage);
            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            document.getElementById('clearChat').addEventListener('click', clearChat);
            document.getElementById('debugInfo').addEventListener('change', toggleDebugInfo);
            document.getElementById('showSystemPrompt').addEventListener('change', toggleSystemPrompt);
            
            // Language selector event listener
            document.getElementById('languageSelect').addEventListener('change', function() {
                currentLanguage = this.value;
                updateLanguage();
            });
            
            // Add scroll event listeners for chat
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.addEventListener('scroll', function() {
                userScrolled = true;
                checkScrollPosition();
            });
            
            // Add wheel event listener for precise mouse wheel detection
            chatMessages.addEventListener('wheel', function(e) {
                if (e.deltaY < 0) { // Scrolling up
                    userScrolled = true;
                } else if (isScrolledToBottom) { // Scrolling down and already at bottom
                    userScrolled = false;
                }
                // Small delay to check position after scrolling
                setTimeout(checkScrollPosition, 50);
            });
            
            // Initialize chat with welcome message
            initializeChat();
            
            // Focus input field
            document.getElementById('messageInput').focus();
        });

        function initializeChat() {
            const chatMessages = document.getElementById('chatMessages');
            
            // Clear any existing messages
            chatMessages.innerHTML = '';
            
            // Update chatbot name display based on current language
            document.getElementById('chatbotNameDisplay').textContent = chatbotNames[currentLanguage];
            
            // Add welcome message based on current language
            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            const welcomeMessage = document.createElement('div');
            welcomeMessage.className = 'message bot';
            welcomeMessage.innerHTML = `
                <div class="message-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="message-content">
                    <p>${welcomeMessages[currentLanguage]}</p>
                    <div class="message-time">${time}</div>
                </div>
            `;
            
            chatMessages.appendChild(welcomeMessage);
            
            // Update placeholder text based on language
            document.getElementById('messageInput').placeholder = placeholders[currentLanguage];
            
            // Reset counter
            messageCount = 1;
            updateMetrics();
            
            // Scroll to bottom
            scrollToBottom();
        }
        
        function updateLanguage() {
            // Update placeholder
            document.getElementById('messageInput').placeholder = placeholders[currentLanguage];
            
            // Update chatbot name display
            document.getElementById('chatbotNameDisplay').textContent = chatbotNames[currentLanguage];
            
            // Reinitialize chat with new language
            initializeChat();
        }

        function generateSessionId() {
            return `session-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;
        }

        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            // Add user message to chat
            addUserMessage(message);
            
            // Clear input
            input.value = '';
            
            // Show typing indicator
            showTypingIndicator();
            
            // Send to API and get response
            const startTime = performance.now();
            callFlowiseAPI(message)
                .then(response => {
                    // Calculate response time
                    const endTime = performance.now();
                    const responseTime = ((endTime - startTime) / 1000).toFixed(2);
                    document.getElementById('responseTime').textContent = `${responseTime}s`;
                    
                    // Track response times
                    lastResponseTimes.push(parseFloat(responseTime));
                    
                    // Hide typing indicator
                    hideTypingIndicator();
                    
                    // Add bot response
                    addBotMessage(response);
                    
                    // Update metrics
                    updateMetrics();
                })
                .catch(error => {
                    console.error('Error:', error);
                    hideTypingIndicator();
                    
                    // Add error message
                    addBotMessage('Sorry, I encountered an error while processing your request.');
                    
                    // Update metrics
                    updateMetrics();
                });
        }

        async function callFlowiseAPI(message) {
            try {
                const flowiseId = '@Model.FlowiseId';
                
                if (!flowiseId) {
                    return "This chatbot doesn't have a Flowise ID configured. Please set it up in the Edit page.";
                }

                const response = await fetch(FLOWISE_API_URL, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${FLOWISE_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        question: message,
                        sessionId: sessionId,
                        overrideConfig: {
                            language: currentLanguage,
                            botName: chatbotNames[currentLanguage]
                        }
                    })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`API error: ${response.status} - ${errorText}`);
                }

                const data = await response.json();
                
                if (typeof data === 'object' && data !== null) {
                    if (data.text !== undefined) {
                        return data.text;
                    }
                    return JSON.stringify(data);
                }
                
                return data || "No response received";
            } catch (error) {
                console.error('API call failed:', error);
                throw error;
            }
        }

        function addUserMessage(text) {
            const chatMessages = document.getElementById('chatMessages');
            
            // Create message element
            const messageElement = document.createElement('div');
            messageElement.className = 'message user';
            
            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            messageElement.innerHTML = `
                <div class="message-content">
                    <p>${escapeHtml(text)}</p>
                    <div class="message-time">${time}</div>
                </div>
            `;
            
            chatMessages.appendChild(messageElement);
            
            // Reset user scrolled flag when user sends a message
            userScrolled = false;
            scrollToBottom();
            
            // Increment message count
            messageCount++;
        }

        function addBotMessage(text) {
            const chatMessages = document.getElementById('chatMessages');
            
            const messageElement = document.createElement('div');
            messageElement.className = 'message bot';
            
            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            messageElement.innerHTML = `
                <div class="message-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="message-content">
                    <p>${formatMessageText(text)}</p>
                    <div class="message-time">${time}</div>
                </div>
            `;
            
            chatMessages.appendChild(messageElement);
            scrollToBottom();
            
            // Increment message count
            messageCount++;
        }

        function showTypingIndicator() {
            const chatMessages = document.getElementById('chatMessages');
            
            const typingElement = document.createElement('div');
            typingElement.className = 'message bot typing';
            typingElement.id = 'typingIndicator';
            
            typingElement.innerHTML = `
                <div class="message-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="message-content">
                    <div class="typing-indicator">
                        <span></span><span></span><span></span>
                    </div>
                </div>
            `;
            
            chatMessages.appendChild(typingElement);
            scrollToBottom();
        }

        function hideTypingIndicator() {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        // Scroll handling variables
        let isScrolledToBottom = true;
        let userScrolled = false;
        
        function scrollToBottom() {
            const chatMessages = document.getElementById('chatMessages');
            if (!userScrolled || isScrolledToBottom) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }
        
        function checkScrollPosition() {
            const chatMessages = document.getElementById('chatMessages');
            const scrollPosition = chatMessages.scrollTop + chatMessages.clientHeight;
            isScrolledToBottom = scrollPosition >= chatMessages.scrollHeight - 30; // 30px threshold
            
            // If scrolled to bottom, reset userScrolled flag
            if (isScrolledToBottom) {
                userScrolled = false;
            }
        }

        function clearChat() {
            // Reset session
            sessionId = generateSessionId();
            document.getElementById('sessionId').textContent = sessionId;
            document.getElementById('responseTime').textContent = '-';
            
            // Reset metrics
            lastResponseTimes = [];
            messageCount = 0;
            
            // Initialize chat with welcome message
            initializeChat();
            
            // Reset scroll state
            userScrolled = false;
            isScrolledToBottom = true;
        }

        function toggleDebugInfo() {
            const isChecked = document.getElementById('debugInfo').checked;
            document.getElementById('chatDetails').style.display = isChecked ? 'flex' : 'none';
        }

        function toggleSystemPrompt() {
            const isChecked = document.getElementById('showSystemPrompt').checked;
            const systemPromptSection = document.getElementById('systemPromptSection');
            if (systemPromptSection) {
                systemPromptSection.style.display = isChecked ? 'block' : 'none';
            }
        }

        function updateMetrics() {
            document.getElementById('messageCount').textContent = messageCount;
            
            if (lastResponseTimes.length > 0) {
                const avg = lastResponseTimes.reduce((a, b) => a + b, 0) / lastResponseTimes.length;
                const max = Math.max(...lastResponseTimes);
                
                document.getElementById('avgResponseTime').textContent = `${avg.toFixed(1)}s`;
                document.getElementById('maxResponseTime').textContent = `${max.toFixed(1)}s`;
            } else {
                document.getElementById('avgResponseTime').textContent = '0.0s';
                document.getElementById('maxResponseTime').textContent = '0.0s';
            }
        }

        function formatMessageText(text) {
            if (typeof text === 'object' && text !== null) {
                if (text.text !== undefined) {
                    text = text.text;
                } else {
                    text = JSON.stringify(text);
                }
            }
            
            text = escapeHtml(text);
            text = text.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank">$1</a>');
            text = text.replace(/\n/g, '<br>');
            
            return text;
        }

        function escapeHtml(unsafe) {
            if (unsafe === undefined || unsafe === null) {
                return '';
            }
            
            return String(unsafe)
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
    </script>
}

@section Styles {
    <style>
        /* Base layout */
        .chatbot-test-container {
            max-width: 1600px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            min-height: calc(100vh - 80px);
        }
        
        /* Header styles */
        .test-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .chatbot-title-area {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .chatbot-name {
            font-size: 24px;
            font-weight: 600;
            margin: 0;
        }
        
        .status-indicator {
            font-size: 12px;
            padding: 4px 12px;
            border-radius: 20px;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .status-indicator.active {
            background-color: rgba(16, 185, 129, 0.1);
            color: #10b981;
        }
        
        .status-indicator.inactive {
            background-color: rgba(156, 163, 175, 0.1);
            color: #6b7280;
        }
        
        .status-indicator::before {
            content: '';
            display: inline-block;
            width: 6px;
            height: 6px;
            border-radius: 50%;
        }
        
        .status-indicator.active::before {
            background-color: #10b981;
        }
        
        .status-indicator.inactive::before {
            background-color: #6b7280;
        }
        
        .header-actions {
            display: flex;
            gap: 10px;
        }
        
        .btn-action {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            font-size: 14px;
            border-radius: 6px;
            text-decoration: none;
            transition: all 0.2s;
        }
        
        .btn-action.edit {
            background-color: #ffffff;
            border: 1px solid #e5e7eb;
            color: #1f2937;
        }
        
        .btn-action.back {
            background-color: transparent;
            border: 1px solid #e5e7eb;
            color: #6b7280;
        }
        
        .btn-action:hover {
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        /* Content layout */
        .test-content {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 20px;
            flex: 1;
        }
        
        /* Chat panel */
        .chat-panel {
            background-color: #ffffff;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            border: 1px solid #e5e7eb;
            height: 100%;
        }
        
        .chat-header {
            padding: 12px 16px;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #f9fafb;
        }
        
        .bot-identity {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .bot-avatar {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            background-color: #ebf4ff;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .bot-avatar i {
            color: #3b82f6;
            font-size: 16px;
        }
        
        .bot-name {
            font-weight: 500;
            color: #111827;
        }
        
        .connection-status {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 12px;
            color: #6b7280;
        }
        
        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #10b981;
        }
        
        .connection-status.connected .status-dot {
            background-color: #10b981;
        }
        
        .chat-actions {
            display: flex;
            gap: 8px;
            align-items: center;
        }
        
        /* Language selector */
        .language-selector {
            margin-right: 8px;
        }
        
        .language-select {
            padding: 4px 8px;
            border-radius: 6px;
            border: 1px solid #e5e7eb;
            background-color: #ffffff;
            font-size: 14px;
            color: #374151;
            cursor: pointer;
        }
        
        .language-select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
        }
        
        .btn-icon {
            width: 32px;
            height: 32px;
            border-radius: 6px;
            border: 1px solid #e5e7eb;
            background-color: #ffffff;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: #6b7280;
            transition: all 0.2s;
        }
        
        .btn-icon:hover {
            background-color: #f9fafb;
            color: #111827;
        }
        
        /* Chat messages */
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 16px;
            background-color: #f3f4f6;
            display: flex;
            flex-direction: column;
            gap: 16px;
            scroll-behavior: smooth;
            scrollbar-width: thin;
            scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
        }
        
        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }
        
        .chat-messages::-webkit-scrollbar-track {
            background: transparent;
        }
        
        .chat-messages::-webkit-scrollbar-thumb {
            background-color: rgba(156, 163, 175, 0.5);
            border-radius: 3px;
        }
        
        .message {
            display: flex;
            max-width: 85%;
        }
        
        .message.user {
            align-self: flex-end;
        }
        
        .message-avatar {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            background-color: #ebf4ff;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
            align-self: flex-start;
        }
        
        .message-avatar i {
            color: #3b82f6;
            font-size: 16px;
        }
        
        .message-content {
            background-color: #ffffff;
            padding: 12px 16px;
            border-radius: 12px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }
        
        .message.user .message-content {
            background-color: #3b82f6;
            color: #ffffff;
            border-top-right-radius: 4px;
        }
        
        .message.bot .message-content {
            border-top-left-radius: 4px;
        }
        
        .message-content p {
            margin: 0;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .message-time {
            font-size: 11px;
            color: #9ca3af;
            margin-top: 6px;
            text-align: right;
        }
        
        .message.user .message-time {
            color: rgba(255, 255, 255, 0.7);
        }
        
        /* Typing indicator */
        .typing-indicator {
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }
        
        .typing-indicator span {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background-color: #9ca3af;
            animation: bounce 1.4s infinite ease-in-out;
        }
        
        .typing-indicator span:nth-child(1) { animation-delay: 0s; }
        .typing-indicator span:nth-child(2) { animation-delay: 0.2s; }
        .typing-indicator span:nth-child(3) { animation-delay: 0.4s; }
        
        @@keyframes bounce {
            0%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-6px); }
        }
        
        /* Chat footer */
        .chat-footer {
            border-top: 1px solid #e5e7eb;
        }
        
        .session-info {
            display: flex;
            padding: 8px 16px;
            background-color: #f9fafb;
            font-size: 12px;
            border-bottom: 1px solid #e5e7eb;
            gap: 16px;
        }
        
        .session-label {
            color: #6b7280;
            margin-right: 4px;
        }
        
        .session-value {
            color: #4b5563;
            font-family: monospace;
        }
        
        .message-input-area {
            display: flex;
            align-items: center;
            background-color: #ffffff;
        }
        
        #messageInput {
            flex: 1;
            border: none;
            padding: 14px 16px;
            font-size: 14px;
            outline: none;
        }
        
        .send-button {
            width: 48px;
            height: 48px;
            background-color: #3b82f6;
            border: none;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }
        
        .send-button:hover {
            background-color: #2563eb;
        }
        
        /* Info panel */
        .info-panel {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
        
        .info-section {
            background-color: #ffffff;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
            overflow: hidden;
        }
        
        .section-title {
            font-size: 14px;
            font-weight: 600;
            margin: 0;
            padding: 12px 16px;
            border-bottom: 1px solid #e5e7eb;
            background-color: #f9fafb;
        }
        
        .info-content {
            padding: 16px;
        }
        
        .info-row {
            display: flex;
            gap: 16px;
            margin-bottom: 16px;
        }
        
        .info-row:last-child {
            margin-bottom: 0;
        }
        
        .info-item {
            display: flex;
            flex: 1;
            gap: 12px;
        }
        
        .info-item.full-width {
            flex-basis: 100%;
        }
        
        .info-icon {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            background-color: #f3f4f6;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .info-icon i {
            color: #4b5563;
            font-size: 14px;
        }
        
        .info-details {
            flex: 1;
        }
        
        .info-label {
            font-size: 12px;
            color: #6b7280;
            margin-bottom: 4px;
        }
        
        .info-value {
            font-size: 14px;
            color: #111827;
        }
        
        .description-text {
            line-height: 1.5;
        }
        
        /* Settings */
        .settings-content {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
        
        .setting-item {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .toggle-switch {
            position: relative;
            width: 40px;
            height: 22px;
        }
        
        .toggle-input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .toggle-label {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #e5e7eb;
            transition: .4s;
            border-radius: 34px;
        }
        
        .toggle-label:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        .toggle-input:checked + .toggle-label {
            background-color: #3b82f6;
        }
        
        .toggle-input:checked + .toggle-label:before {
            transform: translateX(18px);
        }
        
        .setting-label {
            font-size: 14px;
            color: #4b5563;
        }
        
        /* System prompt */
        .system-prompt {
            background-color: #f9fafb;
            border-radius: 8px;
            padding: 12px;
            font-family: monospace;
            font-size: 13px;
            color: #4b5563;
            white-space: pre-wrap;
            max-height: 200px;
            overflow-y: auto;
        }
        
        /* Metrics */
        .metrics-content {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            text-align: center;
        }
        
        .metric-value {
            font-size: 24px;
            font-weight: 600;
            color: #111827;
            margin-bottom: 4px;
        }
        
        .metric-label {
            font-size: 12px;
            color: #6b7280;
        }
        
        /* Responsive adjustments */
        @@media (max-width: 992px) {
            .test-content {
                grid-template-columns: 1fr;
                grid-template-rows: auto auto;
            }
            
            .chat-panel {
                order: 1;
            }
            
            .info-panel {
                order: 2;
            }
        }
        
        @@media (max-width: 640px) {
            .test-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .header-actions {
                width: 100%;
                justify-content: space-between;
            }
            
            .info-row {
                flex-direction: column;
            }
            
            .metrics-content {
                grid-template-columns: 1fr;
                gap: 16px;
            }
        }
    </style>
}