@model AIHelpdeskSupport.Models.Chatbot
@{
    ViewData["Title"] = "Test Chatbot";
}

<div class="page-header d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="page-title">Test Chatbot</h1>
        <p class="text-muted">Test and interact with your chatbot in real-time</p>
    </div>
    <div class="page-actions">
        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary me-2" id="editChatbotBtn">
            <i class="bi bi-pencil me-1"></i> Edit Chatbot
        </a>
        <a asp-action="Index" class="btn btn-outline-secondary" id="backToListBtn">
            <i class="bi bi-arrow-left me-1"></i> Back to List
        </a>
    </div>
</div>

<div class="test-container">
    <!-- Left panel: Chatbot information -->
    <div class="info-panel">
        <div class="card chatbot-info">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h2>@Model.Name</h2>
                <span class="badge @(Model.IsActive ? "bg-success" : "bg-danger")">
                    @(Model.IsActive ? "Active" : "Inactive")
                </span>
            </div>
            <div class="card-body">
                <div class="info-section">
                    <h3>Configuration</h3>
                    <div class="info-item">
                        <span class="info-label"><i class="bi bi-building"></i> Department</span>
                        <span class="info-value">@Model.Department</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label"><i class="bi bi-cpu"></i> AI Model</span>
                        <span class="info-value">@Model.AiModel</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label"><i class="bi bi-key"></i> Flowise ID</span>
                        <span class="info-value text-truncate" title="@Model.FlowiseId">
                            @(string.IsNullOrEmpty(Model.FlowiseId) ? "Not configured" : Model.FlowiseId)
                        </span>
                    </div>
                </div>

                <div class="info-section">
                    <h3>Details</h3>
                    <div class="info-item">
                        <span class="info-label"><i class="bi bi-info-circle"></i> Description</span>
                        <span class="info-value">@(string.IsNullOrEmpty(Model.Description) ? "No description provided" : Model.Description)</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label"><i class="bi bi-calendar"></i> Created</span>
                        <span class="info-value">@Model.CreatedAt.ToString("yyyy-MM-dd")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label"><i class="bi bi-person"></i> Created By</span>
                        <span class="info-value">@Model.CreatedBy</span>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(Model.SystemPrompt))
                {
                    <div class="info-section">
                        <h3>System Prompt</h3>
                        <div class="system-prompt">@Model.SystemPrompt</div>
                    </div>
                }
            </div>
        </div>

        <div class="card mt-4 test-options">
            <div class="card-header">
                <h3>Test Options</h3>
            </div>
            <div class="card-body">
                <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="showDetails" checked>
                    <label class="form-check-label" for="showDetails">Show Debug Information</label>
                </div>
                <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="showSystemPrompt">
                    <label class="form-check-label" for="showSystemPrompt">Show System Prompt</label>
                </div>
                <button id="clearChat" class="btn btn-outline-danger w-100">
                    <i class="bi bi-trash me-1"></i> Clear Chat History
                </button>
            </div>
        </div>
    </div>

    <!-- Right panel: Chat interface -->
    <div class="chat-panel">
        <div class="card chat-container">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <div class="avatar-container me-2 @(Model.IsActive ? "active" : "")">
                        <i class="bi bi-robot"></i>
                    </div>
                    <h3 class="mb-0">@Model.Name</h3>
                </div>
                <div class="chat-status">
                    <span id="statusIndicator" class="connecting">
                        <span id="statusDot"></span>
                        <span id="statusText">Connecting...</span>
                    </span>
                </div>
            </div>
            <div class="card-body chat-messages" id="chatMessages">
                <div class="welcome-message">
                    <h4>Welcome to the @Model.Name chatbot</h4>
                    <p>This is a test interface for your chatbot. Type a message below to start the conversation.</p>
                    <div class="suggestions">
                        <button class="suggestion-btn" onclick="sendSuggestion(this)">Tell me about yourself</button>
                        <button class="suggestion-btn" onclick="sendSuggestion(this)">What can you help me with?</button>
                        <button class="suggestion-btn" onclick="sendSuggestion(this)">How does this work?</button>
                    </div>
                </div>
                <!-- Chat messages will be added here by JavaScript -->
            </div>
            <div class="input-container">
                <div id="chatDetails" class="chat-details">
                    <div class="details-container">
                        <div class="detail-item">
                            <span class="detail-label">Session ID:</span>
                            <span id="sessionId" class="detail-value">-</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Last Response Time:</span>
                            <span id="responseTime" class="detail-value">-</span>
                        </div>
                    </div>
                </div>
                <form id="chatForm" class="d-flex">
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type your message here...">
                        <button type="submit" class="send-button">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"/>
                            </svg>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Main layout */
        .test-container {
            display: grid;
            grid-template-columns: 350px 1fr;
            gap: 1.5rem;
            min-height: calc(100vh - 250px);
        }

        @@media (max-width: 992px) {
            .test-container {
                grid-template-columns: 1fr;
            }
            .info-panel {
                order: 2;
            }
            .chat-panel {
                order: 1;
            }
        }

        /* Buttons */
        #editChatbotBtn, #backToListBtn {
            font-weight: 500;
            font-size: 0.875rem;
        }

        /* Info panel */
        .info-panel {
            display: flex;
            flex-direction: column;
        }

        .chatbot-info {
            height: auto;
            overflow: hidden;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .chatbot-info .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #efefef;
            padding: 0.875rem 1rem;
        }

        .chatbot-info .card-header h2 {
            font-size: 1.125rem;
            margin: 0;
            font-weight: 600;
        }

        .info-section {
            margin-bottom: 1.5rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid #efefef;
        }

        .info-section:last-child {
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
        }

        .info-section h3 {
            font-size: 0.9375rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: #495057;
        }

        .info-item {
            display: flex;
            margin-bottom: 0.75rem;
            font-size: 0.875rem;
        }

        .info-label {
            min-width: 120px;
            color: #6c757d;
            display: flex;
            align-items: center;
        }

        .info-label i {
            margin-right: 0.5rem;
            font-size: 0.875rem;
        }

        .info-value {
            flex: 1;
            font-weight: 500;
            color: #212529;
        }

        .system-prompt {
            padding: 0.75rem;
            background-color: #f8f9fa;
            border-radius: 0.375rem;
            border: 1px solid #efefef;
            white-space: pre-wrap;
            font-size: 0.875rem;
            color: #495057;
            font-family: monospace;
        }

        .test-options .card-header {
            background-color: #f8f9fa;
            font-size: 0.9375rem;
            padding: 0.75rem 1rem;
        }

        .test-options .card-header h3 {
            font-size: 0.9375rem;
            margin: 0;
            font-weight: 600;
        }

        /* Chat panel */
        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100%;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .chat-container .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #efefef;
            padding: 0.875rem 1rem;
            flex-shrink: 0;
        }

        .chat-container .card-header h3 {
            font-size: 1.0625rem;
            font-weight: 600;
            margin: 0;
        }

        .avatar-container {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .avatar-container.active::after {
            content: '';
            position: absolute;
            width: 8px;
            height: 8px;
            background-color: #28a745;
            border-radius: 50%;
            bottom: 0;
            right: 0;
            border: 1.5px solid #f8f9fa;
        }

        .avatar-container i {
            font-size: 1rem;
            color: #495057;
        }

        .chat-status {
            font-size: 0.75rem;
            display: flex;
            align-items: center;
        }

        #statusDot {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 6px;
            background-color: #ffc107;
        }
        
        .connected #statusDot {
            background-color: #28a745;
        }
        
        .error #statusDot {
            background-color: #dc3545;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1.25rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            background-color: #f8f9fa;
            max-height: calc(100vh - 340px);
        }

        .welcome-message {
            text-align: center;
            padding: 2rem 1rem;
            background-color: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
        }

        .welcome-message h4 {
            font-size: 1.0625rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .welcome-message p {
            color: #6c757d;
            margin-bottom: 1.5rem;
        }

        .suggestions {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            justify-content: center;
        }

        .suggestion-btn {
            background-color: #e9ecef;
            border: none;
            border-radius: 1rem;
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
            color: #495057;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .suggestion-btn:hover {
            background-color: #dee2e6;
        }

        .message {
            display: flex;
            margin-bottom: 1.25rem;
            position: relative;
            max-width: 100%;
        }

        .message.user {
            justify-content: flex-end;
        }

        .message-content {
            max-width: 85%;
            padding: 1rem 1.25rem;
            border-radius: 1rem;
            position: relative;
            word-break: break-word;
            white-space: pre-line;
        }

        .message.bot .message-content {
            background-color: white;
            border: 1px solid #e9ecef;
            border-bottom-left-radius: 0.25rem;
            margin-left: 8px;
            color: #212529;
        }

        .message.user .message-content {
            background-color: #0d6efd;
            color: white;
            border-bottom-right-radius: 0.25rem;
            text-align: right;
        }

        .message-time {
            font-size: 0.7rem;
            margin-top: 0.5rem;
            text-align: right;
            opacity: 0.7;
        }

        .message.bot .avatar {
            min-width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 4px;
        }

        .message.bot .avatar i {
            font-size: 1.1rem;
            color: #495057;
        }

        /* New input container styling */
        .input-container {
            padding: 0;
            background-color: white;
            border-top: 1px solid #efefef;
        }

        .chat-details {
            padding: 8px 12px 4px;
            font-size: 0.75rem;
            color: #6c757d;
        }

        .details-container {
            display: flex;
            gap: 1rem;
        }

        .detail-label {
            color: #adb5bd;
        }

        .detail-value {
            font-family: monospace;
        }

        #chatForm {
            padding: 0;
            margin: 0;
            border-top: 1px solid rgba(0,0,0,0.05);
        }

        .input-group {
            margin: 0;
            border-radius: 0;
        }

        #messageInput {
            border: none;
            padding: 12px 16px;
            font-size: 14px;
            height: 46px;
            box-shadow: none;
            border-radius: 0;
        }

        #messageInput:focus {
            box-shadow: none;
            outline: none;
        }

        /* Fixed send button */
        .send-button {
            background-color: #0d6efd;
            border: none;
            width: 48px;
            height: 48px;
            color: white;
            border-radius: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            padding: 0;
        }

        .send-button svg {
            width: 20px;
            height: 20px;
            margin-right: 2px;
            margin-bottom: 2px;
        }

        .send-button:hover {
            background-color: #0b5ed7;
        }

        .typing-indicator {
            display: inline-flex;
            align-items: center;
            margin: 0.5rem 0;
        }

        .typing-indicator span {
            width: 5px;
            height: 5px;
            background-color: #adb5bd;
            border-radius: 50%;
            display: inline-block;
            margin: 0 1px;
            opacity: 0.8;
            animation: typing 1.4s infinite both;
        }

        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }

        @@keyframes typing {
            0% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
            100% { transform: translateY(0); }
        }
    </style>
}

@section Scripts {
    <script>
        let sessionId = null;
        let isConnected = false;
        let lastResponseTimes = [];
        
        // Flowise API configuration
        const FLOWISE_API_URL = "http://localhost:3000/api/v1/prediction/@Model.FlowiseId";
        const FLOWISE_API_KEY = "0DE04hQaVt8RqxvR_rMigpeFm7n7twJq7TRlKJB4MqY"; // This should ideally come from server-side config

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize UI
            initializeChat();

            // Handle form submission
            document.getElementById('chatForm').addEventListener('submit', function(e) {
                e.preventDefault();
                sendMessage();
            });

            // Handle clear chat button
            document.getElementById('clearChat').addEventListener('click', clearChat);

            // Handle show details toggle
            document.getElementById('showDetails').addEventListener('change', function() {
                document.getElementById('chatDetails').style.display = this.checked ? 'block' : 'none';
            });
            
            // Focus input field initially
            document.getElementById('messageInput').focus();
        });

        function initializeChat() {
            // Generate a new session ID
            sessionId = `session-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;
            document.getElementById('sessionId').textContent = sessionId;

            // Set connected status after checking Flowise connection
            testFlowiseConnection()
                .then(isAvailable => {
                    const statusIndicator = document.getElementById('statusIndicator');
                    const statusText = document.getElementById('statusText');
                    
                    if (isAvailable) {
                        statusIndicator.classList.remove('connecting');
                        statusIndicator.classList.add('connected');
                        statusText.textContent = 'Connected';
                        isConnected = true;
                        
                        // Add initial bot message
                        const welcomeText = `Hello! I'm the ${@Json.Serialize(Model.Name)} assistant. How can I help you today?`;
                        addBotMessage(welcomeText);
                    } else {
                        statusIndicator.classList.remove('connecting');
                        statusIndicator.classList.add('error');
                        statusText.textContent = 'Disconnected';
                    }
                })
                .catch(error => {
                    console.error('Connection test error:', error);
                    const statusIndicator = document.getElementById('statusIndicator');
                    const statusText = document.getElementById('statusText');
                    statusIndicator.classList.remove('connecting');
                    statusIndicator.classList.add('error');
                    statusText.textContent = 'Error';
                });
        }

        async function testFlowiseConnection() {
            try {
                // Simple connection test by sending a minimal query
                const response = await fetch(FLOWISE_API_URL, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${FLOWISE_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        question: "Connection test",
                        overrideConfig: {}
                    })
                });
                
                return response.ok;
            } catch (error) {
                console.error('Connection test failed:', error);
                return false;
            }
        }

        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (!message) return;
            
            // Add user message to chat
            addUserMessage(message);
            
            // Clear input
            messageInput.value = '';
            
            // Show typing indicator
            showTypingIndicator();
            
            // Send to API and get response
            const startTime = performance.now();
            callFlowiseAPI(message)
                .then(response => {
                    // Calculate response time
                    const endTime = performance.now();
                    const responseTime = ((endTime - startTime) / 1000).toFixed(2);
                    document.getElementById('responseTime').textContent = `${responseTime}s`;
                    
                    // Track response times for average calculation
                    lastResponseTimes.push(parseFloat(responseTime));
                    if (lastResponseTimes.length > 5) lastResponseTimes.shift();
                    
                    // Hide typing indicator
                    hideTypingIndicator();
                    
                    // Add bot response
                    addBotMessage(response);
                })
                .catch(error => {
                    console.error('Error:', error);
                    hideTypingIndicator();
                    
                    // Add error message to chat
                    addBotMessage('Sorry, I encountered an error while processing your request. Please try again.');
                });
        }

        function sendSuggestion(button) {
            const message = button.textContent;
            document.getElementById('messageInput').value = message;
            sendMessage();
        }

        async function callFlowiseAPI(message) {
            try {
                const flowiseId = @Json.Serialize(Model.FlowiseId);
                
                if (!flowiseId) {
                    return "This chatbot doesn't have a Flowise ID configured. Please set up the Flowise integration in the Edit page.";
                }

                // Make direct API call to Flowise
                const response = await fetch(FLOWISE_API_URL, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${FLOWISE_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        question: message,
                        sessionId: sessionId,
                        overrideConfig: {}
                    })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`API error: ${response.status} - ${errorText}`);
                }

                const data = await response.json();
                
                // Extract just the text field from the response
                if (typeof data === 'object' && data !== null) {
                    // If response is like {"text": "actual message"}
                    if (data.text !== undefined) {
                        return data.text;
                    }
                    
                    // If it's a different JSON structure, try to give meaningful output
                    return JSON.stringify(data);
                }
                
                return data || "No response received";
            } catch (error) {
                console.error('API call failed:', error);
                throw error;
            }
        }

        function addUserMessage(text) {
            const chatMessages = document.getElementById('chatMessages');
            const welcome = document.querySelector('.welcome-message');
            
            // Remove welcome message if present
            if (welcome) {
                welcome.remove();
            }
            
            const messageElement = document.createElement('div');
            messageElement.className = 'message user';
            
            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            messageElement.innerHTML = `
                <div class="message-content">
                    ${escapeHtml(text)}
                    <div class="message-time">${time}</div>
                </div>
            `;
            
            chatMessages.appendChild(messageElement);
            scrollToBottom();
        }

        function addBotMessage(text) {
            const chatMessages = document.getElementById('chatMessages');
            
            const messageElement = document.createElement('div');
            messageElement.className = 'message bot';
            
            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            messageElement.innerHTML = `
                <div class="avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="message-content">
                    ${formatMessageText(text)}
                    <div class="message-time">${time}</div>
                </div>
            `;
            
            chatMessages.appendChild(messageElement);
            scrollToBottom();
        }

        function formatMessageText(text) {
            // If text is an object (like a JSON response), try to extract the text field
            if (typeof text === 'object' && text !== null) {
                if (text.text !== undefined) {
                    text = text.text;
                } else {
                    text = JSON.stringify(text);
                }
            }
            
            // Sanitize the text first to prevent XSS
            text = escapeHtml(text);
            
            // Convert URLs to links, but only if they're complete URLs
            text = text.replace(
                /(https?:\/\/[^\s]+)/g, 
                '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>'
            );
            
            // Convert line breaks to <br>
            text = text.replace(/\n/g, '<br>');
            
            return text;
        }

        function escapeHtml(unsafe) {
            if (unsafe === undefined || unsafe === null) {
                return '';
            }
            
            return String(unsafe)
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        function showTypingIndicator() {
            const chatMessages = document.getElementById('chatMessages');
            
            const typingElement = document.createElement('div');
            typingElement.className = 'message bot typing';
            typingElement.id = 'typingIndicator';
            
            typingElement.innerHTML = `
                <div class="avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="message-content">
                    <div class="typing-indicator">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            `;
            
            chatMessages.appendChild(typingElement);
            scrollToBottom();
        }

        function hideTypingIndicator() {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        function scrollToBottom() {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function clearChat() {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.innerHTML = `
                <div class="welcome-message">
                    <h4>Welcome to the ${@Json.Serialize(Model.Name)} chatbot</h4>
                    <p>This is a test interface for your chatbot. Type a message below to start the conversation.</p>
                    <div class="suggestions">
                        <button class="suggestion-btn" onclick="sendSuggestion(this)">Tell me about yourself</button>
                        <button class="suggestion-btn" onclick="sendSuggestion(this)">What can you help me with?</button>
                        <button class="suggestion-btn" onclick="sendSuggestion(this)">How does this work?</button>
                    </div>
                </div>
            `;
            
            // Reset session
            sessionId = `session-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;
            document.getElementById('sessionId').textContent = sessionId;
            document.getElementById('responseTime').textContent = '-';
            lastResponseTimes = [];
        }
    </script>
}