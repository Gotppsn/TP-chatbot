@model AIHelpdeskSupport.Models.Chatbot
@{
    ViewData["Title"] = "Edit Chatbot";

    // Get departments list from ViewBag
    var allDepartments = ViewBag.Departments as List<string> ?? new List<string>();

    // Ensure we have the selected departments list from the model
    var selectedDepartments = Model.Departments ?? new List<string>();
    if (!string.IsNullOrEmpty(Model.Department) && !selectedDepartments.Contains(Model.Department))
    {
        selectedDepartments.Add(Model.Department);
    }

    // Set up access control variables
    var allowSpecificUsers = Model.AccessType == "Specific";
    var allowedUsers = Model.AllowedUsers ?? new List<string>();
}

<div class="page-header">
    <div>
        <h1 class="page-title">Edit Chatbot</h1>
        <p class="text-muted">Update your AI-powered chatbot configuration</p>
    </div>
    <div class="page-actions">
        <a href="/Chatbot" class="btn btn-outline">
            <i class="bi bi-arrow-left"></i>
            <span>Back to List</span>
        </a>
        <a href="/Chatbot/Test/@Model.Id" class="btn btn-primary">
            <i class="bi bi-chat-dots"></i>
            <span>Test Chatbot</span>
        </a>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <div class="chatbot-edit-header">
            <div class="d-flex align-items-center">
                <div class="chatbot-icon primary">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="chatbot-info">
                    <h2 class="chatbot-title">@Model.Name</h2>
                    <div class="chatbot-meta">
                        <span class="badge bg-@(Model.IsActive ? "success" : "secondary")">
                            @(Model.IsActive ? "Active" : "Inactive")
                        </span>
                    </div>
                </div>
            </div>
            <div class="chatbot-stats">
                <div class="stat-item">
                    <div class="stat-value" id="conversationsCount">0</div>
                    <div class="stat-label">Conversations</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="avgResponseTime">0.0s</div>
                    <div class="stat-label">Avg. Response</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="successRate">0%</div>
                    <div class="stat-label">Success Rate</div>
                </div>
            </div>
        </div>
    </div>

    <div class="card-body">
        <form asp-action="Edit" method="post">
            <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="CreatedAt" />
            <input type="hidden" asp-for="CreatedBy" />

            <div class="form-group mb-4">
                <label asp-for="FlowiseId" class="form-label">Flowise Chatflow ID <span
                        class="required">*</span></label>
                <input type="text" asp-for="FlowiseId" class="form-control" placeholder="e.g. 275a8c78-fa28-494c-98a5"
                    required />
                <div class="form-text">
                    The Flowise Chatflow ID connects this chatbot to your AI workflow
                </div>
                <span asp-validation-for="FlowiseId" class="text-danger"></span>
            </div>

            <div class="form-group mb-4">
                <label asp-for="Name" class="form-label">Chatbot Name <span class="required">*</span></label>
                <input asp-for="Name" class="form-control" placeholder="e.g. Customer Support Bot" required />
                <div class="form-text">
                    The name displayed to users and administrators
                </div>
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <!-- Multiple Department Selection -->
            <div class="form-group mb-4">
                <label class="form-label">Departments</label>
                <div class="departments-container">
                    @foreach (var department in allDepartments)
                    {
                        bool isSelected = selectedDepartments.Contains(department);
                        bool isPrimary = department == Model.Department;
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="Departments"
                                id="dept-@department.Replace(" ", "-")" value="@department" @(isSelected ? "checked" : "")
                                @(isPrimary ? "data-primary=true" : "")>
                            <label class="form-check-label" for="dept-@department.Replace(" ", "-")">
                                @department
                            </label>
                        </div>
                    }
                </div>
                <div class="form-text">
                    Select departments that can manage this chatbot. The first selected department will be the primary
                    one.
                </div>
                <!-- Hidden input for the primary Department property -->
                <input type="hidden" asp-for="Department" id="primaryDepartment" value="@Model.Department" />
            </div>

            <!-- User Access Control -->
            <div class="form-group mb-4">
                <label class="form-label">User Access</label>
                <div class="mb-3">
                    <select id="accessType" class="form-control" name="AccessType" style="max-width: 300px;">
                        @if (Model.AccessType == "Specific")
                        {
                            <option value="All">All Users</option>
                            <option value="Specific" selected>Specific Users</option>
                        }
                        else
                        {
                            <option value="All" selected>All Users</option>
                            <option value="Specific">Specific Users</option>
                        }
                    </select>
                    <div class="form-text">
                        Control which users can access this chatbot
                    </div>
                </div>

                <div id="userAccessContainer" class="mt-3 @(Model.AccessType == "Specific" ? "" : "d-none")">
                    <div class="input-group mb-3">
                        <input type="text" id="userSearch" class="form-control" placeholder="Search users...">
                        <button type="button" id="addUserBtn" class="btn btn-outline-primary">
                            <i class="bi bi-plus"></i> Add
                        </button>
                    </div>

                    <div class="selected-users-container">
                        <div class="selected-users" id="selectedUsers">
                            @foreach (var user in Model.AllowedUsers ?? new List<string>())
                            {
                                <div class="selected-user-item">
                                    <span>@user</span>
                                    <input type="hidden" name="AllowedUsers" value="@user">
                                    <button type="button" class="btn-remove">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group mb-4">
                <label asp-for="Description" class="form-label">Description</label>
                <textarea asp-for="Description" class="form-control" rows="3"
                    placeholder="Describe what this chatbot will help with..."></textarea>
                <div class="form-text">
                    Detailed information about this chatbot's purpose and capabilities
                </div>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group mb-4">
                <div class="form-switch">
                    <input asp-for="IsActive" class="form-switch-input" />
                    <label asp-for="IsActive" class="form-switch-label">Active</label>
                </div>
                <div class="form-text">Enable or disable this chatbot</div>
            </div>

            <div class="form-info-box">
                <div class="info-icon"><i class="bi bi-clock-history"></i></div>
                <div class="info-content">
                    <div class="info-title">Chatbot History</div>
                    <div class="info-details">
                        <div class="info-item">
                            <span class="info-label">Created by:</span>
                            <span class="info-value">@Model.CreatedBy</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Created on:</span>
                            <span class="info-value">@Model.CreatedAt.ToString("MMM d, yyyy")</span>
                        </div>
                        @if (Model.LastUpdatedAt.HasValue)
                        {
                            <div class="info-item">
                                <span class="info-label">Last updated:</span>
                                <span class="info-value">@Model.LastUpdatedAt.Value.ToString("MMM d, yyyy HH:mm")</span>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="form-buttons">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-check-lg"></i>
                    Save Changes
                </button>
            </div>
        </form>

        <div class="danger-zone mt-5">
            <h4 class="danger-zone-title">Danger Zone</h4>
            <div class="danger-zone-content">
                <div class="danger-action">
                    <div class="danger-info">
                        <div class="danger-title">Delete this chatbot</div>
                        <div class="danger-description">Once deleted, all conversations and configurations will be
                            permanently removed.</div>
                    </div>
                    <button type="button" class="btn btn-outline-danger" onclick="confirmDelete(@Model.Id)">
                        Delete Chatbot
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Chatbot</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone.
                </div>
                <p>Are you sure you want to delete this chatbot? All conversations and configurations will be
                    permanently removed.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline" data-bs-dismiss="modal">Cancel</button>
                <form method="post" action="/Chatbot/Delete/@Model.Id">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">Delete Permanently</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- User Search Results Modal -->
<div class="modal" id="userSearchModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select Users</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="search-input-container mb-3">
                    <input type="text" id="modalUserSearch" class="form-control" placeholder="Filter users...">
                </div>
                <div class="search-results-container">
                    <div id="userSearchResults" class="user-search-results">
                        <!-- Results will be populated by JS -->
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Fetch chatbot stats
            fetchChatbotStats(@Model.Id);

            // Department selection handling
            const departmentCheckboxes = document.querySelectorAll('input[name="Departments"]');
            const primaryDepartmentInput = document.getElementById('primaryDepartment');

            // Ensure at least one department is selected and update primary department
            departmentCheckboxes.forEach(function (checkbox) {
                checkbox.addEventListener('change', function () {
                    // Get all selected departments
                    const selectedDepts = Array.from(document.querySelectorAll('input[name="Departments"]:checked'));

                    // If none selected and this was unchecked, check it again
                    if (selectedDepts.length === 0) {
                        this.checked = true;
                        return;
                    }

                    // If this is the primary and it's unchecked, make the first selected one primary
                    if (this.getAttribute('data-primary') === 'true' && !this.checked) {
                        // Remove primary flag from this
                        this.removeAttribute('data-primary');

                        // Set the first checked one as primary
                        if (selectedDepts.length > 0) {
                            selectedDepts[0].setAttribute('data-primary', 'true');
                            primaryDepartmentInput.value = selectedDepts[0].value;
                        }
                    }

                    // If this is newly checked and no primary is set, make it primary
                    if (this.checked && !document.querySelector('input[name="Departments"][data-primary="true"]')) {
                        this.setAttribute('data-primary', 'true');
                        primaryDepartmentInput.value = this.value;
                    }
                });
            });

            // Delete modal functionality
            window.confirmDelete = function (id) {
                const modal = document.getElementById('deleteConfirmModal');
                modal.classList.add('show');
                document.body.classList.add('modal-open');
            };

            // Access type toggle
            const accessTypeSelect = document.getElementById('accessType');
            const userAccessContainer = document.getElementById('userAccessContainer');

            accessTypeSelect.addEventListener('change', function () {
                if (this.value === 'Specific') {
                    userAccessContainer.classList.remove('d-none');
                } else {
                    userAccessContainer.classList.add('d-none');
                }
            });

            // User search and selection
            const userSearch = document.getElementById('userSearch');
            const modalUserSearch = document.getElementById('modalUserSearch');
            const addUserBtn = document.getElementById('addUserBtn');
            const userSearchModal = document.getElementById('userSearchModal');
            const userSearchResults = document.getElementById('userSearchResults');
            const selectedUsers = document.getElementById('selectedUsers');

            addUserBtn.addEventListener('click', function () {
                // Clear previous results
                userSearchResults.innerHTML = '';

                // Clear modal search
                if (modalUserSearch) modalUserSearch.value = '';

                // Get selected users
                const selectedUserIds = Array.from(
                    document.querySelectorAll('.selected-user-item input[name="AllowedUsers"]')
                ).map(input => input.value);

                // Show loading state
                userSearchResults.innerHTML = '<div class="text-center py-3"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">Loading users...</p></div>';

                // Fetch users from API
                fetch('/api/Users/GetAll')
                    .then(response => response.json())
                    .then(users => {
                        userSearchResults.innerHTML = '';

                        // Filter out already selected users
                        const availableUsers = users.filter(u => !selectedUserIds.includes(u.userName));

                        if (availableUsers.length === 0) {
                            userSearchResults.innerHTML = `
                                    <div class="no-results-message">
                                        <i class="bi bi-info-circle"></i>
                                        <p>All users have been added or no users available.</p>
                                    </div>
                                `;
                            return;
                        }

                        // Sort users by name
                        availableUsers.sort((a, b) =>
                            (a.firstName + ' ' + a.lastName).localeCompare(b.firstName + ' ' + b.lastName)
                        );

                        // Create user elements
                        availableUsers.forEach(function (user) {
                            const userEl = document.createElement('div');
                            userEl.className = 'user-search-item';
                            userEl.dataset.username = user.userName;
                            userEl.dataset.fullname = user.firstName + ' ' + user.lastName;

                            const userInfo = document.createElement('div');
                            userInfo.className = 'user-info';

                            const userName = document.createElement('div');
                            userName.className = 'user-name';
                            userName.textContent = user.firstName + ' ' + user.lastName;

                            const userUsername = document.createElement('div');
                            userUsername.className = 'user-username';
                            userUsername.textContent = '@@' + user.userName;

                            const addButton = document.createElement('button');
                            addButton.type = 'button';
                            addButton.className = 'btn btn-sm btn-outline-primary select-user';
                            addButton.setAttribute('data-username', user.userName);
                            addButton.textContent = 'Add';

                            userInfo.appendChild(userName);
                            userInfo.appendChild(userUsername);
                            userEl.appendChild(userInfo);
                            userEl.appendChild(addButton);

                            userSearchResults.appendChild(userEl);
                        });

                        // Add event listeners to select buttons
                        document.querySelectorAll('.select-user').forEach(function (button) {
                            button.addEventListener('click', function () {
                                const username = this.getAttribute('data-username');
                                addSelectedUser(username);
                                this.closest('.user-search-item').remove();
                            });
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching users:', error);
                        userSearchResults.innerHTML = `
                                <div class="no-results-message">
                                    <i class="bi bi-exclamation-triangle"></i>
                                    <p>Error loading users. Please try again.</p>
                                </div>
                            `;
                    });

                // Show modal
                userSearchModal.classList.add('show');
                document.body.classList.add('modal-open');
            });

            // Modal search filter functionality
            if (modalUserSearch) {
                modalUserSearch.addEventListener('input', function () {
                    const searchTerm = this.value.toLowerCase();

                    document.querySelectorAll('.user-search-item').forEach(item => {
                        const fullname = item.dataset.fullname.toLowerCase();
                        const username = item.dataset.username.toLowerCase();

                        if (fullname.includes(searchTerm) || username.includes(searchTerm)) {
                            item.style.display = '';
                        } else {
                            item.style.display = 'none';
                        }
                    });

                    // Check if any results are visible
                    const anyVisible = Array.from(
                        document.querySelectorAll('.user-search-item')
                    ).some(el => el.style.display !== 'none');

                    // Show no results message if needed
                    let noResults = document.querySelector('.no-results-message');
                    if (!anyVisible) {
                        if (!noResults) {
                            noResults = document.createElement('div');
                            noResults.className = 'no-results-message';
                            noResults.innerHTML = `
                                    <i class="bi bi-search"></i>
                                    <p>No users match your search.</p>
                                `;
                            userSearchResults.appendChild(noResults);
                        } else {
                            noResults.style.display = '';
                        }
                    } else if (noResults) {
                        noResults.style.display = 'none';
                    }
                });
            }

            function addSelectedUser(username) {
                // Check if user is already selected
                const existingUsers = Array.from(document.querySelectorAll('.selected-user-item input[name="AllowedUsers"]'))
                    .map(input => input.value);

                if (existingUsers.includes(username)) {
                    return;
                }

                const userItem = document.createElement('div');
                userItem.className = 'selected-user-item';

                const span = document.createElement('span');
                span.textContent = username;

                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'AllowedUsers';
                input.value = username;

                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'btn-remove';

                const icon = document.createElement('i');
                icon.className = 'bi bi-x';

                removeBtn.appendChild(icon);
                userItem.appendChild(span);
                userItem.appendChild(input);
                userItem.appendChild(removeBtn);

                selectedUsers.appendChild(userItem);

                // Add remove event listener
                removeBtn.addEventListener('click', function () {
                    userItem.remove();
                });
            }

            // Initialize remove buttons for existing users
            document.querySelectorAll('.selected-user-item .btn-remove').forEach(function (button) {
                button.addEventListener('click', function () {
                    this.closest('.selected-user-item').remove();
                });
            });

            // Close modal buttons
            document.querySelectorAll('.btn-close, [data-bs-dismiss="modal"]').forEach(function (button) {
                button.addEventListener('click', function () {
                    const modal = this.closest('.modal');
                    modal.classList.remove('show');
                    document.body.classList.remove('modal-open');
                });
            });

            // Close modal on outside click
            document.querySelectorAll('.modal').forEach(function (modal) {
                modal.addEventListener('click', function (event) {
                    if (event.target === this) {
                        this.classList.remove('show');
                        document.body.classList.remove('modal-open');
                    }
                });
            });

            // Fetch chatbot stats
            function fetchChatbotStats(chatbotId) {
                fetch(`/api/Chatbot/Stats/${chatbotId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        document.getElementById('conversationsCount').textContent = data.conversations || '0';
                        document.getElementById('avgResponseTime').textContent =
                            ((data.avgResponseTime || 0).toFixed(1)) + 's';
                        document.getElementById('successRate').textContent =
                            (data.successRate || 0) + '%';
                    })
                    .catch(error => {
                        console.error('Error fetching chatbot stats:', error);
                        // Set default values when error occurs
                        document.getElementById('conversationsCount').textContent = '0';
                        document.getElementById('avgResponseTime').textContent = '0.0s';
                        document.getElementById('successRate').textContent = '0%';
                    });
            }
        });
    </script>
}

@section Styles {
    <style>
        /* Chatbot Edit Header */
        .chatbot-edit-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chatbot-icon {
            width: 48px;
            height: 48px;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
        }

        .chatbot-icon.primary {
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
        }

        .chatbot-info {
            margin-left: 1rem;
        }

        .chatbot-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0 0 0.375rem;
        }

        .chatbot-meta {
            display: flex;
            gap: 0.5rem;
        }

        .badge {
            padding: 0.35em 0.65em;
            font-size: 0.75rem;
            font-weight: 600;
            border-radius: 100px;
        }

        .chatbot-stats {
            display: flex;
            gap: 1.5rem;
        }

        .stat-item {
            text-align: center;
        }

        .stat-value {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--color-gray-800);
        }

        .stat-label {
            font-size: 0.75rem;
            color: var(--color-gray-500);
        }

        /* Form Styling */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            font-weight: 500;
            margin-bottom: 0.5rem;
            display: block;
        }

        .form-control {
            padding: 0.625rem 0.875rem;
            border-radius: var(--border-radius);
            border: 1px solid var(--color-gray-300);
            width: 100%;
            transition: all 0.2s ease;
        }

        .form-control:focus {
            border-color: var(--color-primary);
            box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.1);
            outline: none;
        }

        .form-text {
            font-size: 0.75rem;
            color: var(--color-gray-500);
            margin-top: 0.5rem;
        }

        /* Department checkbox styles */
        .departments-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 0.5rem;
            max-width: 600px;
        }

        .form-check {
            display: flex;
            align-items: center;
            padding: 0.5rem;
            border-radius: var(--border-radius);
            border: 1px solid var(--color-gray-200);
            background-color: var(--color-gray-50);
            margin: 0;
        }

        .form-check:hover {
            background-color: var(--color-gray-100);
        }

        .form-check-input {
            margin-right: 0.5rem;
        }

        /* User access styles */
        .selected-users-container {
            border: 1px solid var(--color-gray-300);
            border-radius: var(--border-radius);
            padding: 0.5rem;
            background-color: var(--color-gray-50);
            min-height: 100px;
            max-height: 200px;
            overflow-y: auto;
        }

        .selected-users {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .selected-user-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.25rem 0.5rem;
            background-color: rgba(13, 110, 253, 0.1);
            border-radius: 100px;
            font-size: 0.875rem;
        }

        .btn-remove {
            background: none;
            border: none;
            padding: 0;
            font-size: 1rem;
            line-height: 1;
            color: var(--color-gray-500);
            cursor: pointer;
        }

        .btn-remove:hover {
            color: var(--color-danger);
        }

        /* User search modal styles */
        .user-search-results {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            max-height: 300px;
            overflow-y: auto;
        }

        .user-search-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            border-radius: var(--border-radius);
            border: 1px solid var(--color-gray-200);
            background-color: var(--color-gray-50);
            transition: all 0.2s ease;
            margin-bottom: 0.5rem;
        }

        .user-search-item:hover {
            background-color: var(--color-gray-100);
            border-color: var(--color-gray-300);
        }

        .no-results-message {
            text-align: center;
            padding: 2rem 0;
            color: var(--color-gray-500);
        }

        .no-results-message i {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            display: block;
        }

        .user-info {
            display: flex;
            flex-direction: column;
        }

        .user-name {
            font-weight: 500;
        }

        .user-username {
            font-size: 0.75rem;
            color: var(--color-gray-500);
        }

        /* Form Info Box */
        .form-info-box {
            display: flex;
            align-items: flex-start;
            margin: 1.5rem 0;
            padding: 1rem;
            background-color: var(--color-gray-50);
            border-radius: var(--border-radius);
            border-left: 3px solid var(--color-primary);
        }

        .info-icon {
            width: 36px;
            height: 36px;
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            margin-right: 1rem;
        }

        .info-content {
            flex: 1;
        }

        .info-title {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .info-details {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .info-item {
            font-size: 0.875rem;
        }

        .info-label {
            color: var(--color-gray-600);
            margin-right: 0.25rem;
        }

        .info-value {
            font-weight: 500;
        }

        /* Form Switch */
        .form-switch {
            display: flex;
            align-items: center;
        }

        .form-switch-input {
            appearance: none;
            width: 3.25rem;
            height: 1.75rem;
            border-radius: 100px;
            background-color: var(--color-gray-300);
            position: relative;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .form-switch-input:checked {
            background-color: var(--color-primary);
        }

        .form-switch-input::before {
            content: '';
            position: absolute;
            width: 1.25rem;
            height: 1.25rem;
            border-radius: 50%;
            background-color: white;
            top: 0.25rem;
            left: 0.25rem;
            transition: transform 0.3s ease;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);
        }

        .form-switch-input:checked::before {
            transform: translateX(1.5rem);
        }

        .form-switch-label {
            margin-left: 0.75rem;
            font-weight: 500;
            font-size: 0.9375rem;
            cursor: pointer;
        }

        /* Form Buttons */
        .form-buttons {
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--color-gray-200);
            display: flex;
            justify-content: flex-end;
        }

        /* Danger Zone */
        .danger-zone {
            background-color: #fff5f5;
            border: 1px solid #ffe3e3;
            border-radius: var(--border-radius);
            overflow: hidden;
            margin-top: 3rem;
        }

        .danger-zone-title {
            background-color: #ffe3e3;
            color: var(--color-danger);
            font-size: 0.875rem;
            font-weight: 600;
            padding: 0.75rem 1.25rem;
            margin: 0;
        }

        .danger-zone-content {
            padding: 1.25rem;
        }

        .danger-action {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .danger-info {
            flex: 1;
            padding-right: 1.5rem;
        }

        .danger-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .danger-description {
            font-size: 0.75rem;
            color: var(--color-gray-600);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1050;
            overflow: auto;
        }

        .modal.show {
            display: block;
        }

        .modal-dialog {
            margin: 1.75rem auto;
            max-width: 600px;
        }

        .modal-content {
            position: relative;
            background-color: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-lg);
            display: flex;
            flex-direction: column;
            outline: 0;
        }

        .modal-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid var(--color-gray-200);
        }

        .modal-title {
            font-size: 1.125rem;
            font-weight: 600;
            margin: 0;
        }

        .btn-close {
            padding: 0;
            background: transparent;
            border: 0;
            font-size: 1.5rem;
            line-height: 1;
            color: var(--color-gray-500);
            cursor: pointer;
        }

        .modal-body {
            position: relative;
            flex: 1 1 auto;
            padding: 1.5rem;
        }

        .modal-footer {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding: 1.25rem 1.5rem;
            border-top: 1px solid var(--color-gray-200);
            gap: 0.75rem;
        }

        /* Required Field */
        .required {
            color: var(--color-danger);
        }

        /* Alert */
        .alert {
            padding: 1rem;
            margin-bottom: 1.5rem;
            border-radius: var(--border-radius);
        }

        .alert-danger {
            background-color: rgba(220, 53, 69, 0.1);
            border: 1px solid rgba(220, 53, 69, 0.2);
            color: var(--color-danger);
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .alert i {
            font-size: 1.25rem;
            margin-top: 0.125rem;
        }

        /* Helper classes */
        .d-none {
            display: none !important;
        }

        .d-flex {
            display: flex;
        }

        .align-items-center {
            align-items: center;
        }

        .text-center {
            text-align: center;
        }

        .py-3 {
            padding-top: 1rem;
            padding-bottom: 1rem;
        }

        .mt-2 {
            margin-top: 0.5rem;
        }

        .mt-3 {
            margin-top: 1rem;
        }

        .mb-3 {
            margin-bottom: 1rem;
        }

        .mt-5 {
            margin-top: 3rem;
        }

        .input-group {
            position: relative;
            display: flex;
            flex-wrap: wrap;
            align-items: stretch;
            width: 100%;
        }

        .input-group>.form-control {
            position: relative;
            flex: 1 1 auto;
            width: 1%;
            min-width: 0;
        }

        .spinner-border {
            display: inline-block;
            width: 2rem;
            height: 2rem;
            border: 0.25em solid currentColor;
            border-right-color: transparent;
            border-radius: 50%;
            animation: spinner-border .75s linear infinite;
        }

        @@keyframes spinner-border {
                to {
                    transform: rotate(360deg);
                }
            }

            .text-primary {
                color: var(--color-primary) !important;
            }

            .btn {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                padding: 0.5rem 1rem;
                font-weight: 500;
                line-height: 1.5;
                text-align: center;
                vertical-align: middle;
                cursor: pointer;
                user-select: none;
                border: 1px solid transparent;
                border-radius: var(--border-radius);
                transition: all 0.15s ease-in-out;
            }

            .btn-primary {
                color: #fff;
                background-color: var(--color-primary);
                border-color: var(--color-primary);
            }

            .btn-outline {
                color: var(--color-gray-700);
                border-color: var(--color-gray-300);
                background-color: transparent;
            }

            .btn-outline-primary {
                color: var(--color-primary);
                border-color: var(--color-primary);
                background-color: transparent;
            }

            .btn-outline-danger {
                color: var(--color-danger);
                border-color: var(--color-danger);
                background-color: transparent;
            }

            .btn-danger {
                color: #fff;
                background-color: var(--color-danger);
                border-color: var(--color-danger);
            }

            .btn-sm {
                padding: 0.25rem 0.5rem;
                font-size: 0.875rem;
                border-radius: calc(var(--border-radius) - 1px);
            }
        </style>
    }