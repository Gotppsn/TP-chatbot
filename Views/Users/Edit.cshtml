@model AIHelpdeskSupport.ViewModels.UserViewModel
@{
    ViewData["Title"] = "Edit User";
}

<div class="user-edit-container">
    <!-- Header section -->
    <div class="content-header d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">Edit User</h1>
            <p class="text-muted">Manage user information, permissions, and settings</p>
        </div>
        <div>
            <a href="/Users" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left me-1"></i> Back to Users
            </a>
        </div>
    </div>

    <!-- User profile card -->
    <div class="card profile-card mb-4">
        <div class="card-body p-4">
            <div class="d-flex align-items-center">
                <div class="user-avatar-container me-4">
                    <div class="user-avatar @(Model.Role.Contains("Admin") ? "bg-danger" : "bg-primary")">
                        @(string.IsNullOrEmpty(Model.FirstName) || string.IsNullOrEmpty(Model.LastName) ? "U" : $"{Model.FirstName[0]}{Model.LastName[0]}")
                    </div>
                </div>
                <div class="user-info flex-grow-1">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h2 class="h4 mb-1">@Model.FullName</h2>
                            <div class="d-flex gap-2 mt-1">
                                <span class="badge bg-soft-primary">@Model.Role</span>
                                <span class="badge bg-soft-secondary">@Model.Department</span>
                                <span class="badge @(Model.IsActive ? "bg-soft-success" : "bg-soft-danger")">
                                    @(Model.IsActive ? "Active" : "Inactive")
                                </span>
                            </div>
                        </div>
                        <div class="user-stats text-end small">
                            <div class="text-muted mb-1">Created: @Model.CreatedAt.ToString("MMM d, yyyy")</div>
                            <div class="text-muted">Last Login: @(Model.LastLogin?.ToString("MMM d, yyyy HH:mm") ?? "Never")</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit form -->
    <form id="userEditForm" asp-controller="Users" asp-action="Edit" method="post">
        <div asp-validation-summary="ModelOnly" class="alert alert-danger mb-4" role="alert"></div>
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="CreatedAt" />
        <input type="hidden" asp-for="LastLogin" />
        
        <!-- Tabs -->
        <div class="card mb-4">
            <div class="card-header p-0">
                <ul class="nav nav-tabs nav-tabs-modern" id="userEditTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="basic-info-tab" data-bs-toggle="tab" data-bs-target="#basic-info" 
                                type="button" role="tab" aria-controls="basic-info" aria-selected="true">
                            <i class="bi bi-person me-2"></i>Basic Info
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="permissions-tab" data-bs-toggle="tab" data-bs-target="#permissions" 
                                type="button" role="tab" aria-controls="permissions" aria-selected="false">
                            <i class="bi bi-shield-lock me-2"></i>Permissions
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="account-tab" data-bs-toggle="tab" data-bs-target="#account" 
                                type="button" role="tab" aria-controls="account" aria-selected="false">
                            <i class="bi bi-gear me-2"></i>Account
                        </button>
                    </li>
                </ul>
            </div>
            <div class="card-body p-4">
                <div class="tab-content" id="userEditTabsContent">
                    <!-- Basic Info Tab -->
                    <div class="tab-pane fade show active" id="basic-info" role="tabpanel" aria-labelledby="basic-info-tab">
                        <h4 class="mb-4">Personal Information</h4>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="FirstName" class="form-label">First Name <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-person"></i></span>
                                    <input asp-for="FirstName" class="form-control" required placeholder="Enter first name" />
                                </div>
                                <span asp-validation-for="FirstName" class="text-danger small"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="LastName" class="form-label">Last Name <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-person"></i></span>
                                    <input asp-for="LastName" class="form-control" required placeholder="Enter last name" />
                                </div>
                                <span asp-validation-for="LastName" class="text-danger small"></span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Email" class="form-label">Email Address <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                                <input asp-for="Email" class="form-control" type="email" required placeholder="name@example.com" />
                            </div>
                            <span asp-validation-for="Email" class="text-danger small"></span>
                        </div>
                    </div>

                    <!-- Permissions Tab -->
                    <div class="tab-pane fade" id="permissions" role="tabpanel" aria-labelledby="permissions-tab">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h4 class="mb-0">Role & Department</h4>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="Department" class="form-label">Department <span class="text-danger">*</span></label>
                                <select asp-for="Department" class="form-select" required>
                                    <option value="">Select Department</option>
                                    <option value="Administration">Administration</option>
                                    <option value="Customer Service">Customer Service</option>
                                    <option value="IT Support">IT Support</option>
                                    <option value="Sales">Sales</option>
                                    <option value="Billing">Billing</option>
                                    <option value="Technical">Technical</option>
                                    <option value="Operations">Operations</option>
                                </select>
                                <span asp-validation-for="Department" class="text-danger small"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="Role" class="form-label">Role <span class="text-danger">*</span></label>
                                <select asp-for="Role" class="form-select" required id="roleSelect">
                                    <option value="">Select Role</option>
                                    <option value="Administrator">Administrator</option>
                                    <option value="Department Manager">Department Manager</option>
                                    <option value="Support Agent">Support Agent</option>
                                </select>
                                <span asp-validation-for="Role" class="text-danger small"></span>
                                <div class="form-text">Role determines the default permission set</div>
                            </div>
                        </div>

                        <div class="permissions-section mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="mb-0">Access Permissions</h5>
                                <div>
                                    <button type="button" class="btn btn-sm btn-link" id="selectAllPermissions">
                                        Select All
                                    </button>
                                    <span class="text-muted">|</span>
                                    <button type="button" class="btn btn-sm btn-link" id="clearAllPermissions">
                                        Clear All
                                    </button>
                                </div>
                            </div>

                            <div class="row permission-groups">
                                <!-- Dashboard & Analytics -->
                                <div class="col-md-4 mb-3">
                                    <div class="card h-100 permission-card">
                                        <div class="card-header py-2 px-3">
                                            <h6 class="mb-0"><i class="bi bi-speedometer2 me-2 text-primary"></i>Dashboard & Analytics</h6>
                                        </div>
                                        <div class="card-body p-3">
                                            <div class="permission-list">
                                                <div class="permission-item mb-2">
                                                    <div class="form-check">
                                                        <input type="checkbox" id="perm-dashboard" name="Permissions[0].IsGranted" value="true" checked class="form-check-input permission-input" />
                                                        <input type="hidden" name="Permissions[0].Name" value="ViewDashboard" />
                                                        <label for="perm-dashboard" class="form-check-label">
                                                            <div>View Dashboard</div>
                                                            <small class="text-muted">Access to main dashboard and statistics</small>
                                                        </label>
                                                    </div>
                                                </div>
                                                <div class="permission-item">
                                                    <div class="form-check">
                                                        <input type="checkbox" id="perm-analytics" name="Permissions[1].IsGranted" value="true" checked class="form-check-input permission-input" />
                                                        <input type="hidden" name="Permissions[1].Name" value="ViewAnalytics" />
                                                        <label for="perm-analytics" class="form-check-label">
                                                            <div>View Analytics</div>
                                                            <small class="text-muted">Access to advanced analytics and reports</small>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Chatbots -->
                                <div class="col-md-4 mb-3">
                                    <div class="card h-100 permission-card">
                                        <div class="card-header py-2 px-3">
                                            <h6 class="mb-0"><i class="bi bi-robot me-2 text-primary"></i>Chatbot Management</h6>
                                        </div>
                                        <div class="card-body p-3">
                                            <div class="permission-list">
                                                <div class="permission-item mb-2">
                                                    <div class="form-check">
                                                        <input type="checkbox" id="perm-view-chatbots" name="Permissions[2].IsGranted" value="true" checked class="form-check-input permission-input" />
                                                        <input type="hidden" name="Permissions[2].Name" value="ViewChatbots" />
                                                        <label for="perm-view-chatbots" class="form-check-label">
                                                            <div>View Chatbots</div>
                                                            <small class="text-muted">View configuration of all chatbots</small>
                                                        </label>
                                                    </div>
                                                </div>
                                                <div class="permission-item">
                                                    <div class="form-check">
                                                        <input type="checkbox" id="perm-manage-chatbots" name="Permissions[3].IsGranted" value="true" class="form-check-input permission-input" />
                                                        <input type="hidden" name="Permissions[3].Name" value="ManageChatbots" />
                                                        <label for="perm-manage-chatbots" class="form-check-label">
                                                            <div>Manage Chatbots</div>
                                                            <small class="text-muted">Create, edit and delete chatbots</small>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Knowledge Base -->
                                <div class="col-md-4 mb-3">
                                    <div class="card h-100 permission-card">
                                        <div class="card-header py-2 px-3">
                                            <h6 class="mb-0"><i class="bi bi-journal-text me-2 text-primary"></i>Knowledge Base</h6>
                                        </div>
                                        <div class="card-body p-3">
                                            <div class="permission-list">
                                                <div class="permission-item mb-2">
                                                    <div class="form-check">
                                                        <input type="checkbox" id="perm-view-kb" name="Permissions[4].IsGranted" value="true" checked class="form-check-input permission-input" />
                                                        <input type="hidden" name="Permissions[4].Name" value="ViewKnowledgeBases" />
                                                        <label for="perm-view-kb" class="form-check-label">
                                                            <div>View Knowledge Bases</div>
                                                            <small class="text-muted">Access knowledge base content</small>
                                                        </label>
                                                    </div>
                                                </div>
                                                <div class="permission-item">
                                                    <div class="form-check">
                                                        <input type="checkbox" id="perm-manage-kb" name="Permissions[5].IsGranted" value="true" class="form-check-input permission-input" />
                                                        <input type="hidden" name="Permissions[5].Name" value="ManageKnowledgeBases" />
                                                        <label for="perm-manage-kb" class="form-check-label">
                                                            <div>Manage Knowledge Bases</div>
                                                            <small class="text-muted">Create, edit, and delete knowledge bases</small>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Account Tab -->
                    <div class="tab-pane fade" id="account" role="tabpanel" aria-labelledby="account-tab">
                        <h4 class="mb-4">Account Settings</h4>
                        
                        <div class="account-status card mb-4">
                            <div class="card-body p-3">
                                <div class="form-check form-switch">
                                    <input asp-for="IsActive" class="form-check-input" id="accountActiveToggle" />
                                    <label for="accountActiveToggle" class="form-check-label fw-medium">Account Active</label>
                                </div>
                                <p class="text-muted mb-0 small mt-1">@(Model.IsActive ? "User can access the system" : "User account is disabled")</p>
                            </div>
                        </div>
                        
                        <div class="password-section card">
                            <div class="card-header">
                                <h5 class="mb-0">Password Management</h5>
                            </div>
                            <div class="card-body">
                                <div class="password-options">
                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input type="radio" id="resetPassword-no" name="resetPasswordOption" value="no" checked class="form-check-input" />
                                            <label for="resetPassword-no" class="form-check-label fw-medium">No password reset</label>
                                            <p class="form-text mb-0">Keep the current password unchanged</p>
                                        </div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input type="radio" id="resetPassword-email" name="resetPasswordOption" value="email" class="form-check-input" />
                                            <label for="resetPassword-email" class="form-check-label fw-medium">Send password reset email</label>
                                            <p class="form-text mb-0">User will receive email instructions to reset their password</p>
                                        </div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input type="radio" id="resetPassword-manual" name="resetPasswordOption" value="manual" class="form-check-input" />
                                            <label for="resetPassword-manual" class="form-check-label fw-medium">Set password manually</label>
                                            <p class="form-text mb-0">Directly enter a new password for this user</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div id="manualPasswordFields" style="display: none;" class="mt-4">
                                    <div class="mb-3">
                                        <label for="newPassword" class="form-label">New Password</label>
                                        <div class="input-group">
                                            <input type="password" id="newPassword" name="NewPassword" class="form-control" />
                                            <button type="button" class="btn btn-outline-secondary password-toggle" aria-label="Toggle password visibility">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </div>
                                        <div class="mt-2">
                                            <div class="progress" style="height: 5px;">
                                                <div class="progress-bar" id="passwordStrength" role="progressbar" style="width: 0%"></div>
                                            </div>
                                            <div class="d-flex justify-content-end mt-1">
                                                <small class="text-muted">Password strength: <span id="strengthLabel">Weak</span></small>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                                        <div class="input-group">
                                            <input type="password" id="confirmPassword" name="ConfirmPassword" class="form-control" />
                                            <button type="button" class="btn btn-outline-secondary password-toggle" aria-label="Toggle password visibility">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </div>
                                        <div id="passwordMatch" class="small text-success mt-1" style="display: none;">
                                            <i class="bi bi-check-circle me-1"></i>Passwords match
                                        </div>
                                        <div id="passwordMismatch" class="small text-danger mt-1" style="display: none;">
                                            <i class="bi bi-exclamation-circle me-1"></i>Passwords do not match
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer d-flex justify-content-end p-3">
                <a href="/Users" class="btn btn-outline-secondary me-2">Cancel</a>
                <button type="submit" class="btn btn-primary">Save Changes</button>
            </div>
        </div>
    </form>

    <!-- Delete User Section -->
    <div class="card border-danger mt-4">
        <div class="card-header bg-danger bg-opacity-10 text-danger">
            <h4 class="mb-0 fs-5"><i class="bi bi-exclamation-triangle me-2"></i>Delete User</h4>
        </div>
        <div class="card-body p-4">
            <p class="text-muted mb-3">Are you sure you want to delete this user? This action <strong>cannot be undone</strong>.</p>
            <div class="alert alert-warning d-flex align-items-center" role="alert">
                <i class="bi bi-info-circle-fill me-2 fs-5"></i>
                <div>To confirm, type <strong>DELETE</strong> in the field below:</div>
            </div>
            
            <div class="row">
                <div class="col-md-6">
                    <input type="text" id="deleteConfirmInput" class="form-control" placeholder="Type DELETE to confirm">
                </div>
            </div>
        </div>
        <div class="card-footer bg-danger bg-opacity-10 d-flex justify-content-end p-3">
            <button type="button" class="btn btn-outline-secondary me-2" id="cancelDeleteBtn">Cancel</button>
            <form asp-action="Delete" asp-route-id="@Model.Id" method="post" onsubmit="return validateDeleteForm()">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-danger" id="confirmDeleteBtn" disabled>Delete User</button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab navigation handling with bootstrap tabs
            const triggerTabList = document.querySelectorAll('#userEditTabs button');
            triggerTabList.forEach(tabEl => {
                const tabTrigger = new bootstrap.Tab(tabEl);
                tabEl.addEventListener('click', event => {
                    event.preventDefault();
                    tabTrigger.show();
                });
            });
            
            // Account status toggle
            const accountActiveToggle = document.getElementById('accountActiveToggle');
            if (accountActiveToggle) {
                accountActiveToggle.addEventListener('change', function() {
                    const statusDesc = this.closest('.card-body').querySelector('p');
                    if (statusDesc) {
                        statusDesc.textContent = this.checked ? 
                            "User can access the system" : 
                            "User account is disabled";
                    }
                });
            }
            
            // Password reset options
            const resetOptions = document.querySelectorAll('input[name="resetPasswordOption"]');
            const manualPasswordFields = document.getElementById('manualPasswordFields');
            
            resetOptions.forEach(option => {
                option.addEventListener('change', function() {
                    manualPasswordFields.style.display = this.value === 'manual' ? 'block' : 'none';
                });
            });
            
            // Password toggle visibility
            document.querySelectorAll('.password-toggle').forEach(toggle => {
                toggle.addEventListener('click', function() {
                    const input = this.closest('.input-group').querySelector('input');
                    const icon = this.querySelector('i');
                    
                    input.type = input.type === 'password' ? 'text' : 'password';
                    icon.classList.toggle('bi-eye');
                    icon.classList.toggle('bi-eye-slash');
                });
            });
            
            // Password strength indicator
            const newPassword = document.getElementById('newPassword');
            const confirmPassword = document.getElementById('confirmPassword');
            const passwordMatch = document.getElementById('passwordMatch');
            const passwordMismatch = document.getElementById('passwordMismatch');
            const passwordStrength = document.getElementById('passwordStrength');
            const strengthLabel = document.getElementById('strengthLabel');
            
            if (newPassword) {
                newPassword.addEventListener('input', function() {
                    updatePasswordStrength(this.value);
                    checkPasswordMatch();
                });
            }
            
            if (confirmPassword) {
                confirmPassword.addEventListener('input', checkPasswordMatch);
            }
            
            function updatePasswordStrength(password) {
                if (!password || !passwordStrength || !strengthLabel) return;
                
                // Calculate strength (simplified)
                let strength = 0;
                if (password.length > 7) strength++;
                if (password.length > 10) strength++;
                if (/[A-Z]/.test(password)) strength++;
                if (/[0-9]/.test(password)) strength++;
                if (/[^A-Za-z0-9]/.test(password)) strength++;
                
                // Normalize to 0-4 range
                strength = Math.min(4, strength);
                
                // Update UI
                const labels = ['Weak', 'Fair', 'Good', 'Strong', 'Very Strong'];
                const colors = ['#dc3545', '#ffc107', '#6c757d', '#0d6efd', '#198754'];
                const width = ['20%', '40%', '60%', '80%', '100%'];
                
                passwordStrength.style.width = width[strength];
                passwordStrength.style.backgroundColor = colors[strength];
                strengthLabel.textContent = labels[strength];
            }
            
            function checkPasswordMatch() {
                if (!newPassword || !confirmPassword || !passwordMatch || !passwordMismatch) return;
                
                const pwd = newPassword.value;
                const confirm = confirmPassword.value;
                
                if (!confirm) {
                    passwordMatch.style.display = 'none';
                    passwordMismatch.style.display = 'none';
                    return;
                }
                
                passwordMatch.style.display = pwd === confirm ? 'block' : 'none';
                passwordMismatch.style.display = pwd === confirm ? 'none' : 'block';
            }
            
            // Delete confirmation
            const deleteConfirmInput = document.getElementById('deleteConfirmInput');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            
            if (deleteConfirmInput && confirmDeleteBtn) {
                deleteConfirmInput.addEventListener('input', function() {
                    confirmDeleteBtn.disabled = this.value !== 'DELETE';
                });
            }
            
            // Permission checkboxes
            const roleSelect = document.getElementById('roleSelect');
            const permissionInputs = document.querySelectorAll('.permission-input');
            const selectAllBtn = document.getElementById('selectAllPermissions');
            const clearAllBtn = document.getElementById('clearAllPermissions');
            
            if (roleSelect) {
                roleSelect.addEventListener('change', function() {
                    const role = this.value;
                    
                    // Reset all permissions
                    permissionInputs.forEach(input => {
                        input.checked = false;
                    });
                    
                    // Apply role-based permissions
                    if (role === 'Administrator') {
                        permissionInputs.forEach(input => {
                            input.checked = true;
                        });
                    } else if (role === 'Department Manager') {
                        const viewPermissions = ['ViewDashboard', 'ViewAnalytics', 'ViewChatbots', 'ViewKnowledgeBases'];
                        const managerPerms = ['ExportReports', 'ManageKnowledgeBases'];
                        
                        permissionInputs.forEach(input => {
                            const permName = input.nextElementSibling.value;
                            input.checked = viewPermissions.includes(permName) || managerPerms.includes(permName);
                        });
                    } else if (role === 'Support Agent') {
                        const agentPermissions = ['ViewDashboard', 'ViewChatbots', 'ViewKnowledgeBases'];
                        
                        permissionInputs.forEach(input => {
                            const permName = input.nextElementSibling.value;
                            input.checked = agentPermissions.includes(permName);
                        });
                    }
                });
            }
            
            // Select/clear all permissions
            if (selectAllBtn) {
                selectAllBtn.addEventListener('click', function() {
                    permissionInputs.forEach(input => {
                        input.checked = true;
                    });
                });
            }
            
            if (clearAllBtn) {
                clearAllBtn.addEventListener('click', function() {
                    permissionInputs.forEach(input => {
                        input.checked = false;
                    });
                });
            }
            
            // Form validation
            window.validateDeleteForm = function() {
                const confirmInput = document.getElementById('deleteConfirmInput');
                return confirmInput.value === 'DELETE';
            };
        });
    </script>
}

@section Styles {
    <style>
        /* Custom styling for the edit user page */
        :root {
            --primary: #0d6efd;
            --primary-soft: rgba(13, 110, 253, 0.1);
            --danger: #dc3545;
            --danger-soft: rgba(220, 53, 69, 0.1);
            --success: #198754;
            --warning: #ffc107;
            --light: #f8f9fa;
            --dark: #212529;
            --secondary: #6c757d;
            --border-color: #e9ecef;
        }

        .user-edit-container {
            max-width: 1100px;
            margin: 0 auto;
        }

        /* Breadcrumb styling */
        .breadcrumb {
            background-color: transparent;
            padding: 0;
            margin-bottom: 1.5rem;
        }

        .breadcrumb-item + .breadcrumb-item::before {
            content: "›";
        }

        /* Card styling */
        .card {
            border-radius: 0.5rem;
            border: 1px solid var(--border-color);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            transition: all 0.2s ease;
            overflow: hidden;
        }

        .card:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
        }

        .profile-card {
            background-color: #fff;
        }

        /* User avatar */
        .user-avatar-container {
            display: flex;
            justify-content: center;
        }

        .user-avatar {
            width: 64px;
            height: 64px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 1.5rem;
            color: white;
            background-color: var(--primary);
        }

        .user-avatar.bg-danger {
            background-color: var(--danger);
        }

        /* Badge styling */
        .badge {
            font-weight: 500;
            padding: 0.4em 0.8em;
            border-radius: 4px;
        }

        .bg-soft-primary {
            background-color: var(--primary-soft);
            color: var(--primary);
        }

        .bg-soft-secondary {
            background-color: rgba(108, 117, 125, 0.1);
            color: var(--secondary);
        }

        .bg-soft-success {
            background-color: rgba(25, 135, 84, 0.1);
            color: var(--success);
        }

        .bg-soft-danger {
            background-color: var(--danger-soft);
            color: var(--danger);
        }

        /* Tab styling */
        .nav-tabs-modern {
            border-bottom: 0;
        }

        .nav-tabs-modern .nav-link {
            border: none;
            color: var(--secondary);
            padding: 1rem 1.5rem;
            font-weight: 500;
            border-bottom: 2px solid transparent;
            border-radius: 0;
            transition: all 0.2s;
        }

        .nav-tabs-modern .nav-link:hover {
            color: var(--primary);
            border-bottom-color: rgba(13, 110, 253, 0.3);
        }

        .nav-tabs-modern .nav-link.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
            background-color: transparent;
        }

        /* Form styling */
        .form-label {
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .form-control, .form-select {
            border: 1px solid #dee2e6;
            padding: 0.5rem 0.75rem;
            border-radius: 0.375rem;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }

        .form-control:focus, .form-select:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

        .input-group-text {
            background-color: #f8f9fa;
            border-color: #dee2e6;
        }

        /* Permission cards */
        .permission-card {
            transition: all 0.2s;
            border: 1px solid var(--border-color);
        }

        .permission-card:hover {
            border-color: rgba(13, 110, 253, 0.4);
        }

        .permission-card .card-header {
            background-color: rgba(0, 0, 0, 0.02);
            border-bottom: 1px solid var(--border-color);
        }

        /* Form check styling */
        .form-check-label {
            cursor: pointer;
        }

        .form-check-input {
            cursor: pointer;
        }

        .form-check-input:checked {
            background-color: var(--primary);
            border-color: var(--primary);
        }

        /* Password strength meter */
        .progress {
            overflow: hidden;
            background-color: #f2f2f2;
            border-radius: 0.25rem;
        }

        /* Animation for tab transitions */
        .tab-pane.fade {
            transition: opacity 0.15s linear;
        }

        /* Delete section */
        .border-danger {
            border-color: var(--danger-soft) !important;
        }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .user-info {
                flex-direction: column;
            }
            
            .user-stats {
                margin-top: 1rem;
                text-align: left;
            }
            
            .form-actions {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .form-actions .btn {
                width: 100%;
            }
        }
    </style>
}