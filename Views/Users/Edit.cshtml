@model AIHelpdeskSupport.ViewModels.UserViewModel
@{
    ViewData["Title"] = "Edit User";
}

<div class="page-header">
    <div>
        <h1 class="page-title">Edit User</h1>
        <p class="text-muted">Update user information and permissions</p>
    </div>
    <div class="page-actions">
        <a href="/Users" class="btn btn-outline">
            <i class="bi bi-arrow-left"></i>
            <span>Back to Users</span>
        </a>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <div class="user-edit-header">
            <div class="d-flex align-items-center">
                <div class="user-avatar @(Model.IsActive ? "active" : "inactive")">
                    @Model.FirstName[0]@Model.LastName[0]
                </div>
                <div class="user-info">
                    <h2 class="user-title">@Model.FullName</h2>
                    <div class="user-meta">
                        <span class="badge bg-primary">@Model.Role</span>
                        <span class="badge bg-info">@Model.Department</span>
                        <span class="badge bg-@(Model.IsActive ? "success" : "secondary")">
                            @(Model.IsActive ? "Active" : "Inactive")
                        </span>
                    </div>
                </div>
            </div>
            <div class="user-stats">
                <div class="stat-item">
                    <div class="stat-value">@Model.CreatedAt.ToString("MMM d, yyyy")</div>
                    <div class="stat-label">Created</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">
                        @if (Model.LastLogin.HasValue)
                        {
                            @(Model.LastLogin?.ToString("MMM d, yyyy HH:mm") ?? "Never")
                        }
                        else
                        {
                            <span>Never</span>
                        }
                    </div>
                    <div class="stat-label">Last Login</div>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        <form id="userEditForm" asp-controller="Users" asp-action="Edit" method="post">
            <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="CreatedAt" />
            <input type="hidden" asp-for="LastLogin" />
            
            <div class="form-tabs">
                <div class="form-tabs-header">
                    <button type="button" class="form-tab active" data-tab="basic-info" aria-selected="true">
                        <i class="bi bi-person"></i>
                        <span>Basic Info</span>
                    </button>
                    <button type="button" class="form-tab" data-tab="permissions" aria-selected="false">
                        <i class="bi bi-shield-lock"></i>
                        <span>Permissions</span>
                    </button>
                    <button type="button" class="form-tab" data-tab="account" aria-selected="false">
                        <i class="bi bi-gear"></i>
                        <span>Account</span>
                    </button>
                </div>
                
                <div class="form-tabs-progress">
                    <div class="progress-bar" style="width: 33%"></div>
                </div>
            </div>
            
            <div class="form-sections">
                <!-- Basic Info Section -->
                <div class="form-section active" id="basic-info" role="tabpanel">
                    <div class="form-grid-2">
                        <div class="form-group">
                            <label asp-for="FirstName" class="form-label">First Name <span class="required">*</span></label>
                            <input asp-for="FirstName" class="form-control" required />
                            <span asp-validation-for="FirstName" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group">
                            <label asp-for="LastName" class="form-label">Last Name <span class="required">*</span></label>
                            <input asp-for="LastName" class="form-control" required />
                            <span asp-validation-for="LastName" class="text-danger"></span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label asp-for="Email" class="form-label">Email Address <span class="required">*</span></label>
                        <input asp-for="Email" class="form-control" type="email" required />
                        <span asp-validation-for="Email" class="text-danger"></span>
                    </div>
                    
                    <div class="form-buttons mt-4">
                        <div></div> <!-- Spacer for flex justify-between -->
                        <button type="button" class="btn btn-primary next-tab" data-next="permissions">
                            Continue
                            <i class="bi bi-arrow-right"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Permissions Section -->
                <div class="form-section" id="permissions" role="tabpanel">
                    <div class="form-grid-2">
                        <div class="form-group">
                            <label asp-for="Department" class="form-label">Department <span class="required">*</span></label>
                            <select asp-for="Department" class="form-select" required>
                                <option value="">Select Department</option>
                                <option value="Administration">Administration</option>
                                <option value="Customer Service">Customer Service</option>
                                <option value="IT Support">IT Support</option>
                                <option value="Sales">Sales</option>
                                <option value="Billing">Billing</option>
                                <option value="Technical">Technical</option>
                                <option value="Operations">Operations</option>
                            </select>
                            <span asp-validation-for="Department" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group">
                            <label asp-for="Role" class="form-label">Role <span class="required">*</span></label>
                            <select asp-for="Role" class="form-select" required id="roleSelect">
                                <option value="">Select Role</option>
                                <option value="Administrator">Administrator</option>
                                <option value="Department Manager">Department Manager</option>
                                <option value="Support Agent">Support Agent</option>
                            </select>
                            <span asp-validation-for="Role" class="text-danger"></span>
                        </div>
                    </div>
                    
                    <div class="permissions-section">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h3>Access Permissions</h3>
                            <div class="permission-actions">
                                <button type="button" class="btn btn-sm btn-outline" id="selectAllPermissions">
                                    Select All
                                </button>
                                <button type="button" class="btn btn-sm btn-outline" id="clearAllPermissions">
                                    Clear All
                                </button>
                            </div>
                        </div>
                        
                        <div class="permission-groups">
                            <div class="permission-group">
                                <div class="permission-group-header">
                                    <h4>Dashboard & Analytics</h4>
                                </div>
                                <div class="permission-list">
                                    <div class="permission-item">
                                        <div class="permission-label">
                                            <span>View Dashboard</span>
                                            <small class="text-muted d-block">Access to main dashboard and statistics</small>
                                        </div>
                                        <div class="permission-control">
                                            <div class="form-switch">
                                                <input type="checkbox" id="perm-dashboard" name="Permissions[0].IsGranted" value="true" checked class="form-switch-input permission-checkbox" />
                                                <input type="hidden" name="Permissions[0].Name" value="ViewDashboard" />
                                                <label for="perm-dashboard" class="form-switch-label"></label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="permission-item">
                                        <div class="permission-label">
                                            <span>View Analytics</span>
                                            <small class="text-muted d-block">Access to advanced analytics and reports</small>
                                        </div>
                                        <div class="permission-control">
                                            <div class="form-switch">
                                                <input type="checkbox" id="perm-analytics" name="Permissions[1].IsGranted" value="true" checked class="form-switch-input permission-checkbox" />
                                                <input type="hidden" name="Permissions[1].Name" value="ViewAnalytics" />
                                                <label for="perm-analytics" class="form-switch-label"></label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="permission-item">
                                        <div class="permission-label">
                                            <span>Export Reports</span>
                                            <small class="text-muted d-block">Export data to CSV, PDF, and Excel formats</small>
                                        </div>
                                        <div class="permission-control">
                                            <div class="form-switch">
                                                <input type="checkbox" id="perm-reports" name="Permissions[2].IsGranted" value="true" class="form-switch-input permission-checkbox" />
                                                <input type="hidden" name="Permissions[2].Name" value="ExportReports" />
                                                <label for="perm-reports" class="form-switch-label"></label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="permission-group">
                                <div class="permission-group-header">
                                    <h4>Chatbot Management</h4>
                                </div>
                                <div class="permission-list">
                                    <div class="permission-item">
                                        <div class="permission-label">
                                            <span>View Chatbots</span>
                                            <small class="text-muted d-block">View configuration of all chatbots</small>
                                        </div>
                                        <div class="permission-control">
                                            <div class="form-switch">
                                                <input type="checkbox" id="perm-view-chatbots" name="Permissions[3].IsGranted" value="true" checked class="form-switch-input permission-checkbox" />
                                                <input type="hidden" name="Permissions[3].Name" value="ViewChatbots" />
                                                <label for="perm-view-chatbots" class="form-switch-label"></label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="permission-item">
                                        <div class="permission-label">
                                            <span>Create Chatbots</span>
                                            <small class="text-muted d-block">Create new chatbot configurations</small>
                                        </div>
                                        <div class="permission-control">
                                            <div class="form-switch">
                                                <input type="checkbox" id="perm-create-chatbots" name="Permissions[4].IsGranted" value="true" class="form-switch-input permission-checkbox" />
                                                <input type="hidden" name="Permissions[4].Name" value="CreateChatbots" />
                                                <label for="perm-create-chatbots" class="form-switch-label"></label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="permission-item">
                                        <div class="permission-label">
                                            <span>Edit Chatbots</span>
                                            <small class="text-muted d-block">Modify existing chatbot configurations</small>
                                        </div>
                                        <div class="permission-control">
                                            <div class="form-switch">
                                                <input type="checkbox" id="perm-edit-chatbots" name="Permissions[5].IsGranted" value="true" class="form-switch-input permission-checkbox" />
                                                <input type="hidden" name="Permissions[5].Name" value="EditChatbots" />
                                                <label for="perm-edit-chatbots" class="form-switch-label"></label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="permission-item">
                                        <div class="permission-label">
                                            <span>Delete Chatbots</span>
                                            <small class="text-muted d-block">Remove chatbots from the system</small>
                                        </div>
                                        <div class="permission-control">
                                            <div class="form-switch">
                                                <input type="checkbox" id="perm-delete-chatbots" name="Permissions[6].IsGranted" value="true" class="form-switch-input permission-checkbox" />
                                                <input type="hidden" name="Permissions[6].Name" value="DeleteChatbots" />
                                                <label for="perm-delete-chatbots" class="form-switch-label"></label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="permission-group">
                                <div class="permission-group-header">
                                    <h4>Knowledge Base</h4>
                                </div>
                                <div class="permission-list">
                                    <div class="permission-item">
                                        <div class="permission-label">
                                            <span>View Knowledge Bases</span>
                                            <small class="text-muted d-block">Access knowledge base content</small>
                                        </div>
                                        <div class="permission-control">
                                            <div class="form-switch">
                                                <input type="checkbox" id="perm-view-kb" name="Permissions[7].IsGranted" value="true" checked class="form-switch-input permission-checkbox" />
                                                <input type="hidden" name="Permissions[7].Name" value="ViewKnowledgeBases" />
                                                <label for="perm-view-kb" class="form-switch-label"></label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="permission-item">
                                        <div class="permission-label">
                                            <span>Manage Knowledge Bases</span>
                                            <small class="text-muted d-block">Create, edit, and delete knowledge bases</small>
                                        </div>
                                        <div class="permission-control">
                                            <div class="form-switch">
                                                <input type="checkbox" id="perm-manage-kb" name="Permissions[8].IsGranted" value="true" class="form-switch-input permission-checkbox" />
                                                <input type="hidden" name="Permissions[8].Name" value="ManageKnowledgeBases" />
                                                <label for="perm-manage-kb" class="form-switch-label"></label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="permission-item">
                                        <div class="permission-label">
                                            <span>Assign Knowledge Bases</span>
                                            <small class="text-muted d-block">Link knowledge bases to chatbots</small>
                                        </div>
                                        <div class="permission-control">
                                            <div class="form-switch">
                                                <input type="checkbox" id="perm-assign-kb" name="Permissions[9].IsGranted" value="true" class="form-switch-input permission-checkbox" />
                                                <input type="hidden" name="Permissions[9].Name" value="AssignKnowledgeBases" />
                                                <label for="perm-assign-kb" class="form-switch-label"></label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-buttons mt-4">
                        <button type="button" class="btn btn-outline prev-tab" data-prev="basic-info">
                            <i class="bi bi-arrow-left"></i>
                            Back
                        </button>
                        <button type="button" class="btn btn-primary next-tab" data-next="account">
                            Continue
                            <i class="bi bi-arrow-right"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Account Section -->
                <div class="form-section" id="account" role="tabpanel">
                    <div class="form-group">
                        <div class="form-switch">
                            <input asp-for="IsActive" class="form-switch-input" />
                            <label asp-for="IsActive" class="form-switch-label">Account Active</label>
                        </div>
                        <div class="form-text">Enable or disable this user account</div>
                    </div>
                    
                    <div class="form-group mt-4">
                        <label class="form-label">Reset Password</label>
                        <div class="reset-password-options">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="resetPasswordOption" id="resetPassword-no" value="no" checked>
                                <label class="form-check-label" for="resetPassword-no">
                                    No password reset
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="resetPasswordOption" id="resetPassword-email" value="email">
                                <label class="form-check-label" for="resetPassword-email">
                                    Send password reset email
                                </label>
                                <div class="form-text ms-4">User will receive an email with instructions to reset their password</div>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="resetPasswordOption" id="resetPassword-manual" value="manual">
                                <label class="form-check-label" for="resetPassword-manual">
                                    Set password manually
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group mt-3" id="manualPasswordFields" style="display: none;">
                        <div class="password-fields">
                            <div class="form-group">
                                <label for="newPassword" class="form-label">New Password</label>
                                <div class="password-input-container">
                                    <input type="password" id="newPassword" name="NewPassword" class="form-control" />
                                    <button type="button" class="password-toggle" aria-label="Toggle password visibility">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <div class="password-strength" id="passwordStrength">
                                    <div class="strength-meter">
                                        <div class="strength-meter-fill" data-strength="0"></div>
                                    </div>
                                    <div class="strength-text">Password strength: <span>Weak</span></div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <div class="password-input-container">
                                    <input type="password" id="confirmPassword" name="ConfirmPassword" class="form-control" />
                                    <button type="button" class="password-toggle" aria-label="Toggle password visibility">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <div class="password-match text-success" style="display: none;">
                                    <i class="bi bi-check-circle"></i> Passwords match
                                </div>
                                <div class="password-mismatch text-danger" style="display: none;">
                                    <i class="bi bi-exclamation-circle"></i> Passwords do not match
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="danger-zone mt-5">
                        <h4 class="danger-zone-title">Danger Zone</h4>
                        <div class="danger-zone-content">
                            <div class="danger-action">
                                <div class="danger-info">
                                    <div class="danger-title">Delete this user</div>
                                    <div class="danger-description">Once deleted, all user data will be permanently removed. This action cannot be undone.</div>
                                </div>
                                <button type="button" class="btn btn-outline-danger" onclick="confirmDelete('@Model.Id')">
                                    Delete User
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-buttons mt-4">
                        <button type="button" class="btn btn-outline prev-tab" data-prev="permissions">
                            <i class="bi bi-arrow-left"></i>
                            Back
                        </button>
                        <button type="submit" class="btn btn-success">
                            <i class="bi bi-check-lg"></i>
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Delete User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone.
                </div>
                <p>Are you sure you want to delete this user? All user data will be permanently removed.</p>
                <p>Please type <strong>DELETE</strong> to confirm.</p>
                <input type="text" id="deleteConfirmInput" class="form-control" placeholder="Type DELETE to confirm" autocomplete="off">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteUserForm" method="post" asp-controller="Users" asp-action="Delete">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.Id" />
                    <button type="submit" class="btn btn-danger" id="confirmDeleteBtn" disabled>Delete Permanently</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Save Changes Success Toast -->
<div class="toast-notification success" id="saveSuccessToast" style="transform: translateY(150%); opacity: 0;">
    <div class="toast-icon">
        <i class="bi bi-check-circle"></i>
    </div>
    <div class="toast-content">
        <div class="toast-title">Success</div>
        <div class="toast-message">User information has been updated successfully.</div>
    </div>
    <button class="toast-close" onclick="hideToast('saveSuccessToast')" aria-label="Close notification">
        <i class="bi bi-x"></i>
    </button>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Check for success message in TempData
            @if (TempData["SuccessMessage"] != null)
            {
                <text>
                showToast('success', '@TempData["SuccessMessage"]');
                </text>
            }
            
            // Initialize Bootstrap components
            if (typeof bootstrap !== 'undefined') {
                const deleteConfirmModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            }
            
            // Tab navigation
            const tabs = document.querySelectorAll('.form-tab');
            const sections = document.querySelectorAll('.form-section');
            const progressBar = document.querySelector('.progress-bar');
            
            function showTab(tabId) {
                // Hide all sections
                sections.forEach(section => {
                    section.classList.remove('active');
                    section.setAttribute('aria-hidden', 'true');
                });
                
                // Show the target section
                const targetSection = document.getElementById(tabId);
                if (targetSection) {
                    targetSection.classList.add('active');
                    targetSection.setAttribute('aria-hidden', 'false');
                    
                    // Update active tab
                    tabs.forEach(tab => {
                        tab.classList.remove('active');
                        tab.setAttribute('aria-selected', 'false');
                        if (tab.getAttribute('data-tab') === tabId) {
                            tab.classList.add('active');
                            tab.setAttribute('aria-selected', 'true');
                        }
                    });
                    
                    // Update progress bar
                    const tabIndex = Array.from(tabs).findIndex(tab => tab.getAttribute('data-tab') === tabId);
                    const progressPercentage = (tabIndex + 1) / tabs.length * 100;
                    progressBar.style.width = `${progressPercentage}%`;
                    
                    // Save current tab to session storage
                    sessionStorage.setItem('currentUserEditTab', tabId);
                }
            }
            
            // Add click event to tabs
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const tabId = this.getAttribute('data-tab');
                    showTab(tabId);
                });
            });
            
            // Next/Prev button handlers
            document.querySelectorAll('.next-tab').forEach(button => {
                button.addEventListener('click', function() {
                    const nextTabId = this.getAttribute('data-next');
                    showTab(nextTabId);
                });
            });
            
            document.querySelectorAll('.prev-tab').forEach(button => {
                button.addEventListener('click', function() {
                    const prevTabId = this.getAttribute('data-prev');
                    showTab(prevTabId);
                });
            });
            
            // Restore last active tab from session storage
            const lastActiveTab = sessionStorage.getItem('currentUserEditTab');
            if (lastActiveTab && document.getElementById(lastActiveTab)) {
                showTab(lastActiveTab);
            }
            
            // Password reset options
            const resetOptions = document.querySelectorAll('input[name="resetPasswordOption"]');
            const manualPasswordFields = document.getElementById('manualPasswordFields');
            
            if (resetOptions && manualPasswordFields) {
                resetOptions.forEach(option => {
                    option.addEventListener('change', function() {
                        if (this.value === 'manual') {
                            manualPasswordFields.style.display = 'block';
                        } else {
                            manualPasswordFields.style.display = 'none';
                        }
                    });
                });
            }
            
            // Password toggle visibility
            document.querySelectorAll('.password-toggle').forEach(toggle => {
                toggle.addEventListener('click', function() {
                    const input = this.parentElement.querySelector('input');
                    const icon = this.querySelector('i');
                    
                    if (input.type === 'password') {
                        input.type = 'text';
                        icon.classList.remove('bi-eye');
                        icon.classList.add('bi-eye-slash');
                    } else {
                        input.type = 'password';
                        icon.classList.remove('bi-eye-slash');
                        icon.classList.add('bi-eye');
                    }
                });
            });
            
            // Password strength meter
            const newPassword = document.getElementById('newPassword');
            const confirmPassword = document.getElementById('confirmPassword');
            const passwordStrength = document.getElementById('passwordStrength');
            const passwordMatch = document.querySelector('.password-match');
            const passwordMismatch = document.querySelector('.password-mismatch');
            
            if (newPassword && passwordStrength) {
                newPassword.addEventListener('input', function() {
                    const strength = calculatePasswordStrength(this.value);
                    updatePasswordStrengthUI(strength);
                    checkPasswordMatch();
                });
            }
            
            if (confirmPassword && passwordMatch && passwordMismatch) {
                confirmPassword.addEventListener('input', checkPasswordMatch);
            }
            
            function calculatePasswordStrength(password) {
                if (!password) return 0;
                
                let strength = 0;
                
                // Length check
                if (password.length >= 8) strength += 1;
                if (password.length >= 12) strength += 1;
                
                // Character variety checks
                if (/[a-z]/.test(password)) strength += 1;
                if (/[A-Z]/.test(password)) strength += 1;
                if (/\d/.test(password)) strength += 1;
                if (/[^a-zA-Z0-9]/.test(password)) strength += 1;
                
                // Return normalized strength (0-4)
                return Math.min(4, Math.floor(strength / 2));
            }
            
            function updatePasswordStrengthUI(strength) {
                if (!passwordStrength) return;
                
                const strengthMeter = passwordStrength.querySelector('.strength-meter-fill');
                const strengthText = passwordStrength.querySelector('.strength-text span');
                
                if (strengthMeter && strengthText) {
                    // Update strength meter fill
                    strengthMeter.setAttribute('data-strength', strength);
                    
                    // Update strength text
                    const strengthLabels = ['Weak', 'Fair', 'Good', 'Strong', 'Very Strong'];
                    strengthText.textContent = strengthLabels[strength];
                    
                    // Update color classes
                    strengthMeter.className = 'strength-meter-fill';
                    strengthMeter.classList.add(`strength-${strength}`);
                }
            }
            
            function checkPasswordMatch() {
                if (!newPassword || !confirmPassword || !passwordMatch || !passwordMismatch) return;
                
                const pwd = newPassword.value;
                const confirm = confirmPassword.value;
                
                if (!confirm) {
                    passwordMatch.style.display = 'none';
                    passwordMismatch.style.display = 'none';
                    return;
                }
                
                if (pwd === confirm) {
                    passwordMatch.style.display = 'block';
                    passwordMismatch.style.display = 'none';
                } else {
                    passwordMatch.style.display = 'none';
                    passwordMismatch.style.display = 'block';
                }
            }
            
            // Delete confirmation handling
            const deleteConfirmInput = document.getElementById('deleteConfirmInput');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            
            if (deleteConfirmInput && confirmDeleteBtn) {
                deleteConfirmInput.addEventListener('input', function() {
                    confirmDeleteBtn.disabled = this.value !== 'DELETE';
                });
            }
            
            // Role-based permissions
            const roleSelect = document.getElementById('roleSelect');
            const permissionCheckboxes = document.querySelectorAll('.permission-checkbox');
            
            if (roleSelect) {
                roleSelect.addEventListener('change', function() {
                    const selectedRole = this.value;
                    
                    // Reset all permissions first
                    permissionCheckboxes.forEach(checkbox => {
                        checkbox.checked = false;
                    });
                    
                    // Set permissions based on role
                    if (selectedRole === 'Administrator') {
                        // Admins get all permissions
                        permissionCheckboxes.forEach(checkbox => {
                            checkbox.checked = true;
                        });
                    } else if (selectedRole === 'Department Manager') {
                        // Department managers get view permissions and some management permissions
                        permissionCheckboxes.forEach(checkbox => {
                            const permName = checkbox.name.split('.')[0].split('[')[1].split(']')[0];
                            const viewPermissions = ['0', '1', '3', '7']; // IDs of view permissions
                            const managerPermissions = ['2', '8']; // IDs of additional manager permissions
                            
                            checkbox.checked = viewPermissions.includes(permName) || managerPermissions.includes(permName);
                        });
                    } else if (selectedRole === 'Support Agent') {
                        // Support agents get only basic view permissions
                        permissionCheckboxes.forEach(checkbox => {
                            const permName = checkbox.name.split('.')[0].split('[')[1].split(']')[0];
                            const agentPermissions = ['0', '3', '7']; // IDs of agent permissions
                            
                            checkbox.checked = agentPermissions.includes(permName);
                        });
                    }
                });
            }
            
            // Select/clear all permissions
            const selectAllPermissions = document.getElementById('selectAllPermissions');
            const clearAllPermissions = document.getElementById('clearAllPermissions');
            
            if (selectAllPermissions) {
                selectAllPermissions.addEventListener('click', function() {
                    permissionCheckboxes.forEach(checkbox => {
                        checkbox.checked = true;
                    });
                });
            }
            
            if (clearAllPermissions) {
                clearAllPermissions.addEventListener('click', function() {
                    permissionCheckboxes.forEach(checkbox => {
                        checkbox.checked = false;
                    });
                });
            }
            
            // Initialize permissions based on current role on page load
            function initializePermissionsForCurrentRole() {
                if (!roleSelect) return;
                
                const currentRole = roleSelect.value;
                if (currentRole) {
                    // Only auto-set permissions if the form is new/unused
                    const anyPermissionSet = Array.from(permissionCheckboxes)
                        .some(checkbox => checkbox.checked);
                        
                    if (!anyPermissionSet) {
                        simulateRoleChange(currentRole);
                    }
                }
            }
            
            function simulateRoleChange(role) {
                // Reset all permissions first
                permissionCheckboxes.forEach(checkbox => {
                    checkbox.checked = false;
                });
                
                // Set permissions based on role
                if (role === 'Administrator') {
                    // Admins get all permissions
                    permissionCheckboxes.forEach(checkbox => {
                        checkbox.checked = true;
                    });
                } else if (role === 'Department Manager') {
                    // Department managers get view permissions and some management permissions
                    permissionCheckboxes.forEach(checkbox => {
                        const permName = checkbox.name.split('.')[0].split('[')[1].split(']')[0];
                        const viewPermissions = ['0', '1', '3', '7']; // IDs of view permissions
                        const managerPermissions = ['2', '8']; // IDs of additional manager permissions
                        
                        checkbox.checked = viewPermissions.includes(permName) || managerPermissions.includes(permName);
                    });
                } else if (role === 'Support Agent') {
                    // Support agents get only basic view permissions
                    permissionCheckboxes.forEach(checkbox => {
                        const permName = checkbox.name.split('.')[0].split('[')[1].split(']')[0];
                        const agentPermissions = ['0', '3', '7']; // IDs of agent permissions
                        
                        checkbox.checked = agentPermissions.includes(permName);
                    });
                }
            }
            
            // Initialize permissions on page load
            initializePermissionsForCurrentRole();
            
            // Form validation
            const userEditForm = document.getElementById('userEditForm');
            
            if (userEditForm) {
                userEditForm.addEventListener('submit', function(e) {
                    if (!this.checkValidity()) {
                        e.preventDefault();
                        this.classList.add('was-validated');
                        return;
                    }
                    
                    // Check password match if manual reset selected
                    const resetOption = document.querySelector('input[name="resetPasswordOption"]:checked');
                    if (resetOption && resetOption.value === 'manual') {
                        if (newPassword.value !== confirmPassword.value) {
                            e.preventDefault();
                            passwordMismatch.style.display = 'block';
                            passwordMatch.style.display = 'none';
                            showTab('account'); // Switch to account tab to show the error
                            return;
                        }
                    }
                });
            }
        });
        
        // Delete confirmation modal
        function confirmDelete(id) {
            const modal = document.getElementById('deleteConfirmModal');
            if (modal && typeof bootstrap !== 'undefined') {
                const bootstrapModal = new bootstrap.Modal(modal);
                
                // Reset confirmation input
                document.getElementById('deleteConfirmInput').value = '';
                document.getElementById('confirmDeleteBtn').disabled = true;
                
                bootstrapModal.show();
            }
        }
        
        // Toast notification function
        function showToast(type, message) {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast-notification ${type}`;
            
            const icon = type === 'success' 
                ? '<i class="bi bi-check-circle"></i>' 
                : '<i class="bi bi-exclamation-circle"></i>';
            
            toast.innerHTML = `
                <div class="toast-icon">
                    ${icon}
                </div>
                <div class="toast-content">
                    <div class="toast-title">${type === 'success' ? 'Success' : 'Error'}</div>
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close" onclick="hideToast(this.parentElement)" aria-label="Close notification">
                    <i class="bi bi-x"></i>
                </button>
            `;
            
            // Add to document
            document.body.appendChild(toast);
            
            // Show toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            // Auto-hide toast after 5 seconds
            const hideTimeout = setTimeout(() => {
                hideToast(toast);
            }, 5000);
            
            // Store timeout ID on the element for later cleanup
            toast.dataset.timeoutId = hideTimeout;
        }
        
        function hideToast(toast) {
            // Clear any pending timeout
            if (toast.dataset.timeoutId) {
                clearTimeout(parseInt(toast.dataset.timeoutId));
            }
            
            toast.classList.remove('show');
            setTimeout(() => {
                if (toast.parentNode) {
                    document.body.removeChild(toast);
                }
            }, 300);
        }
    </script>
}

@section Styles {
    <style>
        /* User Edit Header */
        .user-edit-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1.5rem;
        }
        
        .user-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 1.125rem;
            color: white;
            margin-right: 1rem;
            text-transform: uppercase;
        }
        
        .user-avatar.active {
            background-color: var(--bs-primary);
        }
        
        .user-avatar.inactive {
            background-color: var(--bs-secondary);
        }
        
        .user-info {
            flex: 1;
        }
        
        .user-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0 0 0.375rem;
        }
        
        .user-meta {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }
        
        .user-stats {
            display: flex;
            gap: 1.5rem;
        }
        
        .stat-item {
            text-align: center;
        }
        
        .stat-value {
            font-size: 1rem;
            font-weight: 600;
            color: var(--bs-gray-800);
        }
        
        .stat-label {
            font-size: 0.75rem;
            color: var(--bs-gray-500);
        }
        
        /* Page header */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .page-title {
            font-size: 1.75rem;
            font-weight: 600;
            margin: 0 0 0.25rem;
        }
        
        .page-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        /* Card styles */
        .card {
            background-color: #fff;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
            border: 1px solid rgba(0,0,0,0.125);
        }
        
        .card-header {
            padding: 1rem 1.25rem;
            background-color: rgba(0,0,0,0.03);
            border-bottom: 1px solid rgba(0,0,0,0.125);
        }
        
        .card-body {
            padding: 1.25rem;
        }
        
        /* Form Tabs */
        .form-tabs {
            margin-bottom: 2rem;
        }
        
        .form-tabs-header {
            display: flex;
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
            scrollbar-width: none; /* Firefox */
            -ms-overflow-style: none; /* IE and Edge */
        }
        
        .form-tabs-header::-webkit-scrollbar {
            display: none; /* Chrome, Safari, Opera */
        }
        
        .form-tab {
            padding: 1rem 1.5rem;
            flex: 1;
            text-align: center;
            background: none;
            border: none;
            color: var(--bs-gray-600);
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border-bottom: 2px solid transparent;
        }
        
        .form-tab i {
            margin-right: 0.5rem;
            font-size: 1.125rem;
        }
        
        .form-tab:hover {
            color: var(--bs-gray-900);
        }
        
        .form-tab.active {
            color: var(--bs-primary);
            border-bottom-color: var(--bs-primary);
        }
        
        .form-tabs-progress {
            height: 4px;
            background-color: var(--bs-gray-200);
            margin-top: 1px;
            border-radius: 100px;
            overflow: hidden;
        }
        
        .form-tabs-progress .progress-bar {
            height: 100%;
            background-color: var(--bs-primary);
            border-radius: 100px;
            transition: width 0.3s ease;
        }
        
        /* Form Sections */
        .form-sections {
            position: relative;
        }
        
        .form-section {
            display: none;
            animation: fadeIn 0.3s ease;
        }
        
        .form-section.active {
            display: block;
        }
        
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .form-grid-2 {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
        }
        
        .form-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid var(--bs-gray-200);
        }
        
        /* Permissions Section */
        .permissions-section {
            margin-top: 1.5rem;
        }
        
        .permissions-section h3 {
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }
        
        .permission-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        .permission-groups {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
        }
        
        .permission-group {
            border: 1px solid var(--bs-gray-200);
            border-radius: 0.375rem;
            overflow: hidden;
            transition: box-shadow 0.3s ease;
        }
        
        .permission-group:hover {
            box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);
        }
        
        .permission-group-header {
            background-color: var(--bs-gray-100);
            padding: 0.75rem 1rem;
            border-bottom: 1px solid var(--bs-gray-200);
        }
        
        .permission-group-header h4 {
            font-size: 0.875rem;
            font-weight: 600;
            margin: 0;
            color: var(--bs-gray-700);
        }
        
        .permission-list {
            padding: 0.5rem 0;
        }
        
        .permission-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 1rem;
            border-bottom: 1px solid var(--bs-gray-100);
        }
        
        .permission-item:last-child {
            border-bottom: none;
        }
        
        .permission-label {
            flex: 1;
            padding-right: 1rem;
        }
        
        .permission-label span {
            display: block;
            font-size: 0.875rem;
            color: var(--bs-gray-700);
            margin-bottom: 0.25rem;
        }
        
        .permission-label small {
            font-size: 0.75rem;
        }
        
        /* Form switch */
        .form-switch {
            position: relative;
            display: inline-block;
            padding-left: 3.5rem;
            line-height: 1.7;
        }
        
        .form-switch-input {
            position: absolute;
            left: -9999px;
            width: 1px;
            height: 1px;
        }
        
        .form-switch-label {
            position: relative;
            margin-bottom: 0;
            vertical-align: top;
            cursor: pointer;
        }
        
        .form-switch-label::before {
            position: absolute;
            top: 0.25rem;
            left: -3.5rem;
            display: block;
            width: 3rem;
            height: 1.5rem;
            pointer-events: all;
            content: "";
            background-color: #e9ecef;
            border-radius: 1.5rem;
            transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }
        
        .form-switch-label::after {
            position: absolute;
            top: 0.35rem;
            left: -3.4rem;
            width: 1.3rem;
            height: 1.3rem;
            content: "";
            background-color: #fff;
            border-radius: 1.5rem;
            transition: transform 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }
        
        .form-switch-input:checked ~ .form-switch-label::before {
            background-color: var(--bs-primary);
        }
        
        .form-switch-input:checked ~ .form-switch-label::after {
            transform: translateX(1.5rem);
        }
        
        /* Password Reset Options */
        .reset-password-options {
            margin-top: 0.5rem;
        }
        
        .form-check {
            margin-bottom: 0.5rem;
        }
        
        .password-fields {
            background-color: var(--bs-gray-100);
            padding: 1rem;
            border-radius: 0.375rem;
            margin-top: 1rem;
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }
        
        .password-input-container {
            position: relative;
        }
        
        .password-toggle {
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: var(--bs-gray-500);
            cursor: pointer;
            padding: 0;
        }
        
        .password-toggle:hover {
            color: var(--bs-gray-700);
        }
        
        .password-strength {
            margin-top: 0.5rem;
        }
        
        .strength-meter {
            height: 4px;
            background-color: var(--bs-gray-200);
            border-radius: 100px;
            margin-bottom: 0.25rem;
            overflow: hidden;
        }
        
        .strength-meter-fill {
            height: 100%;
            width: 0;
            border-radius: 100px;
            transition: width 0.3s ease, background-color 0.3s ease;
        }
        
        .strength-meter-fill[data-strength="0"] {
            width: 20%;
            background-color: #dc3545;
        }
        
        .strength-meter-fill[data-strength="1"] {
            width: 40%;
            background-color: #ffc107;
        }
        
        .strength-meter-fill[data-strength="2"] {
            width: 60%;
            background-color: #fd7e14;
        }
        
        .strength-meter-fill[data-strength="3"] {
            width: 80%;
            background-color: #28a745;
        }
        
        .strength-meter-fill[data-strength="4"] {
            width: 100%;
            background-color: #20c997;
        }
        
        .strength-text {
            font-size: 0.75rem;
            color: var(--bs-gray-600);
        }
        
        .password-match, .password-mismatch {
            font-size: 0.75rem;
            margin-top: 0.25rem;
        }
        
        /* Danger Zone */
        .danger-zone {
            background-color: #fff5f5;
            border: 1px solid #ffe3e3;
            border-radius: 0.375rem;
            overflow: hidden;
        }
        
        .danger-zone-title {
            background-color: #ffe3e3;
            color: var(--bs-danger);
            font-size: 0.875rem;
            font-weight: 600;
            padding: 0.75rem 1.25rem;
            margin: 0;
        }
        
        .danger-zone-content {
            padding: 1.25rem;
        }
        
        .danger-action {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .danger-info {
            flex: 1;
            padding-right: 1.5rem;
        }
        
        .danger-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }
        
        .danger-description {
            font-size: 0.75rem;
            color: var(--bs-gray-600);
        }
        
        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1050;
            overflow: auto;
        }
        
        .modal.show {
            display: block;
        }
        
        .modal-dialog {
            margin: 1.75rem auto;
            max-width: 600px;
            position: relative;
        }
        
        .modal-content {
            position: relative;
            background-color: white;
            border-radius: 0.5rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            display: flex;
            flex-direction: column;
            outline: 0;
        }
        
        .modal-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid var(--bs-gray-200);
        }
        
        .modal-title {
            font-size: 1.125rem;
            font-weight: 600;
            margin: 0;
        }
        
        .btn-close {
            padding: 0;
            background: transparent;
            border: 0;
            font-size: 1.5rem;
            line-height: 1;
            color: var(--bs-gray-500);
            cursor: pointer;
        }
        
        .modal-body {
            position: relative;
            flex: 1 1 auto;
            padding: 1.5rem;
        }
        
        .modal-footer {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding: 1.25rem 1.5rem;
            border-top: 1px solid var(--bs-gray-200);
            gap: 0.75rem;
        }
        
        /* Toast Notification */
        .toast-notification {
            position: fixed;
            bottom: 24px;
            right: 24px;
            display: flex;
            align-items: flex-start;
            background-color: white;
            border-radius: 0.375rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            padding: 1rem;
            width: 320px;
            z-index: 1000;
            transform: translateY(100%);
            opacity: 0;
            transition: all 0.3s ease;
        }
        
        .toast-notification.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        .toast-notification.success {
            border-left: 4px solid var(--bs-success);
        }
        
        .toast-notification.error {
            border-left: 4px solid var(--bs-danger);
        }
        
        .toast-icon {
            margin-right: 0.75rem;
            font-size: 1.25rem;
        }
        
        .toast-notification.success .toast-icon {
            color: var(--bs-success);
        }
        
        .toast-notification.error .toast-icon {
            color: var(--bs-danger);
        }
        
        .toast-content {
            flex: 1;
        }
        
        .toast-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }
        
        .toast-message {
            font-size: 0.875rem;
            color: var(--bs-gray-600);
        }
        
        .toast-close {
            background: none;
            border: none;
            font-size: 1.25rem;
            color: var(--bs-gray-500);
            cursor: pointer;
            padding: 0;
            margin-left: 0.75rem;
        }
        
        .toast-close:hover {
            color: var(--bs-gray-700);
        }
        
        /* Alerts */
        .alert {
            padding: 1rem;
            margin-bottom: 1.5rem;
            border-radius: 0.375rem;
        }
        
        .alert-danger {
            background-color: rgba(220, 53, 69, 0.1);
            border: 1px solid rgba(220, 53, 69, 0.2);
            color: var(--bs-danger);
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
        }
        
        .alert i {
            font-size: 1.25rem;
            margin-top: 0.125rem;
        }
        
        /* Form Validation */
        .text-danger {
            color: var(--bs-danger);
            font-size: 0.75rem;
            margin-top: 0.25rem;
            display: block;
        }
        
        .text-success {
            color: var(--bs-success);
        }
        
        /* Button Styles */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-weight: 500;
            line-height: 1.5;
            text-align: center;
            vertical-align: middle;
            cursor: pointer;
            user-select: none;
            border: 1px solid transparent;
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
            border-radius: 0.375rem;
            transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }
        
        .btn-primary {
            color: #fff;
            background-color: var(--bs-primary);
            border-color: var(--bs-primary);
        }
        
        .btn-primary:hover {
            background-color: #0b5ed7;
            border-color: #0a58ca;
        }
        
        .btn-success {
            color: #fff;
            background-color: var(--bs-success);
            border-color: var(--bs-success);
        }
        
        .btn-success:hover {
            background-color: #157347;
            border-color: #146c43;
        }
        
        .btn-outline {
            color: var(--bs-gray-700);
            border-color: var(--bs-gray-300);
            background-color: #fff;
        }
        
        .btn-outline:hover {
            color: var(--bs-gray-900);
            background-color: var(--bs-gray-100);
            border-color: var(--bs-gray-400);
        }
        
        .btn-outline-danger {
            color: var(--bs-danger);
            border-color: var(--bs-danger);
            background-color: transparent;
        }
        
        .btn-outline-danger:hover {
            color: #fff;
            background-color: var(--bs-danger);
            border-color: var(--bs-danger);
        }
        
        .btn-danger {
            color: #fff;
            background-color: var(--bs-danger);
            border-color: var(--bs-danger);
        }
        
        .btn-danger:hover {
            background-color: #bb2d3b;
            border-color: #b02a37;
        }
        
        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            border-radius: 0.25rem;
        }
        
        .btn i {
            margin-right: 0.375rem;
        }
        
        .btn:disabled {
            opacity: 0.65;
            pointer-events: none;
        }
        
        /* Utility Classes */
        .mt-3 { margin-top: 1rem; }
        .mt-4 { margin-top: 1.5rem; }
        .mt-5 { margin-top: 3rem; }
        .mb-3 { margin-bottom: 1rem; }
        .ms-4 { margin-left: 1.5rem; }
        .d-flex { display: flex; }
        .d-block { display: block; }
        .justify-content-between { justify-content: space-between; }
        .align-items-center { align-items: center; }
        .required { color: var(--bs-danger); }
        
        /* Responsive Adjustments */
        @@media (max-width: 992px) {
            .user-edit-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .user-stats {
                align-self: flex-start;
                margin-top: 1rem;
            }
            
            .form-grid-2 {
                grid-template-columns: 1fr;
            }
            
            .permission-groups {
                grid-template-columns: 1fr;
            }
            
            .password-fields {
                grid-template-columns: 1fr;
            }
        }
        
        @@media (max-width: 768px) {
            .form-tab {
                font-size: 0.875rem;
                padding: 0.75rem 1rem;
            }
            
            .form-tab i {
                margin-right: 0.25rem;
            }
            
            .danger-action {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .danger-info {
                padding-right: 0;
            }
        }
        
        @@media (max-width: 576px) {
            .form-tabs-header {
                flex-wrap: wrap;
            }
            
            .form-tab {
                flex: 1 0 100%;
            }
            
            .user-meta {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
            
            .form-buttons {
                flex-direction: column;
                gap: 1rem;
            }
            
            .form-buttons button {
                width: 100%;
            }
        }
    </style>
}