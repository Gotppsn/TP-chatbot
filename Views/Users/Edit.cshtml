@model AIHelpdeskSupport.ViewModels.UserViewModel
@{
    ViewData["Title"] = "Edit User";
}

<div class="edit-header">
    <h1 class="edit-title">Edit User</h1>
    <p class="text-secondary">Update user information and permissions</p>
    <a href="/Users" class="back-link">← Back to Users</a>
</div>

<div class="user-profile">
    <div class="user-avatar">@Model.FirstName[0]@Model.LastName[0]</div>
    <div class="user-info">
        <h2 class="user-name">@Model.FullName</h2>
        <div class="user-meta">
            <span class="user-role">@Model.Role</span>
            <span class="user-department">@Model.Department</span>
            <span class="user-status @(Model.IsActive ? "active" : "inactive")">
                @(Model.IsActive ? "Active" : "Inactive")
            </span>
        </div>
        <div class="user-stats">
            <div class="stat-item">
                <span class="stat-label">Created</span>
                <span class="stat-value">@Model.CreatedAt.ToString("MMM d, yyyy")</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Last Login</span>
                <span class="stat-value">
                    @(Model.LastLogin?.ToString("MMM d, yyyy HH:mm") ?? "Never")
                </span>
            </div>
        </div>
    </div>
</div>

<form id="userEditForm" asp-controller="Users" asp-action="Edit" method="post">
    <div asp-validation-summary="ModelOnly" class="validation-summary"></div>
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="CreatedAt" />
    <input type="hidden" asp-for="LastLogin" />

    <div class="tabs">
        <nav class="tabs-nav">
            <a href="#" class="tab-link active" data-tab="basic-info">
                <i class="bi bi-person"></i> Basic Info
            </a>
            <a href="#" class="tab-link" data-tab="permissions">
                <i class="bi bi-shield-lock"></i> Permissions
            </a>
            <a href="#" class="tab-link" data-tab="account">
                <i class="bi bi-gear"></i> Account
            </a>
        </nav>
    </div>

    <!-- Basic Info Tab -->
    <div class="tab-content active" id="basic-info">
        <div class="section">
            <h3 class="section-title">Personal Information</h3>
            
            <div class="form-group">
                <label asp-for="FirstName" class="form-label">First Name *</label>
                <i class="bi bi-person input-icon"></i>
                <input asp-for="FirstName" class="form-control" required />
                <span asp-validation-for="FirstName" class="validation-message"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="LastName" class="form-label">Last Name *</label>
                <i class="bi bi-person input-icon"></i>
                <input asp-for="LastName" class="form-control" required />
                <span asp-validation-for="LastName" class="validation-message"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="Email" class="form-label">Email Address *</label>
                <i class="bi bi-envelope input-icon"></i>
                <input asp-for="Email" class="form-control" type="email" required />
                <span asp-validation-for="Email" class="validation-message"></span>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn btn-primary" onclick="navigateTab('permissions')">
                    Continue →
                </button>
            </div>
        </div>
    </div>

    <!-- Permissions Tab -->
    <div class="tab-content" id="permissions">
        <div class="section">
            <h3 class="section-title">Role & Permissions</h3>
            
            <div class="form-group">
                <label asp-for="Department" class="form-label">Department *</label>
                <select asp-for="Department" class="form-select" required>
                    <option value="">Select Department</option>
                    <option value="Administration">Administration</option>
                    <option value="Customer Service">Customer Service</option>
                    <option value="IT Support">IT Support</option>
                    <option value="Sales">Sales</option>
                    <option value="Billing">Billing</option>
                    <option value="Technical">Technical</option>
                    <option value="Operations">Operations</option>
                </select>
                <span asp-validation-for="Department" class="validation-message"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="Role" class="form-label">Role *</label>
                <select asp-for="Role" class="form-select" required id="roleSelect">
                    <option value="">Select Role</option>
                    <option value="Administrator">Administrator</option>
                    <option value="Department Manager">Department Manager</option>
                    <option value="Support Agent">Support Agent</option>
                </select>
                <span asp-validation-for="Role" class="validation-message"></span>
                <span class="helper-text">Role determines default permission set</span>
            </div>
            
            <div class="permissions-section">
                <div class="permissions-header">
                    <h4>Access Permissions</h4>
                    <div class="permissions-actions">
                        <button type="button" class="btn-link" id="selectAllPermissions">
                            Select All
                        </button>
                        <button type="button" class="btn-link" id="clearAllPermissions">
                            Clear All
                        </button>
                    </div>
                </div>
                
                <div class="permission-groups">
                    <!-- Dashboard & Analytics -->
                    <div class="permission-group">
                        <h5><i class="bi bi-speedometer2"></i> Dashboard & Analytics</h5>
                        <div class="permission-list">
                            <div class="permission-item">
                                <div class="permission-checkbox">
                                    <input type="checkbox" id="perm-dashboard" name="Permissions[0].IsGranted" value="true" checked class="permission-input" />
                                    <input type="hidden" name="Permissions[0].Name" value="ViewDashboard" />
                                </div>
                                <div class="permission-label">
                                    <label for="perm-dashboard">View Dashboard</label>
                                    <span class="permission-desc">Access to main dashboard and statistics</span>
                                </div>
                            </div>
                            <div class="permission-item">
                                <div class="permission-checkbox">
                                    <input type="checkbox" id="perm-analytics" name="Permissions[1].IsGranted" value="true" checked class="permission-input" />
                                    <input type="hidden" name="Permissions[1].Name" value="ViewAnalytics" />
                                </div>
                                <div class="permission-label">
                                    <label for="perm-analytics">View Analytics</label>
                                    <span class="permission-desc">Access to advanced analytics and reports</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Chatbots -->
                    <div class="permission-group">
                        <h5><i class="bi bi-robot"></i> Chatbot Management</h5>
                        <div class="permission-list">
                            <div class="permission-item">
                                <div class="permission-checkbox">
                                    <input type="checkbox" id="perm-view-chatbots" name="Permissions[2].IsGranted" value="true" checked class="permission-input" />
                                    <input type="hidden" name="Permissions[2].Name" value="ViewChatbots" />
                                </div>
                                <div class="permission-label">
                                    <label for="perm-view-chatbots">View Chatbots</label>
                                    <span class="permission-desc">View configuration of all chatbots</span>
                                </div>
                            </div>
                            <div class="permission-item">
                                <div class="permission-checkbox">
                                    <input type="checkbox" id="perm-manage-chatbots" name="Permissions[3].IsGranted" value="true" class="permission-input" />
                                    <input type="hidden" name="Permissions[3].Name" value="ManageChatbots" />
                                </div>
                                <div class="permission-label">
                                    <label for="perm-manage-chatbots">Manage Chatbots</label>
                                    <span class="permission-desc">Create, edit and delete chatbots</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Knowledge Base -->
                    <div class="permission-group">
                        <h5><i class="bi bi-journal-text"></i> Knowledge Base</h5>
                        <div class="permission-list">
                            <div class="permission-item">
                                <div class="permission-checkbox">
                                    <input type="checkbox" id="perm-view-kb" name="Permissions[4].IsGranted" value="true" checked class="permission-input" />
                                    <input type="hidden" name="Permissions[4].Name" value="ViewKnowledgeBases" />
                                </div>
                                <div class="permission-label">
                                    <label for="perm-view-kb">View Knowledge Bases</label>
                                    <span class="permission-desc">Access knowledge base content</span>
                                </div>
                            </div>
                            <div class="permission-item">
                                <div class="permission-checkbox">
                                    <input type="checkbox" id="perm-manage-kb" name="Permissions[5].IsGranted" value="true" class="permission-input" />
                                    <input type="hidden" name="Permissions[5].Name" value="ManageKnowledgeBases" />
                                </div>
                                <div class="permission-label">
                                    <label for="perm-manage-kb">Manage Knowledge Bases</label>
                                    <span class="permission-desc">Create, edit, and delete knowledge bases</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn btn-secondary" onclick="navigateTab('basic-info')">
                    ← Back
                </button>
                <button type="button" class="btn btn-primary" onclick="navigateTab('account')">
                    Continue →
                </button>
            </div>
        </div>
    </div>

    <!-- Account Tab -->
    <div class="tab-content" id="account">
        <div class="section">
            <h3 class="section-title">Account Settings</h3>
            
            <div class="account-status">
                <div class="status-toggle">
                    <input asp-for="IsActive" class="toggle-input" id="accountActiveToggle" />
                    <label for="accountActiveToggle" class="toggle-label"></label>
                    <span class="toggle-text">Account Active</span>
                </div>
                <p class="status-description">@(Model.IsActive ? "User can access the system" : "User account is disabled")</p>
            </div>
            
            <div class="password-section">
                <h4>Password Management</h4>
                
                <div class="password-options">
                    <div class="option">
                        <input type="radio" id="resetPassword-no" name="resetPasswordOption" value="no" checked class="radio-input" />
                        <label for="resetPassword-no" class="radio-label">No password reset</label>
                        <p class="option-desc">Keep the current password unchanged</p>
                    </div>
                    
                    <div class="option">
                        <input type="radio" id="resetPassword-email" name="resetPasswordOption" value="email" class="radio-input" />
                        <label for="resetPassword-email" class="radio-label">Send password reset email</label>
                        <p class="option-desc">User will receive email instructions to reset their password</p>
                    </div>
                    
                    <div class="option">
                        <input type="radio" id="resetPassword-manual" name="resetPasswordOption" value="manual" class="radio-input" />
                        <label for="resetPassword-manual" class="radio-label">Set password manually</label>
                        <p class="option-desc">Directly enter a new password for this user</p>
                    </div>
                </div>
                
                <div id="manualPasswordFields" style="display: none;">
                    <div class="form-group">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" id="newPassword" name="NewPassword" class="form-control" />
                        <button type="button" class="password-toggle" aria-label="Toggle password visibility">
                            <i class="bi bi-eye"></i>
                        </button>
                        <div class="password-strength">
                            <div class="strength-meter">
                                <div class="meter-fill" data-strength="0"></div>
                            </div>
                            <p class="strength-text">Password strength: <span>Weak</span></p>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <input type="password" id="confirmPassword" name="ConfirmPassword" class="form-control" />
                        <button type="button" class="password-toggle" aria-label="Toggle password visibility">
                            <i class="bi bi-eye"></i>
                        </button>
                        <div id="passwordMatch" class="match-indicator success" style="display: none;">
                            Passwords match
                        </div>
                        <div id="passwordMismatch" class="match-indicator error" style="display: none;">
                            Passwords do not match
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn btn-secondary" onclick="navigateTab('permissions')">
                    ← Back
                </button>
                <button type="submit" class="btn btn-success">
                    Save Changes
                </button>
            </div>
        </div>
    </div>
</form>

<!-- Delete User Section -->
<div class="delete-section">
    <h3 class="delete-title">Delete User</h3>
    <p class="delete-warning">Are you sure you want to delete this user? This action <strong>cannot be undone</strong>.</p>
    <p class="delete-instruction">To confirm, type <strong>DELETE</strong> in the field below:</p>
    
    <div class="delete-confirm">
        <input type="text" id="deleteConfirmInput" class="form-control" placeholder="Type DELETE to confirm">
    </div>
    
    <div class="delete-actions">
        <button type="button" class="btn btn-secondary" id="cancelDeleteBtn">Cancel</button>
        <form asp-action="Delete" asp-route-id="@Model.Id" method="post">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-danger" id="confirmDeleteBtn" disabled>Delete User</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab navigation
            const tabLinks = document.querySelectorAll('.tab-link');
            const tabContents = document.querySelectorAll('.tab-content');
            
            window.navigateTab = function(tabId) {
                // Update active tab
                tabLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('data-tab') === tabId) {
                        link.classList.add('active');
                    }
                });
                
                // Show selected content
                tabContents.forEach(content => {
                    content.classList.remove('active');
                    if (content.id === tabId) {
                        content.classList.add('active');
                    }
                });
            };
            
            tabLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    navigateTab(this.getAttribute('data-tab'));
                });
            });
            
            // Account status toggle
            const accountActiveToggle = document.getElementById('accountActiveToggle');
            if (accountActiveToggle) {
                accountActiveToggle.addEventListener('change', function() {
                    const statusDesc = document.querySelector('.status-description');
                    if (statusDesc) {
                        statusDesc.textContent = this.checked ? 
                            "User can access the system" : 
                            "User account is disabled";
                    }
                });
            }
            
            // Password reset options
            const resetOptions = document.querySelectorAll('input[name="resetPasswordOption"]');
            const manualPasswordFields = document.getElementById('manualPasswordFields');
            
            resetOptions.forEach(option => {
                option.addEventListener('change', function() {
                    manualPasswordFields.style.display = this.value === 'manual' ? 'block' : 'none';
                });
            });
            
            // Password toggle visibility
            document.querySelectorAll('.password-toggle').forEach(toggle => {
                toggle.addEventListener('click', function() {
                    const input = this.previousElementSibling;
                    const icon = this.querySelector('i');
                    
                    input.type = input.type === 'password' ? 'text' : 'password';
                    icon.classList.toggle('bi-eye');
                    icon.classList.toggle('bi-eye-slash');
                });
            });
            
            // Password strength indicator
            const newPassword = document.getElementById('newPassword');
            const confirmPassword = document.getElementById('confirmPassword');
            const passwordMatch = document.getElementById('passwordMatch');
            const passwordMismatch = document.getElementById('passwordMismatch');
            
            if (newPassword) {
                newPassword.addEventListener('input', function() {
                    updatePasswordStrength(this.value);
                    checkPasswordMatch();
                });
            }
            
            if (confirmPassword) {
                confirmPassword.addEventListener('input', checkPasswordMatch);
            }
            
            function updatePasswordStrength(password) {
                if (!password) return;
                
                const meterFill = document.querySelector('.meter-fill');
                const strengthText = document.querySelector('.strength-text span');
                
                if (!meterFill || !strengthText) return;
                
                // Calculate strength (simplified)
                let strength = 0;
                if (password.length > 7) strength++;
                if (password.length > 10) strength++;
                if (/[A-Z]/.test(password)) strength++;
                if (/[0-9]/.test(password)) strength++;
                if (/[^A-Za-z0-9]/.test(password)) strength++;
                
                // Normalize to 0-4 range
                strength = Math.min(4, strength);
                
                // Update UI
                const labels = ['Weak', 'Fair', 'Good', 'Strong', 'Very Strong'];
                meterFill.setAttribute('data-strength', strength);
                strengthText.textContent = labels[strength];
            }
            
            function checkPasswordMatch() {
                if (!newPassword || !confirmPassword || !passwordMatch || !passwordMismatch) return;
                
                const pwd = newPassword.value;
                const confirm = confirmPassword.value;
                
                if (!confirm) {
                    passwordMatch.style.display = 'none';
                    passwordMismatch.style.display = 'none';
                    return;
                }
                
                passwordMatch.style.display = pwd === confirm ? 'block' : 'none';
                passwordMismatch.style.display = pwd === confirm ? 'none' : 'block';
            }
            
            // Delete confirmation
            const deleteConfirmInput = document.getElementById('deleteConfirmInput');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            
            if (deleteConfirmInput && confirmDeleteBtn) {
                deleteConfirmInput.addEventListener('input', function() {
                    confirmDeleteBtn.disabled = this.value !== 'DELETE';
                });
            }
            
            // Permission checkboxes
            const roleSelect = document.getElementById('roleSelect');
            const permissionInputs = document.querySelectorAll('.permission-input');
            const selectAllBtn = document.getElementById('selectAllPermissions');
            const clearAllBtn = document.getElementById('clearAllPermissions');
            
            if (roleSelect) {
                roleSelect.addEventListener('change', function() {
                    const role = this.value;
                    
                    // Reset all permissions
                    permissionInputs.forEach(input => {
                        input.checked = false;
                    });
                    
                    // Apply role-based permissions
                    if (role === 'Administrator') {
                        permissionInputs.forEach(input => {
                            input.checked = true;
                        });
                    } else if (role === 'Department Manager') {
                        const viewPermissions = ['ViewDashboard', 'ViewAnalytics', 'ViewChatbots', 'ViewKnowledgeBases'];
                        const managerPerms = ['ExportReports', 'ManageKnowledgeBases'];
                        
                        permissionInputs.forEach(input => {
                            const permName = input.nextElementSibling.value;
                            input.checked = viewPermissions.includes(permName) || managerPerms.includes(permName);
                        });
                    } else if (role === 'Support Agent') {
                        const agentPermissions = ['ViewDashboard', 'ViewChatbots', 'ViewKnowledgeBases'];
                        
                        permissionInputs.forEach(input => {
                            const permName = input.nextElementSibling.value;
                            input.checked = agentPermissions.includes(permName);
                        });
                    }
                });
            }
            
            // Select/clear all permissions
            if (selectAllBtn) {
                selectAllBtn.addEventListener('click', function() {
                    permissionInputs.forEach(input => {
                        input.checked = true;
                    });
                });
            }
            
            if (clearAllBtn) {
                clearAllBtn.addEventListener('click', function() {
                    permissionInputs.forEach(input => {
                        input.checked = false;
                    });
                });
            }
            
            // Form validation
            const userEditForm = document.getElementById('userEditForm');
            
            if (userEditForm) {
                userEditForm.addEventListener('submit', function(e) {
                    if (!this.checkValidity()) {
                        e.preventDefault();
                        this.classList.add('was-validated');
                        return;
                    }
                    
                    // Check password match for manual reset
                    const resetOption = document.querySelector('input[name="resetPasswordOption"]:checked');
                    if (resetOption && resetOption.value === 'manual') {
                        if (newPassword.value !== confirmPassword.value) {
                            e.preventDefault();
                            passwordMismatch.style.display = 'block';
                            passwordMatch.style.display = 'none';
                            navigateTab('account');
                            return;
                        }
                    }
                });
            }
        });
    </script>
}

@section Styles {
    <style>
        /* Layout */
        .edit-header {
            margin-bottom: 24px;
        }
        
        .edit-title {
            font-size: 24px;
            font-weight: 600;
            margin: 0 0 8px;
        }
        
        .back-link {
            display: inline-block;
            margin-top: 12px;
            color: #0d6efd;
            text-decoration: none;
        }
        
        .back-link:hover {
            text-decoration: underline;
        }
        
        /* User Profile */
        .user-profile {
            display: flex;
            align-items: center;
            margin-bottom: 24px;
        }
        
        .user-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background-color: #0d6efd;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin-right: 16px;
        }
        
        .user-name {
            font-size: 18px;
            font-weight: 600;
            margin: 0 0 8px;
        }
        
        .user-meta {
            display: flex;
            gap: 8px;
            margin-bottom: 8px;
        }
        
        .user-role,
        .user-department,
        .user-status {
            font-size: 12px;
            padding: 4px 8px;
            border-radius: 4px;
            background-color: #e9ecef;
        }
        
        .user-status.active {
            background-color: #d1e7dd;
            color: #0f5132;
        }
        
        .user-status.inactive {
            background-color: #f8d7da;
            color: #842029;
        }
        
        .user-stats {
            display: flex;
            gap: 16px;
            font-size: 12px;
        }
        
        .stat-label {
            color: #6c757d;
            margin-right: 4px;
        }
        
        /* Tabs */
        .tabs {
            margin-bottom: 24px;
        }
        
        .tabs-nav {
            display: flex;
            border-bottom: 1px solid #dee2e6;
        }
        
        .tab-link {
            padding: 12px 16px;
            color: #495057;
            text-decoration: none;
            border-bottom: 2px solid transparent;
            font-weight: 500;
        }
        
        .tab-link:hover {
            color: #0d6efd;
        }
        
        .tab-link.active {
            color: #0d6efd;
            border-bottom-color: #0d6efd;
        }
        
        .tab-link i {
            margin-right: 8px;
        }
        
        .tab-content {
            display: none;
            padding: 24px 0;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Form Elements */
        .section {
            margin-bottom: 32px;
        }
        
        .section-title {
            font-size: 18px;
            font-weight: 600;
            margin: 0 0 24px;
            padding-bottom: 12px;
            border-bottom: 1px solid #dee2e6;
        }
        
        .form-group {
            margin-bottom: 20px;
            position: relative;
        }
        
        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .form-control,
        .form-select {
            display: block;
            width: 100%;
            padding: 10px 12px;
            font-size: 14px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            transition: border-color 0.15s ease-in-out;
        }
        
        .input-icon {
            position: absolute;
            left: 12px;
            top: 38px;
            color: #6c757d;
        }
        
        .input-icon + .form-control {
            padding-left: 36px;
        }
        
        .helper-text {
            display: block;
            margin-top: 6px;
            font-size: 12px;
            color: #6c757d;
        }
        
        .validation-message {
            display: block;
            color: #dc3545;
            font-size: 12px;
            margin-top: 6px;
        }
        
        /* Permissions */
        .permissions-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }
        
        .permissions-header h4 {
            font-size: 16px;
            font-weight: 600;
            margin: 0;
        }
        
        .permissions-actions {
            display: flex;
            gap: 12px;
        }
        
        .btn-link {
            background: none;
            border: none;
            color: #0d6efd;
            padding: 0;
            font-size: 14px;
            text-decoration: underline;
            cursor: pointer;
        }
        
        .permission-groups {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 24px;
        }
        
        .permission-group h5 {
            font-size: 15px;
            font-weight: 600;
            margin: 0 0 16px;
        }
        
        .permission-group h5 i {
            margin-right: 8px;
            color: #0d6efd;
        }
        
        .permission-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .permission-item {
            display: flex;
            align-items: flex-start;
        }
        
        .permission-checkbox {
            margin-right: 12px;
            padding-top: 2px;
        }
        
        .permission-label label {
            display: block;
            font-weight: 500;
            margin-bottom: 4px;
        }
        
        .permission-desc {
            font-size: 12px;
            color: #6c757d;
        }
        
        /* Account Settings */
        .account-status {
            margin-bottom: 24px;
        }
        
        .status-toggle {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .toggle-input {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .toggle-label {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
            background-color: #ced4da;
            border-radius: 24px;
            margin-right: 12px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .toggle-label:after {
            content: "";
            position: absolute;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background-color: white;
            top: 3px;
            left: 3px;
            transition: left 0.2s;
        }
        
        .toggle-input:checked + .toggle-label {
            background-color: #0d6efd;
        }
        
        .toggle-input:checked + .toggle-label:after {
            left: 23px;
        }
        
        .toggle-text {
            font-weight: 500;
        }
        
        .status-description {
            font-size: 14px;
            color: #6c757d;
            margin: 0;
        }
        
        /* Password Section */
        .password-section {
            margin-bottom: 24px;
        }
        
        .password-section h4 {
            font-size: 16px;
            font-weight: 600;
            margin: 0 0 16px;
        }
        
        .password-options {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
        
        .option {
            padding: 12px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            transition: border-color 0.2s;
        }
        
        .option:has(.radio-input:checked) {
            border-color: #0d6efd;
            background-color: rgba(13, 110, 253, 0.05);
        }
        
        .radio-label {
            font-weight: 500;
            display: inline-block;
            margin-left: 8px;
        }
        
        .option-desc {
            margin: 8px 0 0 24px;
            font-size: 14px;
            color: #6c757d;
        }
        
        .password-toggle {
            position: absolute;
            right: 12px;
            top: 38px;
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
        }
        
        .password-strength {
            margin-top: 12px;
        }
        
        .strength-meter {
            height: 4px;
            background-color: #e9ecef;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 6px;
        }
        
        .meter-fill {
            height: 100%;
            width: 0;
            transition: all 0.3s;
        }
        
        .meter-fill[data-strength="0"] { width: 20%; background-color: #dc3545; }
        .meter-fill[data-strength="1"] { width: 40%; background-color: #ffc107; }
        .meter-fill[data-strength="2"] { width: 60%; background-color: #fd7e14; }
        .meter-fill[data-strength="3"] { width: 80%; background-color: #20c997; }
        .meter-fill[data-strength="4"] { width: 100%; background-color: #198754; }
        
        .strength-text {
            font-size: 12px;
            color: #6c757d;
            text-align: right;
            margin: 0;
        }
        
        .match-indicator {
            font-size: 12px;
            margin-top: 6px;
        }
        
        .match-indicator.success {
            color: #198754;
        }
        
        .match-indicator.error {
            color: #dc3545;
        }
        
        /* Form Actions */
        .form-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 32px;
            padding-top: 16px;
            border-top: 1px solid #dee2e6;
        }
        
        /* Delete Section */
        .delete-section {
            margin-top: 48px;
            padding-top: 24px;
            border-top: 1px solid #dc3545;
        }
        
        .delete-title {
            font-size: 18px;
            font-weight: 600;
            color: #dc3545;
            margin: 0 0 16px;
        }
        
        .delete-warning,
        .delete-instruction {
            margin-bottom: 16px;
        }
        
        .delete-confirm {
            margin-bottom: 16px;
        }
        
        .delete-actions {
            display: flex;
            gap: 12px;
        }
        
        /* Buttons */
        .btn {
            display: inline-block;
            font-weight: 500;
            text-align: center;
            white-space: nowrap;
            vertical-align: middle;
            user-select: none;
            border: 1px solid transparent;
            padding: 10px 16px;
            font-size: 14px;
            line-height: 1.5;
            border-radius: 4px;
            transition: all 0.15s ease-in-out;
            cursor: pointer;
        }
        
        .btn-primary {
            color: #fff;
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
        
        .btn-primary:hover {
            background-color: #0b5ed7;
            border-color: #0a58ca;
        }
        
        .btn-secondary {
            color: #6c757d;
            background-color: #f8f9fa;
            border-color: #dee2e6;
        }
        
        .btn-secondary:hover {
            background-color: #e9ecef;
            border-color: #ced4da;
        }
        
        .btn-success {
            color: #fff;
            background-color: #198754;
            border-color: #198754;
        }
        
        .btn-success:hover {
            background-color: #157347;
            border-color: #146c43;
        }
        
        .btn-danger {
            color: #fff;
            background-color: #dc3545;
            border-color: #dc3545;
        }
        
        .btn-danger:hover {
            background-color: #bb2d3b;
            border-color: #b02a37;
        }
        
        .btn:disabled {
            opacity: 0.65;
            pointer-events: none;
        }
        
        /* Responsive */
        @@media (max-width: 768px) {
            .permission-groups {
                grid-template-columns: 1fr;
            }
            
            .form-actions {
                flex-direction: column;
                gap: 12px;
            }
            
            .form-actions .btn {
                width: 100%;
            }
        }
    </style>
}