@model AIHelpdeskSupport.ViewModels.UserViewModel
@{
    ViewData["Title"] = "Edit User";
}

<div class="user-edit-container">
    <!-- Page header with breadcrumb -->
    <div class="page-header">
        <div class="d-flex flex-wrap align-items-center justify-content-between gap-3">
            <div>
                <h1 class="page-title">Edit User Profile</h1>
                <p class="text-secondary">Update user information, manage permissions and settings</p>
            </div>
            <div class="page-actions">
                <a href="/Users" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left"></i>
                    <span>Back to Users</span>
                </a>
            </div>
        </div>
    </div>

    <!-- Form validation summary -->
    @if (!ViewContext.ModelState.IsValid)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <div class="d-flex align-items-center">
                <i class="bi bi-exclamation-triangle-fill me-2 fs-5"></i>
                <div>
                    <strong>Please correct the following errors:</strong>
                    <div asp-validation-summary="ModelOnly" class="validation-summary"></div>
                </div>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- User profile card -->
    <div class="profile-card">
        <div class="profile-card-content">
            <div class="profile-avatar">
                <div class="user-avatar @(Model.Role.Contains("Admin") ? "admin" : Model.Role.Contains("Manager") ? "manager" : "user")">
                    @(string.IsNullOrEmpty(Model.FirstName) || string.IsNullOrEmpty(Model.LastName) ? "U" : $"{Model.FirstName[0]}{Model.LastName[0]}")
                </div>
            </div>
            <div class="profile-info">
                <div class="d-flex flex-wrap justify-content-between align-items-start gap-3">
                    <div>
                        <h2 class="profile-name">@Model.FullName</h2>
                        <div class="profile-badges">
                            <span class="badge role-badge">@Model.Role</span>
                            <span class="badge dept-badge">@Model.Department</span>
                            <span class="badge @(Model.IsActive ? "status-active" : "status-inactive")">
                                @(Model.IsActive ? "Active" : "Inactive")
                            </span>
                        </div>
                    </div>
                    <div class="profile-meta">
                        <div class="meta-item">
                            <i class="bi bi-calendar3"></i>
                            <span>Created: @Model.CreatedAt.ToString("MMM d, yyyy")</span>
                        </div>
                        <div class="meta-item">
                            <i class="bi bi-clock-history"></i>
                            <span>Last Login: @(Model.LastLogin?.ToString("MMM d, yyyy HH:mm") ?? "Never")</span>
                        </div>
                        <div class="meta-item">
                            <i class="bi bi-envelope"></i>
                            <span>@Model.Email</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit user form with tabs -->
    <form id="userEditForm" asp-controller="Users" asp-action="Edit" method="post">
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="CreatedAt" />
        <input type="hidden" asp-for="LastLogin" />

        <div class="tab-container">
            <!-- Tab navigation -->
            <div class="tab-navigation">
                <button type="button" class="tab-btn active" data-tab="basic-info">
                    <i class="bi bi-person"></i>
                    <span>Basic Info</span>
                </button>
                <button type="button" class="tab-btn" data-tab="permissions">
                    <i class="bi bi-shield-lock"></i>
                    <span>Role & Department</span>
                </button>
                <button type="button" class="tab-btn" data-tab="account">
                    <i class="bi bi-gear"></i>
                    <span>Account</span>
                </button>
            </div>

            <!-- Tab content -->
            <div class="tab-content">
                <!-- Basic Info Tab -->
                <div class="tab-pane active" id="basic-info">
                    <div class="section-header">
                        <h3>Personal Information</h3>
                        <p class="text-secondary">Update user's name and contact details</p>
                    </div>

                    <div class="form-grid">
                        <div class="form-group">
                            <label asp-for="FirstName" class="form-label">First Name <span class="required">*</span></label>
                            <div class="input-wrapper">
                                <i class="bi bi-person input-icon"></i>
                                <input asp-for="FirstName" class="form-control" placeholder="Enter first name" required />
                            </div>
                            <span asp-validation-for="FirstName" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="LastName" class="form-label">Last Name <span class="required">*</span></label>
                            <div class="input-wrapper">
                                <i class="bi bi-person input-icon"></i>
                                <input asp-for="LastName" class="form-control" placeholder="Enter last name" required />
                            </div>
                            <span asp-validation-for="LastName" class="text-danger"></span>
                        </div>

                        <div class="form-group form-group-full">
                            <label asp-for="Email" class="form-label">Email Address <span class="required">*</span></label>
                            <div class="input-wrapper">
                                <i class="bi bi-envelope input-icon"></i>
                                <input asp-for="Email" class="form-control" type="email" placeholder="email@example.com" required />
                            </div>
                            <span asp-validation-for="Email" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <!-- Permissions Tab -->
                <div class="tab-pane" id="permissions">
                    <div class="section-header">
                        <h3>Role & Department</h3>
                        <p class="text-secondary">Assign user role and department</p>
                    </div>

                    <div class="form-grid">
                        <div class="form-group">
                            <label asp-for="Department" class="form-label">Department <span class="required">*</span></label>
                            <div class="input-wrapper">
                                <i class="bi bi-building input-icon"></i>
                                <input asp-for="Department" class="form-control" readonly />
                                <small class="form-text text-muted">Department is set by LDAP and cannot be changed</small>
                            </div>
                            <span asp-validation-for="Department" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="Role" class="form-label">Role <span class="required">*</span></label>
                            <div class="input-wrapper">
                                <i class="bi bi-person-badge input-icon"></i>
                                <select asp-for="Role" class="form-select" id="roleSelect" required>
                                    <option value="">Select Role</option>
                                    <option value="Admin">Administrator</option>
                                    <option value="User">User</option>
                                </select>
                            </div>
                            <span asp-validation-for="Role" class="text-danger"></span>
                            <small class="form-text">Role determines the default permission set</small>
                        </div>
                    </div>
                </div>

                <!-- Account Tab -->
                <div class="tab-pane" id="account">
                    <div class="section-header">
                        <h3>Account Settings</h3>
                        <p class="text-secondary">Manage account status and password</p>
                    </div>

                    <div class="account-status-card">
                        <div class="status-toggle">
                            <div class="form-check form-switch">
                                <input asp-for="IsActive" class="form-check-input" id="accountActiveToggle" />
                                <label for="accountActiveToggle" class="form-check-label">Account Active</label>
                            </div>
                            <p class="status-description">
                                @(Model.IsActive ? "User can currently access the system" : "User account is currently disabled")
                            </p>
                        </div>
                    </div>

                    <div class="password-section">
                        <div class="section-header">
                            <h3>Password Management</h3>
                            <p class="text-secondary">Reset or change user password</p>
                        </div>

                        <div class="password-options">
                            <div class="password-option-item">
                                <div class="form-check">
                                    <input type="radio" id="resetPassword-no" name="ResetPasswordOption" value="no" 
                                           checked class="form-check-input" />
                                    <label for="resetPassword-no" class="form-check-label">
                                        <div class="option-title">No password reset</div>
                                        <p class="option-desc">Keep the current password unchanged</p>
                                    </label>
                                </div>
                            </div>

                            <div class="password-option-item">
                                <div class="form-check">
                                    <input type="radio" id="resetPassword-email" name="ResetPasswordOption" value="email" 
                                           class="form-check-input" />
                                    <label for="resetPassword-email" class="form-check-label">
                                        <div class="option-title">Send password reset email</div>
                                        <p class="option-desc">User will receive email instructions to reset their password</p>
                                    </label>
                                </div>
                            </div>

                            <div class="password-option-item">
                                <div class="form-check">
                                    <input type="radio" id="resetPassword-manual" name="ResetPasswordOption" value="manual" 
                                           class="form-check-input" />
                                    <label for="resetPassword-manual" class="form-check-label">
                                        <div class="option-title">Set password manually</div>
                                        <p class="option-desc">Directly enter a new password for this user</p>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div id="manualPasswordFields" class="password-fields">
                            <div class="form-group">
                                <label for="newPassword" class="form-label">New Password</label>
                                <div class="input-wrapper password-input">
                                    <i class="bi bi-key input-icon"></i>
                                    <input type="password" id="newPassword" name="NewPassword" class="form-control" />
                                    <button type="button" class="btn password-toggle" tabindex="-1">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <div class="password-strength">
                                    <div class="progress">
                                        <div class="progress-bar" id="passwordStrength" role="progressbar" style="width: 0%"></div>
                                    </div>
                                    <div class="strength-label">
                                        <span id="strengthLabel">Weak</span>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <div class="input-wrapper password-input">
                                    <i class="bi bi-key input-icon"></i>
                                    <input type="password" id="confirmPassword" name="ConfirmPassword" class="form-control" />
                                    <button type="button" class="btn password-toggle" tabindex="-1">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <div id="passwordMatch" class="password-match">
                                    <i class="bi bi-check-circle"></i> Passwords match
                                </div>
                                <div id="passwordMismatch" class="password-mismatch">
                                    <i class="bi bi-exclamation-circle"></i> Passwords do not match
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-actions">
                <a href="/Users" class="btn btn-outline-secondary">Cancel</a>
                <button type="submit" class="btn btn-primary">Save Changes</button>
            </div>
        </div>
    </form>

    <!-- Delete section -->
    <div class="delete-section">
        <div class="delete-section-header">
            <i class="bi bi-exclamation-triangle"></i>
            <h3>Delete User</h3>
        </div>
        <div class="delete-section-body">
            <p>This action <strong>cannot be undone</strong>. This will permanently delete the user account and all associated data.</p>
            
            <div class="delete-confirmation">
                <div class="delete-warning">
                    <i class="bi bi-info-circle"></i>
                    <span>To confirm, type <strong>DELETE</strong> in the field below</span>
                </div>
                
                <div class="delete-input-wrapper">
                    <input type="text" id="deleteConfirmInput" class="form-control" placeholder="Type DELETE to confirm">
                </div>
                
                <div class="delete-actions">
                    <button type="button" id="cancelDeleteBtn" class="btn btn-outline-secondary">Cancel</button>
                    <form asp-action="Delete" asp-route-id="@Model.Id" method="post" onsubmit="return validateDeleteForm()">
                        @Html.AntiForgeryToken()
                        <button type="submit" id="confirmDeleteBtn" class="btn btn-danger" disabled>
                            <i class="bi bi-trash"></i> Delete User
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        :root {
            --primary: #0d6efd;
            --primary-rgb: 13, 110, 253;
            --primary-dark: #0a58ca;
            --primary-light: #e6efff;
            --secondary: #6c757d;
            --secondary-rgb: 108, 117, 125;
            --success: #198754;
            --success-rgb: 25, 135, 84;
            --danger: #dc3545;
            --danger-rgb: 220, 53, 69;
            --warning: #ffc107;
            --warning-rgb: 255, 193, 7;
            --info: #0dcaf0;
            --info-rgb: 13, 202, 240;
            --light: #f8f9fa;
            --dark: #212529;
            --gray-100: #f8f9fa;
            --gray-200: #e9ecef;
            --gray-300: #dee2e6;
            --gray-400: #ced4da;
            --gray-500: #adb5bd;
            --gray-600: #6c757d;
            --gray-700: #495057;
            --gray-800: #343a40;
            --gray-900: #212529;
            --border-radius: 0.5rem;
            --border-radius-sm: 0.375rem;
            --border-radius-lg: 0.75rem;
            --transition: all 0.2s ease-in-out;
            --shadow-sm: 0 .125rem .25rem rgba(0, 0, 0, 0.075);
            --shadow: 0 .5rem 1rem rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 1rem 2rem rgba(0, 0, 0, 0.15);
            --admin-color: #dc3545;
            --manager-color: #0dcaf0;
            --user-color: #6c757d;
        }

        /* General styles */
        body {
            background-color: #f5f8fa;
            color: var(--gray-700);
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .user-edit-container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        /* Breadcrumb styling */
        .breadcrumb-wrapper {
            padding: 0.5rem 0 1rem;
        }

        .breadcrumb {
            padding: 0;
            margin: 0;
            background-color: transparent;
            font-size: 0.85rem;
        }

        .breadcrumb-item + .breadcrumb-item::before {
            content: "→";
            font-size: 0.8rem;
            color: var(--gray-500);
        }

        .breadcrumb-item a {
            color: var(--gray-600);
            text-decoration: none;
            transition: var(--transition);
        }

        .breadcrumb-item a:hover {
            color: var(--primary);
        }

        .breadcrumb-item.active {
            color: var(--gray-800);
            font-weight: 500;
        }

        /* Page header */
        .page-header {
            margin-bottom: 1.5rem;
        }

        .page-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--gray-900);
            margin: 0 0 0.25rem;
            line-height: 1.2;
            letter-spacing: -0.02em;
        }

        .text-secondary {
            color: var(--gray-600) !important;
            font-size: 0.95rem;
        }

        .required {
            color: var(--danger);
        }

        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.5rem 1.25rem;
            font-size: 0.95rem;
            font-weight: 500;
            border-radius: var(--border-radius-sm);
            transition: var(--transition);
            border: 1px solid transparent;
        }

        .btn i {
            font-size: 1rem;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
        }

        .btn-outline-secondary {
            background-color: transparent;
            color: var(--gray-700);
            border-color: var(--gray-300);
        }

        .btn-outline-secondary:hover {
            background-color: var(--gray-100);
            color: var(--gray-800);
        }

        .btn-danger {
            background-color: var(--danger);
            color: white;
            border-color: var(--danger);
        }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }

        .btn-link {
            background: transparent;
            border: none;
            color: var(--primary);
            padding: 0.25rem 0.5rem;
            font-weight: 500;
            text-decoration: none;
        }

        .btn-link:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }

        .btn-sm {
            padding: 0.25rem 0.75rem;
            font-size: 0.875rem;
        }

        /* Profile card */
        .profile-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-sm);
            margin-bottom: 1.5rem;
            transition: var(--transition);
            overflow: hidden;
        }

        .profile-card:hover {
            box-shadow: var(--shadow);
        }

        .profile-card-content {
            display: flex;
            padding: 1.5rem;
            gap: 1.5rem;
        }

        .profile-avatar {
            flex-shrink: 0;
        }

        .user-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 1.75rem;
            color: white;
            background-color: var(--primary);
            box-shadow: 0 0 0 4px rgba(var(--primary-rgb), 0.1);
        }

        .user-avatar.admin {
            background-color: var(--admin-color);
            box-shadow: 0 0 0 4px rgba(var(--danger-rgb), 0.1);
        }

        .user-avatar.manager {
            background-color: var(--manager-color);
            box-shadow: 0 0 0 4px rgba(var(--info-rgb), 0.1);
        }

        .profile-info {
            flex-grow: 1;
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--gray-900);
            margin: 0 0 0.75rem;
            line-height: 1.2;
        }

        .profile-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-bottom: 0.75rem;
        }

        .badge {
            display: inline-flex;
            align-items: center;
            padding: 0.35em 0.65em;
            font-size: 0.75rem;
            font-weight: 600;
            line-height: 1;
            border-radius: 50rem;
        }

        .role-badge {
            background-color: rgba(var(--primary-rgb), 0.1);
            color: var(--primary);
        }

        .dept-badge {
            background-color: rgba(var(--secondary-rgb), 0.1);
            color: var(--secondary);
        }

        .status-active {
            background-color: rgba(var(--success-rgb), 0.1);
            color: var(--success);
        }

        .status-inactive {
            background-color: rgba(var(--danger-rgb), 0.1);
            color: var(--danger);
        }

        .profile-meta {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            font-size: 0.85rem;
            color: var(--gray-600);
        }

        .meta-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .meta-item i {
            font-size: 0.95rem;
            color: var(--gray-500);
        }

        /* Tabs */
        .tab-container {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-sm);
            overflow: hidden;
            margin-bottom: 1.5rem;
        }

        .tab-navigation {
            display: flex;
            border-bottom: 1px solid var(--gray-200);
            overflow-x: auto;
            scrollbar-width: none; /* Firefox */
        }

        .tab-navigation::-webkit-scrollbar {
            display: none; /* Chrome, Safari, Edge */
        }

        .tab-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 1rem 1.5rem;
            font-weight: 500;
            color: var(--gray-600);
            border: none;
            background: transparent;
            border-bottom: 3px solid transparent;
            white-space: nowrap;
            transition: var(--transition);
            cursor: pointer;
        }

        .tab-btn:hover {
            color: var(--primary);
            background-color: rgba(var(--primary-rgb), 0.02);
        }

        .tab-btn.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
        }

        .tab-btn i {
            font-size: 1.1rem;
        }

        .tab-content {
            padding: 2rem;
        }

        .tab-pane {
            display: none;
        }

        .tab-pane.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Section styling */
        .section-header {
            margin-bottom: 1.5rem;
        }

        .section-header h3 {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--gray-800);
            margin: 0 0 0.25rem;
        }

        /* Form styling */
        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.25rem;
            margin-bottom: 2rem;
        }

        .form-group {
            margin-bottom: 0;
        }

        .form-group-full {
            grid-column: 1 / -1;
        }

        .form-label {
            display: block;
            font-size: 0.95rem;
            font-weight: 500;
            color: var(--gray-700);
            margin-bottom: 0.5rem;
        }

        .input-wrapper {
            position: relative;
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray-500);
            font-size: 1rem;
        }

        .form-control, .form-select {
            width: 100%;
            padding: 0.625rem 1rem 0.625rem 2.5rem;
            border: 1px solid var(--gray-300);
            border-radius: var(--border-radius-sm);
            font-size: 0.95rem;
            color: var(--gray-700);
            background-color: white;
            transition: var(--transition);
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.1);
            outline: none;
        }

        .form-control::placeholder {
            color: var(--gray-500);
        }

        .form-text {
            font-size: 0.85rem;
            color: var(--gray-600);
            margin-top: 0.375rem;
        }

        /* Form check styling */
        .form-check {
            display: flex;
            align-items: flex-start;
        }

        .form-check-input {
            margin-top: 0.25rem;
            flex-shrink: 0;
            cursor: pointer;
        }

        .form-check-label {
            margin-left: 0.5rem;
            cursor: pointer;
        }

        /* Account status card */
        .account-status-card {
            background-color: rgba(var(--primary-rgb), 0.03);
            border-radius: var(--border-radius-sm);
            padding: 1.25rem;
            margin-bottom: 2rem;
        }

        .status-toggle {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-switch {
            padding-left: 2.5rem;
            display: flex;
            align-items: center;
        }

        .form-switch .form-check-input {
            height: 1.5rem;
            width: 3rem;
            border-radius: 2rem;
            margin-left: -2.5rem;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e");
            background-color: var(--gray-400);
            border: none;
            transition: background-position 0.15s ease-in-out;
        }

        .form-switch .form-check-input:checked {
            background-color: var(--success);
            background-position: right center;
        }

        .form-switch .form-check-label {
            font-weight: 500;
            color: var(--gray-800);
        }

        .status-description {
            font-size: 0.9rem;
            color: var(--gray-600);
            margin: 0;
        }

        /* Password section */
        .password-options {
            margin-bottom: 2rem;
        }

        .password-option-item {
            margin-bottom: 1rem;
            padding: 1rem;
            border: 1px solid var(--gray-200);
            border-radius: var(--border-radius-sm);
            transition: var(--transition);
        }

        .password-option-item:hover {
            border-color: rgba(var(--primary-rgb), 0.3);
            background-color: rgba(var(--primary-rgb), 0.02);
        }

        .option-title {
            font-weight: 500;
            color: var(--gray-800);
            margin-bottom: 0.25rem;
        }

        .option-desc {
            font-size: 0.85rem;
            color: var(--gray-600);
            margin: 0;
        }

        .password-fields {
            display: none;
            animation: fadeIn 0.3s;
            padding: 1.5rem;
            background-color: var(--gray-100);
            border-radius: var(--border-radius-sm);
            margin-bottom: 1.5rem;
        }

        .password-input {
            display: flex;
        }

        .password-input .form-control {
            border-right: none;
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }

        .password-toggle {
            background-color: white;
            border: 1px solid var(--gray-300);
            border-left: none;
            border-top-right-radius: var(--border-radius-sm);
            border-bottom-right-radius: var(--border-radius-sm);
            color: var(--gray-600);
            padding: 0 0.75rem;
            font-size: 1rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .password-toggle:hover {
            color: var(--gray-800);
        }

        .password-strength {
            margin-top: 0.75rem;
        }

        .progress {
            height: 5px;
            background-color: var(--gray-200);
            border-radius: 50rem;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background-color: var(--danger);
            transition: var(--transition);
        }

        .strength-label {
            display: flex;
            justify-content: flex-end;
            font-size: 0.75rem;
            color: var(--gray-600);
            margin-top: 0.25rem;
        }

        .password-match, .password-mismatch {
            display: none;
            font-size: 0.85rem;
            margin-top: 0.5rem;
            align-items: center;
            gap: 0.25rem;
        }

        .password-match {
            color: var(--success);
        }

        .password-mismatch {
            color: var(--danger);
        }

        /* Form actions */
        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            padding: 1.5rem;
            background-color: var(--gray-100);
            border-top: 1px solid var(--gray-200);
        }

        /* Delete section */
        .delete-section {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-sm);
            overflow: hidden;
            margin-bottom: 2rem;
            border: 1px solid rgba(var(--danger-rgb), 0.2);
        }

        .delete-section-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 1.25rem;
            background-color: rgba(var(--danger-rgb), 0.05);
            border-bottom: 1px solid rgba(var(--danger-rgb), 0.1);
        }

        .delete-section-header i {
            font-size: 1.25rem;
            color: var(--danger);
        }

        .delete-section-header h3 {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--danger);
            margin: 0;
        }

        .delete-section-body {
            padding: 1.5rem;
        }

        .delete-confirmation {
            margin-top: 1.5rem;
        }

        .delete-warning {
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
            padding: 1rem;
            background-color: rgba(var(--warning-rgb), 0.1);
            border-radius: var(--border-radius-sm);
            margin-bottom: 1.5rem;
        }

        .delete-warning i {
            color: var(--warning);
            font-size: 1.25rem;
        }

        .delete-input-wrapper {
            max-width: 300px;
            margin-bottom: 1.5rem;
        }

        .delete-actions {
            display: flex;
            gap: 1rem;
        }

        /* Responsive adjustments */
        @@media (max-width: 992px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
        }

        @@media (max-width: 768px) {
            .profile-card-content {
                flex-direction: column;
                align-items: center;
                text-align: center;
            }
            
            .profile-badges {
                justify-content: center;
            }
            
            .profile-meta {
                margin-top: 1rem;
                align-items: center;
            }
            
            .tab-navigation {
                flex-wrap: nowrap;
                overflow-x: auto;
            }
            
            .tab-btn {
                padding: 0.75rem 1rem;
            }
            
            .tab-content {
                padding: 1.5rem;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .form-actions .btn {
                width: 100%;
            }
            
            .delete-actions {
                flex-direction: column;
            }
            
            .delete-actions .btn, .delete-actions form {
                width: 100%;
            }
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab navigation
            const tabBtns = document.querySelectorAll('.tab-btn');
            const tabPanes = document.querySelectorAll('.tab-pane');
            
            tabBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    // Remove active class from all tabs
                    tabBtns.forEach(b => b.classList.remove('active'));
                    tabPanes.forEach(p => p.classList.remove('active'));
                    
                    // Add active class to clicked tab
                    btn.classList.add('active');
                    
                    // Show corresponding tab content
                    const tabId = btn.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                });
            });
            
            // Account status toggle
            const accountActiveToggle = document.getElementById('accountActiveToggle');
            if (accountActiveToggle) {
                accountActiveToggle.addEventListener('change', function() {
                    const statusDesc = document.querySelector('.status-description');
                    if (statusDesc) {
                        statusDesc.textContent = this.checked ? 
                            "User can currently access the system" : 
                            "User account is currently disabled";
                    }
                });
            }
            
            // Password reset options
            const resetOptions = document.querySelectorAll('input[name="ResetPasswordOption"]');
            const manualPasswordFields = document.getElementById('manualPasswordFields');
            
            resetOptions.forEach(option => {
                option.addEventListener('change', function() {
                    if (this.value === 'manual') {
                        manualPasswordFields.style.display = 'block';
                    } else {
                        manualPasswordFields.style.display = 'none';
                    }
                });
            });
            
            // Password toggle visibility
            const passwordToggles = document.querySelectorAll('.password-toggle');
            passwordToggles.forEach(toggle => {
                toggle.addEventListener('click', function() {
                    const input = this.closest('.password-input').querySelector('input');
                    const icon = this.querySelector('i');
                    
                    const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                    input.setAttribute('type', type);
                    
                    icon.classList.toggle('bi-eye');
                    icon.classList.toggle('bi-eye-slash');
                });
            });
            
            // Password strength and match validation
            const newPassword = document.getElementById('newPassword');
            const confirmPassword = document.getElementById('confirmPassword');
            const passwordStrength = document.getElementById('passwordStrength');
            const strengthLabel = document.getElementById('strengthLabel');
            const passwordMatch = document.getElementById('passwordMatch');
            const passwordMismatch = document.getElementById('passwordMismatch');
            
            if (newPassword) {
                newPassword.addEventListener('input', function() {
                    updatePasswordStrength(this.value);
                    checkPasswordMatch();
                });
            }
            
            if (confirmPassword) {
                confirmPassword.addEventListener('input', checkPasswordMatch);
            }
            
            function updatePasswordStrength(password) {
                if (!password) {
                    passwordStrength.style.width = '0%';
                    passwordStrength.style.backgroundColor = 'var(--danger)';
                    strengthLabel.textContent = 'Weak';
                    return;
                }
                
                // Calculate strength (simplified)
                let strength = 0;
                if (password.length > 6) strength += 1;
                if (password.length > 10) strength += 1;
                if (/[A-Z]/.test(password)) strength += 1;
                if (/[0-9]/.test(password)) strength += 1;
                if (/[^A-Za-z0-9]/.test(password)) strength += 1;
                
                // Map to 0-4 scale
                const percentage = (strength / 4) * 100;
                const labels = ['Weak', 'Fair', 'Good', 'Strong', 'Very Strong'];
                const colors = [
                    'var(--danger)', 
                    'var(--warning)', 
                    'var(--info)', 
                    'var(--primary)', 
                    'var(--success)'
                ];
                
                passwordStrength.style.width = `${percentage}%`;
                passwordStrength.style.backgroundColor = colors[strength];
                strengthLabel.textContent = labels[strength];
            }
            
            function checkPasswordMatch() {
                const pwd = newPassword.value;
                const confirm = confirmPassword.value;
                
                if (!pwd || !confirm) {
                    passwordMatch.style.display = 'none';
                    passwordMismatch.style.display = 'none';
                    return;
                }
                
                if (pwd === confirm) {
                    passwordMatch.style.display = 'flex';
                    passwordMismatch.style.display = 'none';
                } else {
                    passwordMatch.style.display = 'none';
                    passwordMismatch.style.display = 'flex';
                }
            }
            
            // Delete confirmation
            const deleteConfirmInput = document.getElementById('deleteConfirmInput');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
            
            if (deleteConfirmInput && confirmDeleteBtn) {
                deleteConfirmInput.addEventListener('input', function() {
                    confirmDeleteBtn.disabled = this.value !== 'DELETE';
                    
                    if (this.value === 'DELETE') {
                        confirmDeleteBtn.classList.add('btn-danger-pulse');
                    } else {
                        confirmDeleteBtn.classList.remove('btn-danger-pulse');
                    }
                });
            }
            
            if (cancelDeleteBtn) {
                cancelDeleteBtn.addEventListener('click', function() {
                    deleteConfirmInput.value = '';
                    confirmDeleteBtn.disabled = true;
                });
            }
            
            // Form validation function
            window.validateDeleteForm = function() {
                return deleteConfirmInput.value === 'DELETE';
            };
        });
    </script>
}