@model IEnumerable<AIHelpdeskSupport.ViewModels.UserViewModel>
@{
    ViewData["Title"] = "User Management";
}

<div class="page-header">
    <div>
        <h1 class="page-title">User Management</h1>
        <p class="text-secondary">Manage system users and their permissions</p>
    </div>
</div>

<div class="search-filter-container">
    <div class="search-wrapper">
        <i class="bi bi-search search-icon"></i>
        <input type="text" id="userSearch" class="search-input" placeholder="Search users..." aria-label="Search users">
    </div>
    <div class="filter-wrapper">
        <button class="btn btn-filter" id="filterBtn">
            Filter
        </button>
        <div class="view-switcher">
            <button class="btn-icon view-option active" id="gridView" title="Grid View" aria-pressed="true">
                <i class="bi bi-grid-3x3-gap-fill"></i>
            </button>
            <button class="btn-icon view-option" id="listView" title="List View" aria-pressed="false">
                <i class="bi bi-list-ul"></i>
            </button>
        </div>
    </div>
</div>

<div class="users-grid" id="usersGridView">
    @foreach (var user in Model)
    {
        <div class="user-card" data-user-id="@user.Id" 
             data-status="@(user.IsActive ? "active" : "inactive")" 
             data-role="@user.Role.ToLower().Replace(" ", "-")">
            <div class="user-card-inner">
                <div class="status-indicator @(user.IsActive ? "active" : "inactive")"></div>
                <div class="menu-dropdown">
                    <button class="btn-menu" id="menuBtn-@user.Id" onclick="toggleDropdown('@user.Id')">
                        <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <div class="dropdown-menu" id="dropdown-@user.Id">
                        <a href="/Users/Edit/@user.Id" class="dropdown-item">
                            <i class="bi bi-pencil-fill"></i> Edit
                        </a>
                        <a href="/Users/Details/@user.Id" class="dropdown-item">
                            <i class="bi bi-info-circle-fill"></i> View Details
                        </a>
                        <button class="dropdown-item reset-password-btn" data-user-id="@user.Id">
                            <i class="bi bi-key-fill"></i> Reset Password
                        </button>
                        <div class="dropdown-divider"></div>
                        <form action="/Users/ToggleStatus/@user.Id" method="post" class="toggle-status-form">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="dropdown-item @(user.IsActive ? "text-warning" : "text-success")">
                                <i class="bi @(user.IsActive ? "bi-pause-circle-fill" : "bi-play-circle-fill")"></i>
                                @(user.IsActive ? "Deactivate" : "Activate")
                            </button>
                        </form>
                    </div>
                </div>
                
                <div class="user-avatar-container">
                    <div class="user-avatar @GetRoleBadgeClass(user.Role)">
                        @(string.IsNullOrEmpty(user.FirstName) || string.IsNullOrEmpty(user.LastName) ? "U" : $"{user.FirstName[0]}{user.LastName[0]}")
                    </div>
                </div>
                
                <div class="user-info">
                    <h3 class="user-name">@user.FullName</h3>
                    <p class="user-email">@user.Email</p>
                    
                    <div class="user-badges">
                        <span class="badge role-badge">@user.Role</span>
                        <span class="badge dept-badge">@(string.IsNullOrEmpty(user.Department) ? "No Department" : user.Department)</span>
                    </div>
                    
                    <div class="user-meta">
                        <div class="meta-item">
                            <i class="bi bi-calendar3"></i>
                            <span>@user.CreatedAt.ToString("MMM d, yyyy")</span>
                        </div>
                        <div class="meta-item">
                            <i class="bi bi-clock-history"></i>
                            <span>
                                @if (user.LastLogin.HasValue)
                                {
                                    <span title="@user.LastLogin.Value.ToString("MMM d, yyyy HH:mm")">@GetTimeAgo(user.LastLogin.Value)</span>
                                }
                                else
                                {
                                    <span>Never</span>
                                }
                            </span>
                        </div>
                    </div>
                </div>
                
                <div class="user-card-footer">
                    <a href="/Users/Edit/@user.Id" class="btn btn-primary btn-edit">
                        <i class="bi bi-pencil-fill"></i>
                        <span>Edit</span>
                    </a>
                </div>
            </div>
        </div>
    }
</div>

<!-- List View (Hidden by default) -->
<div class="users-list" id="usersListView" style="display: none;">
    <table class="table align-middle">
        <thead>
            <tr>
                <th>User</th>
                <th>Department</th>
                <th>Role</th>
                <th>Created</th>
                <th>Last Login</th>
                <th>Status</th>
                <th class="text-end">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model)
            {
                <tr data-user-id="@user.Id" data-status="@(user.IsActive ? "active" : "inactive")" 
                    data-role="@user.Role.ToLower().Replace(" ", "-")">
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="status-dot @(user.IsActive ? "active" : "inactive")"></div>
                            <div class="list-avatar @GetRoleBadgeClass(user.Role)">
                                @(string.IsNullOrEmpty(user.FirstName) || string.IsNullOrEmpty(user.LastName) ? "U" : $"{user.FirstName[0]}{user.LastName[0]}")
                            </div>
                            <div class="list-user-info">
                                <div class="list-user-name">@user.FullName</div>
                                <div class="list-user-email">@user.Email</div>
                            </div>
                        </div>
                    </td>
                    <td>@(string.IsNullOrEmpty(user.Department) ? "Not Assigned" : user.Department)</td>
                    <td><span class="badge role-badge">@user.Role</span></td>
                    <td>@user.CreatedAt.ToString("MMM d, yyyy")</td>
                    <td>
                        @if (user.LastLogin.HasValue)
                        {
                            <span title="@user.LastLogin.Value.ToString("MMM d, yyyy HH:mm")">@GetTimeAgo(user.LastLogin.Value)</span>
                        }
                        else
                        {
                            <span>Never</span>
                        }
                    </td>
                    <td>
                        <span class="status-pill @(user.IsActive ? "active" : "inactive")">
                            @(user.IsActive ? "Active" : "Inactive")
                        </span>
                    </td>
                    <td class="text-end">
                        <div class="list-actions">
                            <a href="/Users/Edit/@user.Id" class="btn-icon" title="Edit">
                                <i class="bi bi-pencil-fill"></i>
                            </a>
                            <div class="dropdown d-inline-block">
                                <button class="btn-icon dropdown-btn" onclick="toggleDropdown('list-@user.Id')">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <div class="dropdown-menu" id="dropdown-list-@user.Id">
                                    <a href="/Users/Details/@user.Id" class="dropdown-item">
                                        <i class="bi bi-info-circle-fill"></i> View Details
                                    </a>
                                    <button class="dropdown-item reset-password-btn" data-user-id="@user.Id">
                                        <i class="bi bi-key-fill"></i> Reset Password
                                    </button>
                                    <div class="dropdown-divider"></div>
                                    <form action="/Users/ToggleStatus/@user.Id" method="post" class="toggle-status-form">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="dropdown-item @(user.IsActive ? "text-warning" : "text-success")">
                                            <i class="bi @(user.IsActive ? "bi-pause-circle-fill" : "bi-play-circle-fill")"></i>
                                            @(user.IsActive ? "Deactivate" : "Activate")
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Empty State (Shows when no users match search/filter) -->
<div id="emptyState" class="empty-state" style="display: none;">
    <div class="empty-state-content">
        <div class="empty-state-icon">
            <i class="bi bi-people"></i>
        </div>
        <h3 class="empty-state-title">No users found</h3>
        <p class="empty-state-message">No users match your current search or filter criteria.</p>
        <button class="btn btn-primary" id="resetFiltersBtn">
            <i class="bi bi-arrow-counterclockwise"></i>
            <span>Reset Filters</span>
        </button>
    </div>
</div>

<!-- Filter dropdown menu -->
<div class="filter-dropdown" id="filterDropdown">
    <div class="filter-header">
        <h3>Filter Users</h3>
        <button class="btn-close" id="closeFilterBtn">
            <i class="bi bi-x"></i>
        </button>
    </div>
    <div class="filter-options">
        <div class="filter-group">
            <h4>Status</h4>
            <div class="filter-option">
                <input type="radio" id="statusAll" name="status" value="all" checked>
                <label for="statusAll">All</label>
            </div>
            <div class="filter-option">
                <input type="radio" id="statusActive" name="status" value="active">
                <label for="statusActive">Active</label>
            </div>
            <div class="filter-option">
                <input type="radio" id="statusInactive" name="status" value="inactive">
                <label for="statusInactive">Inactive</label>
            </div>
        </div>
        <div class="filter-group">
            <h4>Role</h4>
            <div class="filter-option">
                <input type="radio" id="roleAll" name="role" value="all" checked>
                <label for="roleAll">All Roles</label>
            </div>
            <div class="filter-option">
                <input type="radio" id="roleAdmin" name="role" value="admin">
                <label for="roleAdmin">Admin</label>
            </div>
            <div class="filter-option">
                <input type="radio" id="roleManager" name="role" value="manager">
                <label for="roleManager">Manager</label>
            </div>
            <div class="filter-option">
                <input type="radio" id="roleUser" name="role" value="user">
                <label for="roleUser">User</label>
            </div>
        </div>
    </div>
    <div class="filter-actions">
        <button class="btn btn-light" id="resetFilterBtn">Reset</button>
        <button class="btn btn-primary" id="applyFilterBtn">Apply Filter</button>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Elements
            const gridView = document.getElementById('gridView');
            const listView = document.getElementById('listView');
            const usersGridView = document.getElementById('usersGridView');
            const usersListView = document.getElementById('usersListView');
            const emptyState = document.getElementById('emptyState');
            const userSearch = document.getElementById('userSearch');
            const resetFiltersBtn = document.getElementById('resetFiltersBtn');
            const filterBtn = document.getElementById('filterBtn');
            const filterDropdown = document.getElementById('filterDropdown');
            const closeFilterBtn = document.getElementById('closeFilterBtn');
            const applyFilterBtn = document.getElementById('applyFilterBtn');
            const resetFilterBtn = document.getElementById('resetFilterBtn');
            const resetPasswordBtns = document.querySelectorAll('.reset-password-btn');
            
            // Store active filters
            let activeStatusFilter = 'all';
            let activeRoleFilter = 'all';

            // Click outside to close dropdown menus
            document.addEventListener('click', function(e) {
                // Close all menu dropdowns when clicking outside
                const dropdowns = document.querySelectorAll('.dropdown-menu');
                dropdowns.forEach(dropdown => {
                    if (!dropdown.contains(e.target) && 
                        !e.target.classList.contains('btn-menu') && 
                        !e.target.classList.contains('dropdown-btn')) {
                        dropdown.classList.remove('show');
                    }
                });
                
                // Close filter dropdown when clicking outside
                if (filterDropdown && !filterDropdown.contains(e.target) && e.target !== filterBtn) {
                    filterDropdown.classList.remove('show');
                }
            });

            // Toggle dropdown menu
            window.toggleDropdown = function(userId) {
                const dropdown = document.getElementById(`dropdown-${userId}`);
                if (!dropdown) return;
                
                // Close all other dropdowns first
                document.querySelectorAll('.dropdown-menu').forEach(menu => {
                    if (menu !== dropdown) {
                        menu.classList.remove('show');
                    }
                });
                
                // Toggle current dropdown
                dropdown.classList.toggle('show');
                
                // Prevent event from bubbling up
                event.stopPropagation();
            };

            // View toggle functionality
            function setActiveView(view) {
                if (view === 'list') {
                    listView.classList.add('active');
                    listView.setAttribute('aria-pressed', 'true');
                    gridView.classList.remove('active');
                    gridView.setAttribute('aria-pressed', 'false');
                    usersListView.style.display = 'block';
                    usersGridView.style.display = 'none';
                } else {
                    gridView.classList.add('active');
                    gridView.setAttribute('aria-pressed', 'true');
                    listView.classList.remove('active');
                    listView.setAttribute('aria-pressed', 'false');
                    usersGridView.style.display = 'grid';
                    usersListView.style.display = 'none';
                }
                updateEmptyState();
            }

            if (gridView && listView) {
                gridView.addEventListener('click', function() {
                    setActiveView('grid');
                    localStorage.setItem('userViewPreference', 'grid');
                });

                listView.addEventListener('click', function() {
                    setActiveView('list');
                    localStorage.setItem('userViewPreference', 'list');
                });
            }

            // Load user preference for view
            const viewPreference = localStorage.getItem('userViewPreference');
            if (viewPreference === 'list') {
                setActiveView('list');
            } else {
                setActiveView('grid');
            }

            // Filter and search functionality
            function filterUsers() {
                if (!userSearch) return;
                
                const searchTerm = userSearch.value.toLowerCase();
                let visibleCount = 0;

                // Process grid items
                document.querySelectorAll('#usersGridView .user-card').forEach(card => {
                    if (userMatchesFilters(card, searchTerm)) {
                        card.style.display = 'block';
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                });

                // Process list items
                document.querySelectorAll('#usersListView tbody tr').forEach(row => {
                    if (userMatchesFilters(row, searchTerm)) {
                        row.style.display = '';
                        visibleCount++;
                    } else {
                        row.style.display = 'none';
                    }
                });

                // Update empty state visibility
                updateEmptyState(visibleCount === 0);
            }

            function userMatchesFilters(element, searchTerm) {
                if (!element || !element.dataset) return false;
                
                // Status filter
                if (activeStatusFilter === 'active' && element.dataset.status !== 'active') return false;
                if (activeStatusFilter === 'inactive' && element.dataset.status !== 'inactive') return false;

                // Role filter
                if (activeRoleFilter === 'admin' && !element.dataset.role.includes('admin')) return false;
                if (activeRoleFilter === 'manager' && !element.dataset.role.includes('manager')) return false;
                if (activeRoleFilter === 'user' && !element.dataset.role.includes('user')) return false;

                // Search term
                if (searchTerm) {
                    return element.textContent.toLowerCase().includes(searchTerm);
                }

                return true;
            }

            function updateEmptyState(isEmpty = false) {
                if (!emptyState) return;
                
                if (isEmpty) {
                    emptyState.style.display = 'flex';
                    if (usersGridView) usersGridView.classList.add('empty-results');
                    if (usersListView) usersListView.classList.add('empty-results');
                } else {
                    emptyState.style.display = 'none';
                    if (usersGridView) usersGridView.classList.remove('empty-results');
                    if (usersListView) usersListView.classList.remove('empty-results');
                }
            }

            // Search input event
            if (userSearch) {
                userSearch.addEventListener('input', filterUsers);
            }

            // Filter button
            if (filterBtn) {
                filterBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    filterDropdown.classList.toggle('show');
                });
            }

            // Close filter button
            if (closeFilterBtn) {
                closeFilterBtn.addEventListener('click', function() {
                    filterDropdown.classList.remove('show');
                });
            }

            // Apply filter button
            if (applyFilterBtn) {
                applyFilterBtn.addEventListener('click', function() {
                    // Get selected status
                    const statusRadios = document.querySelectorAll('input[name="status"]');
                    for (const radio of statusRadios) {
                        if (radio.checked) {
                            activeStatusFilter = radio.value;
                            break;
                        }
                    }
                    
                    // Get selected role
                    const roleRadios = document.querySelectorAll('input[name="role"]');
                    for (const radio of roleRadios) {
                        if (radio.checked) {
                            activeRoleFilter = radio.value;
                            break;
                        }
                    }
                    
                    // Update filter button text
                    if (activeStatusFilter !== 'all' || activeRoleFilter !== 'all') {
                        filterBtn.classList.add('active');
                        filterBtn.innerText = 'Filtered';
                    } else {
                        filterBtn.classList.remove('active');
                        filterBtn.innerText = 'Filter';
                    }
                    
                    // Apply filters
                    filterUsers();
                    
                    // Close dropdown
                    filterDropdown.classList.remove('show');
                });
            }

            // Reset filter button (in filter dropdown)
            if (resetFilterBtn) {
                resetFilterBtn.addEventListener('click', function() {
                    resetAllFilters();
                });
            }

            // Reset filters button (in empty state)
            if (resetFiltersBtn) {
                resetFiltersBtn.addEventListener('click', function() {
                    resetAllFilters();
                });
            }

            function resetAllFilters() {
                // Reset status radios
                document.getElementById('statusAll').checked = true;
                activeStatusFilter = 'all';
                
                // Reset role radios
                document.getElementById('roleAll').checked = true;
                activeRoleFilter = 'all';
                
                // Reset search
                if (userSearch) {
                    userSearch.value = '';
                }
                
                // Reset filter button
                filterBtn.classList.remove('active');
                filterBtn.innerText = 'Filter';
                
                // Apply filters
                filterUsers();
                
                // Close dropdown
                filterDropdown.classList.remove('show');
            }

            // Reset password functionality
            if (resetPasswordBtns && resetPasswordBtns.length > 0) {
                resetPasswordBtns.forEach(btn => {
                    btn.addEventListener('click', function() {
                        const userId = this.dataset.userId;
                        resetPassword(userId);
                    });
                });
            }

            function resetPassword(userId) {
                // Get the token
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenElement) {
                    showToast('error', 'Anti-forgery token not found');
                    return;
                }
                
                const token = tokenElement.value;
                
                // Show loading state
                const btn = document.querySelector(`.reset-password-btn[data-user-id="${userId}"]`);
                if (btn) {
                    const originalText = btn.innerHTML;
                    btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Resetting...';
                    btn.disabled = true;
                }
                
                // Send request
                fetch(`/Users/ResetPassword/${userId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.message || 'Error resetting password');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    showToast('success', 'Password reset email has been sent!');
                    
                    // Reset button
                    if (btn) {
                        btn.innerHTML = '<i class="bi bi-check-circle-fill"></i> Reset Password';
                        setTimeout(() => {
                            btn.innerHTML = '<i class="bi bi-key-fill"></i> Reset Password';
                            btn.disabled = false;
                        }, 2000);
                    }
                })
                .catch(error => {
                    showToast('error', error.message || 'Failed to reset password');
                    
                    // Reset button
                    if (btn) {
                        btn.innerHTML = '<i class="bi bi-x-circle-fill"></i> Failed';
                        setTimeout(() => {
                            btn.innerHTML = '<i class="bi bi-key-fill"></i> Reset Password';
                            btn.disabled = false;
                        }, 2000);
                    }
                });
            }

            // Toast notification
            function showToast(type, message) {
                // Create toast container if it doesn't exist
                let toastContainer = document.querySelector('.toast-container');
                if (!toastContainer) {
                    toastContainer = document.createElement('div');
                    toastContainer.className = 'toast-container';
                    document.body.appendChild(toastContainer);
                }
                
                // Create toast
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                
                // Toast content
                toast.innerHTML = `
                    <div class="toast-icon">
                        <i class="bi ${type === 'success' ? 'bi-check-circle-fill' : 'bi-exclamation-circle-fill'}"></i>
                    </div>
                    <div class="toast-content">
                        <div class="toast-title">${type === 'success' ? 'Success' : 'Error'}</div>
                        <div class="toast-message">${message}</div>
                    </div>
                    <button class="toast-close" onclick="this.parentElement.remove()">
                        <i class="bi bi-x"></i>
                    </button>
                `;
                
                // Add to container
                toastContainer.appendChild(toast);
                
                // Auto-remove after 5 seconds
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.classList.add('hiding');
                        setTimeout(() => {
                            if (toast.parentNode) {
                                toast.parentNode.removeChild(toast);
                            }
                        }, 300);
                    }
                }, 5000);
            }

            // Run initial filter
            filterUsers();
        });
    </script>
}

@section Styles {
    <style>
        :root {
            --primary: #0d6efd;
            --primary-dark: #0a58ca;
            --primary-light: #e7f0ff;
            --secondary: #6c757d;
            --success: #198754;
            --danger: #dc3545;
            --warning: #ffc107;
            --info: #0dcaf0;
            --light: #f8f9fa;
            --dark: #212529;
            --gray-100: #f8f9fa;
            --gray-200: #e9ecef;
            --gray-300: #dee2e6;
            --gray-400: #ced4da;
            --gray-500: #adb5bd;
            --gray-600: #6c757d;
            --gray-700: #495057;
            --gray-800: #343a40;
            --gray-900: #212529;
        }

        /* Global styles */
        body {
            background-color: #f5f7fa;
            color: var(--gray-700);
        }

        /* Page header */
        .page-header {
            margin-bottom: 1.5rem;
        }

        .page-title {
            font-size: 1.75rem;
            font-weight: 600;
            color: var(--gray-800);
            margin: 0 0 0.25rem;
        }

        .text-secondary {
            color: var(--gray-600) !important;
            font-size: 0.95rem;
        }

        /* Search and Filter Container */
        .search-filter-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #fff;
            border-radius: 8px;
            padding: 0.75rem 1rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .search-wrapper {
            position: relative;
            flex: 1;
            max-width: 300px;
        }

        .search-input {
            width: 100%;
            padding: 0.5rem 0.5rem 0.5rem 2rem;
            border: none;
            border-radius: 4px;
            background-color: var(--gray-100);
            font-size: 0.875rem;
        }

        .search-input:focus {
            outline: none;
            background-color: #fff;
            box-shadow: 0 0 0 2px var(--primary-light);
        }

        .search-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray-500);
            font-size: 0.875rem;
        }

        .filter-wrapper {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .btn-filter {
            background-color: #fff;
            border: 1px solid var(--gray-300);
            border-radius: 4px;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            color: var(--gray-700);
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-filter:hover {
            border-color: var(--primary);
            color: var(--primary);
        }

        .btn-filter.active {
            background-color: var(--primary-light);
            color: var(--primary);
            border-color: var(--primary);
        }

        .view-switcher {
            display: flex;
            border: 1px solid var(--gray-300);
            border-radius: 4px;
            overflow: hidden;
        }

        .btn-icon {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 36px;
            height: 36px;
            background: #fff;
            border: none;
            color: var(--gray-600);
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-icon:hover {
            background-color: var(--gray-100);
            color: var(--gray-800);
        }

        .btn-icon.active {
            background-color: var(--primary-light);
            color: var(--primary);
        }

        /* User Grid */
        .users-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.25rem;
        }

        .user-card {
            background-color: transparent;
        }

        .user-card-inner {
            background-color: #fff;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            transition: all 0.2s;
            position: relative;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .user-card-inner:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            position: absolute;
            top: 1rem;
            left: 1rem;
        }

        .status-indicator.active {
            background-color: var(--success);
            box-shadow: 0 0 0 2px rgba(25, 135, 84, 0.2);
        }

        .status-indicator.inactive {
            background-color: var(--secondary);
            box-shadow: 0 0 0 2px rgba(108, 117, 125, 0.2);
        }

        .menu-dropdown {
            position: absolute;
            top: 1rem;
            right: 1rem;
        }

        .btn-menu {
            background: transparent;
            border: none;
            width: 32px;
            height: 32px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray-600);
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-menu:hover {
            background-color: var(--gray-100);
            color: var(--gray-800);
        }

        .dropdown-menu {
            position: absolute;
            top: 100%;
            right: 0;
            z-index: 1000;
            display: none;
            min-width: 180px;
            padding: 0.5rem 0;
            margin: 0.125rem 0 0;
            background-color: #fff;
            border-radius: 4px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.2s;
        }

        .dropdown-menu.show {
            display: block;
        }

        .dropdown-item {
            display: flex;
            align-items: center;
            padding: 0.625rem 1rem;
            color: var(--gray-700);
            text-decoration: none;
            background-color: transparent;
            border: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
            font-size: 0.875rem;
            transition: all 0.2s;
        }

        .dropdown-item i {
            margin-right: 0.5rem;
            font-size: 0.875rem;
        }

        .dropdown-item:hover {
            background-color: var(--gray-100);
            color: var(--gray-900);
        }

        .dropdown-divider {
            height: 0;
            margin: 0.5rem 0;
            overflow: hidden;
            border-top: 1px solid var(--gray-200);
        }

        .user-avatar-container {
            display: flex;
            justify-content: center;
            padding: 2rem 1rem 1rem;
        }

        .user-avatar {
            width: 64px;
            height: 64px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 1.5rem;
            color: white;
            background-color: var(--primary);
        }

        .user-avatar.admin {
            background-color: var(--danger);
        }

        .user-avatar.manager {
            background-color: var(--info);
        }

        .user-info {
            padding: 0 1.5rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            flex-grow: 1;
        }

        .user-name {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--gray-800);
            margin: 0 0 0.25rem;
        }

        .user-email {
            font-size: 0.875rem;
            color: var(--gray-600);
            margin-bottom: 1rem;
        }

        .user-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            justify-content: center;
            margin-bottom: 1rem;
        }

        .badge {
            padding: 0.35em 0.65em;
            font-size: 0.75rem;
            font-weight: 600;
            border-radius: 4px;
            display: inline-block;
        }

        .role-badge {
            background-color: var(--primary-light);
            color: var(--primary);
        }

        .dept-badge {
            background-color: var(--gray-200);
            color: var(--gray-700);
        }

        .user-meta {
            margin-top: auto;
            padding: 1rem 0;
            display: flex;
            justify-content: center;
            gap: 1rem;
        }

        .meta-item {
            display: flex;
            align-items: center;
            gap: 0.375rem;
            font-size: 0.75rem;
            color: var(--gray-600);
        }

        .user-card-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--gray-200);
            display: flex;
            justify-content: center;
        }

        .btn-edit {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.5rem 1.25rem;
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-edit:hover {
            background-color: var(--primary-dark);
        }

        .btn-edit i {
            margin-right: 0.5rem;
        }

        /* User List */
        .users-list {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            overflow: hidden;
        }

        .table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin: 0;
        }

        .table th {
            background-color: var(--gray-100);
            color: var(--gray-700);
            font-weight: 600;
            padding: 0.75rem 1rem;
            text-align: left;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.025em;
            border-bottom: 1px solid var(--gray-200);
        }

        .table td {
            padding: 0.75rem 1rem;
            border-bottom: 1px solid var(--gray-200);
            vertical-align: middle;
        }

        .table tr:last-child td {
            border-bottom: none;
        }

        .table tr:hover td {
            background-color: var(--gray-50);
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 0.75rem;
        }

        .status-dot.active {
            background-color: var(--success);
            box-shadow: 0 0 0 2px rgba(25, 135, 84, 0.2);
        }

        .status-dot.inactive {
            background-color: var(--secondary);
            box-shadow: 0 0 0 2px rgba(108, 117, 125, 0.2);
        }

        .list-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.875rem;
            color: white;
            margin-right: 0.75rem;
            background-color: var(--primary);
        }

        .list-user-info {
            display: flex;
            flex-direction: column;
        }

        .list-user-name {
            font-weight: 600;
            color: var(--gray-800);
            margin-bottom: 0.125rem;
        }

        .list-user-email {
            font-size: 0.75rem;
            color: var(--gray-600);
        }

        .status-pill {
            display: inline-flex;
            align-items: center;
            padding: 0.375rem 0.75rem;
            border-radius: 50px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .status-pill.active {
            background-color: rgba(25, 135, 84, 0.15);
            color: var(--success);
        }

        .status-pill.inactive {
            background-color: rgba(108, 117, 125, 0.15);
            color: var(--secondary);
        }

        .list-actions {
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
        }

        /* Empty State */
        .empty-state {
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 3rem;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            text-align: center;
        }

        .empty-state-icon {
            font-size: 3rem;
            color: var(--gray-400);
            margin-bottom: 1rem;
        }

        .empty-state-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--gray-800);
            margin-bottom: 0.5rem;
        }

        .empty-state-message {
            color: var(--gray-600);
            margin-bottom: 1.5rem;
            max-width: 300px;
        }

        /* Filter Dropdown */
        .filter-dropdown {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1050;
            width: 100%;
            max-width: 400px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            padding: 1.5rem;
            display: none;
            animation: fadeIn 0.3s;
        }

        .filter-dropdown.show {
            display: block;
        }

        .filter-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .filter-header h3 {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--gray-800);
            margin: 0;
        }

        .btn-close {
            background: transparent;
            border: none;
            color: var(--gray-600);
            font-size: 1.125rem;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        .btn-close:hover {
            color: var(--gray-800);
            background-color: var(--gray-100);
        }

        .filter-options {
            margin-bottom: 1.5rem;
        }

        .filter-group {
            margin-bottom: 1.25rem;
        }

        .filter-group h4 {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--gray-700);
            margin: 0 0 0.75rem;
        }

        .filter-option {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .filter-option label {
            margin-left: 0.625rem;
            font-size: 0.875rem;
            color: var(--gray-700);
            cursor: pointer;
        }

        .filter-actions {
            display: flex;
            justify-content: flex-end;
            gap: 0.75rem;
        }

        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.5rem 1.25rem;
            font-size: 0.875rem;
            font-weight: 500;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
        }

        .btn-light {
            background-color: var(--gray-200);
            color: var(--gray-700);
        }

        .btn-light:hover {
            background-color: var(--gray-300);
        }

        /* Toast */
        .toast-container {
            position: fixed;
            bottom: 1.5rem;
            right: 1.5rem;
            z-index: 1060;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .toast {
            display: flex;
            align-items: flex-start;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            padding: 1rem;
            width: 300px;
            animation: slideIn 0.3s;
        }

        .toast.hiding {
            animation: slideOut 0.3s;
        }

        .toast.success {
            border-left: 4px solid var(--success);
        }

        .toast.error {
            border-left: 4px solid var(--danger);
        }

        .toast-icon {
            margin-right: 0.75rem;
            font-size: 1.25rem;
        }

        .toast.success .toast-icon {
            color: var(--success);
        }

        .toast.error .toast-icon {
            color: var(--danger);
        }

        .toast-content {
            flex: 1;
        }

        .toast-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
            color: var(--gray-800);
        }

        .toast-message {
            font-size: 0.875rem;
            color: var(--gray-700);
        }

        .toast-close {
            background: transparent;
            border: none;
            color: var(--gray-500);
            font-size: 1rem;
            cursor: pointer;
            padding: 0;
            margin-left: 0.75rem;
            transition: all 0.2s;
        }

        .toast-close:hover {
            color: var(--gray-700);
        }

        /* Animations */
        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @@keyframes slideIn {
            from { 
                transform: translateX(100%);
                opacity: 0;
            }
            to { 
                transform: translateX(0);
                opacity: 1;
            }
        }

        @@keyframes slideOut {
            from { 
                transform: translateX(0);
                opacity: 1;
            }
            to { 
                transform: translateX(100%);
                opacity: 0;
            }
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .search-filter-container {
                flex-direction: column;
                align-items: stretch;
                gap: 0.75rem;
            }

            .search-wrapper {
                max-width: none;
            }

            .users-grid {
                grid-template-columns: 1fr;
            }

            .filter-dropdown {
                max-width: 90%;
            }
        }

        /* Utility classes */
        .d-flex { display: flex; }
        .align-items-center { align-items: center; }
        .text-end { text-align: right; }
        .d-inline-block { display: inline-block; }
    </style>
}

@functions {
    public string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} min ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} days ago";

        return dateTime.ToString("MMM d, yyyy");
    }

    public string GetRoleBadgeClass(string role)
    {
        if (role.Contains("Admin"))
            return "admin";
        if (role.Contains("Manager"))
            return "manager";
        
        return "";
    }
}