@model IEnumerable<AIHelpdeskSupport.ViewModels.UserViewModel>
@{
    ViewData["Title"] = "User Management";
}

<div class="page-header">
    <div>
        <h1 class="page-title">User Management</h1>
        <p class="text-muted">Manage users, roles, and permissions for the AI Helpdesk platform</p>
    </div>
    <div class="page-actions">
        <div class="dropdown me-2">
            <button class="btn btn-outline dropdown-toggle" id="filterDropdown" aria-expanded="false">
                <i class="bi bi-funnel"></i>
                <span>Filter</span>
            </button>
            <div class="dropdown-menu" aria-labelledby="filterDropdown">
                <a class="dropdown-item active" href="#" data-filter="all">All Users</a>
                <a class="dropdown-item" href="#" data-filter="active">Active Only</a>
                <a class="dropdown-item" href="#" data-filter="inactive">Inactive Only</a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="#" data-filter="admin">Administrators</a>
                <a class="dropdown-item" href="#" data-filter="manager">Department Managers</a>
                <a class="dropdown-item" href="#" data-filter="agent">Support Agents</a>
            </div>
        </div>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createUserModal">
            <i class="bi bi-plus-lg"></i>
            <span>Create User</span>
        </button>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <div class="card-header-actions">
            <div class="search-box">
                <i class="bi bi-search search-icon"></i>
                <input type="text" id="userSearch" class="search-input" placeholder="Search users..." aria-label="Search users">
            </div>
            <div class="view-options">
                <button class="btn-icon view-option active" id="gridView" title="Grid View" aria-pressed="true">
                    <i class="bi bi-grid"></i>
                </button>
                <button class="btn-icon view-option" id="listView" title="List View" aria-pressed="false">
                    <i class="bi bi-list-ul"></i>
                </button>
            </div>
        </div>
    </div>
    
    <div class="card-body">
        <!-- Grid View (Default) -->
        <div class="users-grid" id="usersGridView">
            @foreach (var user in Model)
            {
                <div class="user-card animate-card" data-user-id="@user.Id" data-status="@(user.IsActive ? "active" : "inactive")" data-role="@user.Role.ToLower().Replace(" ", "-")">
                    <div class="user-card-header">
                        <div class="user-avatar @(user.IsActive ? "active" : "inactive")">
                            @user.FirstName[0]@user.LastName[0]
                        </div>
                        <div class="user-status @(user.IsActive ? "active" : "inactive")">
                            @(user.IsActive ? "Active" : "Inactive")
                        </div>
                    </div>
                    
                    <div class="user-card-body">
                        <h3 class="user-name">@user.FullName</h3>
                        <div class="user-email">@user.Email</div>
                        
                        <div class="user-details">
                            <div class="user-detail">
                                <div class="detail-label">Department</div>
                                <div class="detail-value">@user.Department</div>
                            </div>
                            <div class="user-detail">
                                <div class="detail-label">Role</div>
                                <div class="detail-value">@user.Role</div>
                            </div>
                        </div>
                        
                        <div class="user-stats">
                            <div class="user-stat">
                                <div class="stat-label">Created</div>
                                <div class="stat-value">@user.CreatedAt.ToString("MMM d, yyyy")</div>
                            </div>
                            <div class="user-stat">
                                <div class="stat-label">Last Login</div>
                                <div class="stat-value">
                                    @if (user.LastLogin.HasValue)
                                    {
                                        <span>@GetTimeAgo(user.LastLogin.Value)</span>
                                    }
                                    else
                                    {
                                        <span>Never</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="user-card-footer">
                        <a href="/Users/Edit/@user.Id" class="btn btn-sm btn-outline-primary">
                            <i class="bi bi-pencil"></i>
                            <span>Edit</span>
                        </a>
                        <div class="dropdown ms-auto">
                            <button class="btn btn-sm btn-icon dropdown-toggle" aria-label="More options">
                                <i class="bi bi-three-dots-vertical"></i>
                            </button>
                            <div class="dropdown-menu dropdown-menu-end">
                                <a class="dropdown-item" href="/Users/Details/@user.Id">
                                    <i class="bi bi-info-circle me-2"></i> View Details
                                </a>
                                <button class="dropdown-item" onclick="resetPassword('@user.Id')">
                                    <i class="bi bi-key me-2"></i> Reset Password
                                </button>
                                <div class="dropdown-divider"></div>
                                <form action="/Users/ToggleStatus/@user.Id" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="dropdown-item @(user.IsActive ? "text-warning" : "text-success")">
                                        <i class="bi @(user.IsActive ? "bi-pause-circle" : "bi-play-circle") me-2"></i>
                                        @(user.IsActive ? "Deactivate" : "Activate")
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
            
            <!-- Create New User Card -->
            <div class="user-card create-card animate-card" onclick="openCreateUserModal()">
                <div class="create-card-content">
                    <div class="create-icon">
                        <i class="bi bi-plus-lg"></i>
                    </div>
                    <div class="create-text">Create New User</div>
                </div>
            </div>
        </div>
        
        <!-- List View (Hidden by default) -->
        <div class="users-list" id="usersListView" style="display: none;">
            <table class="table">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Department</th>
                        <th>Role</th>
                        <th>Created</th>
                        <th>Last Login</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        <tr data-user-id="@user.Id" data-status="@(user.IsActive ? "active" : "inactive")" data-role="@user.Role.ToLower().Replace(" ", "-")">
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="list-avatar @(user.IsActive ? "active" : "inactive")">
                                        @user.FirstName[0]@user.LastName[0]
                                    </div>
                                    <div class="list-user-info">
                                        <div class="list-user-name">@user.FullName</div>
                                        <div class="list-user-email">@user.Email</div>
                                    </div>
                                </div>
                            </td>
                            <td>@user.Department</td>
                            <td>@user.Role</td>
                            <td>@user.CreatedAt.ToString("MMM d, yyyy")</td>
                            <td>
                                @if (user.LastLogin.HasValue)
                                {
                                    <span>@GetTimeAgo(user.LastLogin.Value)</span>
                                }
                                else
                                {
                                    <span>Never</span>
                                }
                            </td>
                            <td>
                                <span class="badge @(user.IsActive ? "bg-success" : "bg-secondary")">
                                    @(user.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td>
                                <div class="list-actions">
                                    <a href="/Users/Edit/@user.Id" class="btn-icon" title="Edit">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                    <div class="dropdown">
                                        <button class="btn-icon dropdown-toggle" aria-label="More options">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <div class="dropdown-menu dropdown-menu-end">
                                            <a class="dropdown-item" href="/Users/Details/@user.Id">
                                                <i class="bi bi-info-circle me-2"></i> View Details
                                            </a>
                                            <button class="dropdown-item" onclick="resetPassword('@user.Id')">
                                                <i class="bi bi-key me-2"></i> Reset Password
                                            </button>
                                            <div class="dropdown-divider"></div>
                                            <form action="/Users/ToggleStatus/@user.Id" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="dropdown-item @(user.IsActive ? "text-warning" : "text-success")">
                                                    <i class="bi @(user.IsActive ? "bi-pause-circle" : "bi-play-circle") me-2"></i>
                                                    @(user.IsActive ? "Deactivate" : "Activate")
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <!-- Empty State (Shows when no users match search/filter) -->
        <div id="emptyState" class="empty-state" style="display: none;">
            <div class="empty-state-icon">
                <i class="bi bi-people"></i>
            </div>
            <h3 class="empty-state-title">No users found</h3>
            <p class="empty-state-message">No users match your current search or filter criteria.</p>
            <button class="btn btn-outline-primary" onclick="resetFilters()">
                <i class="bi bi-arrow-counterclockwise"></i>
                <span>Reset Filters</span>
            </button>
        </div>
    </div>
</div>

<!-- Create User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createUserModalLabel">Create New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createUserForm">
                    <div class="form-group mb-3">
                        <label for="firstName" class="form-label">First Name <span class="required">*</span></label>
                        <input type="text" id="firstName" name="FirstName" class="form-control" required>
                        <div class="invalid-feedback">First name is required</div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="lastName" class="form-label">Last Name <span class="required">*</span></label>
                        <input type="text" id="lastName" name="LastName" class="form-control" required>
                        <div class="invalid-feedback">Last name is required</div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="email" class="form-label">Email <span class="required">*</span></label>
                        <input type="email" id="email" name="Email" class="form-control" required>
                        <div class="invalid-feedback">Please provide a valid email address</div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="department" class="form-label">Department <span class="required">*</span></label>
                        <select id="department" name="Department" class="form-select" required>
                            <option value="">Select Department</option>
                            <option value="Administration">Administration</option>
                            <option value="Customer Service">Customer Service</option>
                            <option value="IT Support">IT Support</option>
                            <option value="Sales">Sales</option>
                            <option value="Billing">Billing</option>
                            <option value="Technical">Technical</option>
                            <option value="Operations">Operations</option>
                        </select>
                        <div class="invalid-feedback">Please select a department</div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="role" class="form-label">Role <span class="required">*</span></label>
                        <select id="role" name="Role" class="form-select" required>
                            <option value="">Select Role</option>
                            <option value="Administrator">Administrator</option>
                            <option value="Department Manager">Department Manager</option>
                            <option value="Support Agent">Support Agent</option>
                        </select>
                        <div class="invalid-feedback">Please select a role</div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <div class="form-switch">
                            <input type="checkbox" id="isActive" name="IsActive" class="form-switch-input" checked>
                            <label for="isActive" class="form-switch-label">Active</label>
                        </div>
                        <div class="form-text">Activate this user immediately</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveUserBtn">Create User</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Bootstrap components
            const createUserModal = new bootstrap.Modal(document.getElementById('createUserModal'));
            
            // Initialize view toggle
            const gridView = document.getElementById('gridView');
            const listView = document.getElementById('listView');
            const usersGridView = document.getElementById('usersGridView');
            const usersListView = document.getElementById('usersListView');
            const emptyState = document.getElementById('emptyState');
            
            // View toggle functionality
            gridView.addEventListener('click', function() {
                setActiveView('grid');
                localStorage.setItem('userViewPreference', 'grid');
            });
            
            listView.addEventListener('click', function() {
                setActiveView('list');
                localStorage.setItem('userViewPreference', 'list');
            });
            
            // Load user preference for view
            const viewPreference = localStorage.getItem('userViewPreference');
            if (viewPreference === 'list') {
                setActiveView('list');
            } else {
                setActiveView('grid');
            }
            
            function setActiveView(view) {
                if (view === 'list') {
                    listView.classList.add('active');
                    listView.setAttribute('aria-pressed', 'true');
                    gridView.classList.remove('active');
                    gridView.setAttribute('aria-pressed', 'false');
                    usersListView.style.display = 'block';
                    usersGridView.style.display = 'none';
                } else {
                    gridView.classList.add('active');
                    gridView.setAttribute('aria-pressed', 'true');
                    listView.classList.remove('active');
                    listView.setAttribute('aria-pressed', 'false');
                    usersGridView.style.display = 'grid';
                    usersListView.style.display = 'none';
                }
                
                updateEmptyState();
            }
            
            // Search functionality
            const userSearch = document.getElementById('userSearch');
            let activeFilter = 'all';
            
            userSearch.addEventListener('input', function() {
                filterUsers();
            });
            
            // Filter dropdown functionality
            document.querySelectorAll('[data-filter]').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Update active filter
                    activeFilter = this.dataset.filter;
                    
                    // Update UI
                    document.querySelectorAll('[data-filter]').forEach(el => {
                        el.classList.remove('active');
                    });
                    this.classList.add('active');
                    
                    // Update dropdown button text
                    const dropdownButton = document.querySelector('#filterDropdown span');
                    dropdownButton.textContent = this.textContent;
                    
                    // Apply filter
                    filterUsers();
                    
                    // Close dropdown
                    const dropdown = document.querySelector('#filterDropdown + .dropdown-menu');
                    dropdown.classList.remove('show');
                });
            });
            
            function filterUsers() {
                const searchTerm = userSearch.value.toLowerCase();
                let visibleCount = 0;
                
                // Helper to check if user matches current filters
                function userMatchesFilters(userElement) {
                    // Status filter
                    if (activeFilter === 'active' && userElement.dataset.status !== 'active') return false;
                    if (activeFilter === 'inactive' && userElement.dataset.status !== 'inactive') return false;
                    
                    // Role filter
                    if (activeFilter === 'admin' && !userElement.dataset.role.includes('administrator')) return false;
                    if (activeFilter === 'manager' && !userElement.dataset.role.includes('manager')) return false;
                    if (activeFilter === 'agent' && !userElement.dataset.role.includes('agent')) return false;
                    
                    // Search term
                    if (searchTerm) {
                        const userCard = userElement.cloneNode(true);
                        return userCard.textContent.toLowerCase().includes(searchTerm);
                    }
                    
                    return true;
                }
                
                // Filter grid view
                document.querySelectorAll('#usersGridView .user-card:not(.create-card)').forEach(card => {
                    if (userMatchesFilters(card)) {
                        card.style.display = 'flex';
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                });
                
                // Filter list view
                document.querySelectorAll('#usersListView tbody tr').forEach(row => {
                    if (userMatchesFilters(row)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
                
                updateEmptyState(visibleCount === 0);
            }
            
            function updateEmptyState(isEmpty = false) {
                if (isEmpty) {
                    emptyState.style.display = 'flex';
                    usersGridView.classList.add('d-none');
                    usersListView.classList.add('d-none');
                } else {
                    emptyState.style.display = 'none';
                    if (gridView.classList.contains('active')) {
                        usersGridView.classList.remove('d-none');
                    } else {
                        usersListView.classList.remove('d-none');
                    }
                }
            }
            
            // Reset filters function
            window.resetFilters = function() {
                userSearch.value = '';
                activeFilter = 'all';
                
                // Update dropdown button text
                const dropdownButton = document.querySelector('#filterDropdown span');
                dropdownButton.textContent = 'Filter';
                
                // Update active state in dropdown
                document.querySelectorAll('[data-filter]').forEach(el => {
                    el.classList.remove('active');
                    if (el.dataset.filter === 'all') {
                        el.classList.add('active');
                    }
                });
                
                filterUsers();
            };
            
            // Create user form handling
            const createUserForm = document.getElementById('createUserForm');
            const saveUserBtn = document.getElementById('saveUserBtn');
            
            saveUserBtn.addEventListener('click', function() {
                if (!createUserForm.checkValidity()) {
                    createUserForm.classList.add('was-validated');
                    return;
                }
                
                // Collect form data
                const formData = new FormData(createUserForm);
                const userData = Object.fromEntries(formData.entries());
                
                // In a real app, this would be an AJAX call to the server
                fetch('/Users/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(userData)
                })
                .then(response => {
                    if (response.ok) {
                        showToast('success', 'User created successfully!');
                        createUserModal.hide();
                        createUserForm.reset();
                        createUserForm.classList.remove('was-validated');
                        
                        // In a real app, you'd either redirect or update the UI with the new user
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        return response.json().then(data => {
                            throw new Error(data.message || 'Error creating user');
                        });
                    }
                })
                .catch(error => {
                    showToast('error', error.message);
                });
            });
            
            // Handle dropdown toggling
            document.addEventListener('click', function(e) {
                const dropdownToggle = e.target.closest('.dropdown-toggle');
                if (dropdownToggle) {
                    const dropdownMenu = dropdownToggle.nextElementSibling;
                    dropdownMenu.classList.toggle('show');
                    e.stopPropagation();
                } else if (!e.target.closest('.dropdown-menu')) {
                    // Close all dropdowns when clicking outside
                    document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
                        menu.classList.remove('show');
                    });
                }
            });
            
            // Prevent dropdown menu close when clicking inside it
            document.querySelectorAll('.dropdown-menu').forEach(menu => {
                menu.addEventListener('click', function(e) {
                    if (e.target.tagName !== 'A' && !e.target.closest('form')) {
                        e.stopPropagation();
                    }
                });
            });
        });
        
        // Open create user modal
        function openCreateUserModal() {
            const modal = new bootstrap.Modal(document.getElementById('createUserModal'));
            modal.show();
        }
        
        // Reset password function
        function resetPassword(userId) {
            // In a real app, this would call the server
            fetch(`/Users/ResetPassword/${userId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (response.ok) {
                    showToast('success', 'Password reset email has been sent!');
                } else {
                    return response.json().then(data => {
                        throw new Error(data.message || 'Error resetting password');
                    });
                }
            })
            .catch(error => {
                showToast('error', error.message);
            });
        }
        
        // Toast notification function
        function showToast(type, message) {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast-notification ${type}`;
            
            const icon = type === 'success' 
                ? '<i class="bi bi-check-circle"></i>' 
                : '<i class="bi bi-exclamation-circle"></i>';
            
            toast.innerHTML = `
                <div class="toast-icon">
                    ${icon}
                </div>
                <div class="toast-content">
                    <div class="toast-title">${type === 'success' ? 'Success' : 'Error'}</div>
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close" aria-label="Close notification">
                    <i class="bi bi-x"></i>
                </button>
            `;
            
            // Add to document
            document.body.appendChild(toast);
            
            // Show toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            // Auto-hide toast after 5 seconds
            const hideTimeout = setTimeout(() => {
                hideToast(toast);
            }, 5000);
            
            // Close button functionality
            const closeBtn = toast.querySelector('.toast-close');
            closeBtn.addEventListener('click', function() {
                clearTimeout(hideTimeout);
                hideToast(toast);
            });
        }
        
        function hideToast(toast) {
            toast.classList.remove('show');
            setTimeout(() => {
                if (toast.parentNode) {
                    document.body.removeChild(toast);
                }
            }, 300);
        }
    </script>
}

@section Styles {
    <style>
        /* User Management Styles */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .page-title {
            font-size: 1.75rem;
            font-weight: 600;
            margin: 0 0 0.25rem;
        }
        
        .page-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        /* Card Header Actions */
        .card-header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
        }
        
        .search-box {
            position: relative;
            width: 300px;
        }
        
        .search-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--color-gray-500);
        }
        
        .search-input {
            padding: 0.5rem 0.75rem 0.5rem 2.25rem;
            border: 1px solid var(--color-gray-300);
            border-radius: var(--border-radius);
            width: 100%;
        }
        
        .search-input:focus {
            outline: none;
            border-color: var(--color-primary);
            box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.25);
        }
        
        .view-options {
            display: flex;
            gap: 0.5rem;
        }
        
        .view-option {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: var(--border-radius);
            border: 1px solid transparent;
            background-color: transparent;
            color: var(--color-gray-600);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .view-option:hover {
            background-color: var(--color-gray-100);
            color: var(--color-gray-700);
        }
        
        .view-option.active {
            background-color: var(--color-gray-100);
            color: var(--color-primary);
            border-color: var(--color-primary);
        }
        
        /* Users Grid */
        .users-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }
        
        .user-card {
            background-color: white;
            border-radius: var(--border-radius);
            border: 1px solid var(--color-gray-200);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            animation: fadeInUp 0.5s ease forwards;
            opacity: 0;
            height: 100%;
        }
        
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .user-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
            border-color: var(--color-gray-300);
        }
        
        .user-card-header {
            padding: 1.25rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid var(--color-gray-200);
        }
        
        .user-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 1.125rem;
            color: white;
            text-transform: uppercase;
        }
        
        .user-avatar.active {
            background-color: var(--color-primary);
        }
        
        .user-avatar.inactive {
            background-color: var(--color-secondary);
        }
        
        .user-status {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.5rem;
            border-radius: 100px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .user-status.active {
            background-color: rgba(32, 201, 151, 0.1);
            color: var(--color-success);
        }
        
        .user-status.inactive {
            background-color: rgba(108, 117, 125, 0.1);
            color: var(--color-secondary);
        }
        
        .user-card-body {
            padding: 1.25rem;
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .user-name {
            font-size: 1.125rem;
            font-weight: 600;
            margin: 0 0 0.25rem;
        }
        
        .user-email {
            font-size: 0.875rem;
            color: var(--color-gray-500);
            margin-bottom: 1.25rem;
            word-break: break-all;
        }
        
        .user-details {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            margin-bottom: 1.25rem;
        }
        
        .user-detail {
            min-width: 0;
        }
        
        .detail-label {
            font-size: 0.75rem;
            color: var(--color-gray-500);
            margin-bottom: 0.25rem;
        }
        
        .detail-value {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--color-gray-800);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .user-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            margin-top: auto;
            padding-top: 1rem;
            border-top: 1px solid var(--color-gray-200);
        }
        
        .user-stat {
            min-width: 0;
        }
        
        .stat-label {
            font-size: 0.75rem;
            color: var(--color-gray-500);
            margin-bottom: 0.25rem;
        }
        
        .stat-value {
            font-size: 0.875rem;
            color: var(--color-gray-800);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .user-card-footer {
            padding: 1rem 1.25rem;
            border-top: 1px solid var(--color-gray-200);
            display: flex;
            align-items: center;
        }
        
        /* Create Card */
        .create-card {
            border: 2px dashed var(--color-gray-300);
            background-color: var(--color-gray-50);
            cursor: pointer;
            min-height: 280px;
            justify-content: center;
            align-items: center;
            transition: all 0.3s ease;
        }
        
        .create-card:hover {
            border-color: var(--color-primary);
            background-color: rgba(13, 110, 253, 0.05);
        }
        
        .create-card-content {
            text-align: center;
            padding: 2rem;
        }
        
        .create-icon {
            width: 64px;
            height: 64px;
            border-radius: 50%;
            background-color: rgba(13, 110, 253, 0.1);
            color: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin: 0 auto 1rem;
            transition: all 0.3s ease;
        }
        
        .create-card:hover .create-icon {
            transform: scale(1.1);
            background-color: var(--color-primary);
            color: white;
        }
        
        .create-text {
            font-weight: 500;
            color: var(--color-gray-700);
            transition: color 0.3s ease;
        }
        
        .create-card:hover .create-text {
            color: var(--color-primary);
        }
        
        /* List View */
        .list-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.875rem;
            color: white;
            margin-right: 1rem;
            text-transform: uppercase;
        }
        
        .list-avatar.active {
            background-color: var(--color-primary);
        }
        
        .list-avatar.inactive {
            background-color: var(--color-secondary);
        }
        
        .list-user-info {
            min-width: 0;
        }
        
        .list-user-name {
            font-weight: 500;
            margin-bottom: 0.25rem;
        }
        
        .list-user-email {
            font-size: 0.75rem;
            color: var(--color-gray-500);
        }
        
        .list-actions {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        /* Empty State */
        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 3rem 1rem;
            text-align: center;
        }
        
        .empty-state-icon {
            font-size: 3rem;
            color: var(--color-gray-400);
            margin-bottom: 1rem;
        }
        
        .empty-state-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--color-gray-700);
        }
        
        .empty-state-message {
            color: var(--color-gray-500);
            margin-bottom: 1.5rem;
            max-width: 400px;
        }
        
        /* Toast Notification */
        .toast-notification {
            position: fixed;
            bottom: 24px;
            right: 24px;
            display: flex;
            align-items: flex-start;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-lg);
            padding: 1rem;
            width: 320px;
            z-index: 1000;
            transform: translateY(100%);
            opacity: 0;
            transition: all 0.3s ease;
        }
        
        .toast-notification.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        .toast-notification.success {
            border-left: 4px solid var(--color-success);
        }
        
        .toast-notification.error {
            border-left: 4px solid var(--color-danger);
        }
        
        .toast-icon {
            margin-right: 0.75rem;
            font-size: 1.25rem;
        }
        
        .toast-notification.success .toast-icon {
            color: var(--color-success);
        }
        
        .toast-notification.error .toast-icon {
            color: var(--color-danger);
        }
        
        .toast-content {
            flex: 1;
        }
        
        .toast-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }
        
        .toast-message {
            font-size: 0.875rem;
            color: var(--color-gray-600);
        }
        
        .toast-close {
            background: none;
            border: none;
            font-size: 1.25rem;
            color: var(--color-gray-500);
            cursor: pointer;
            padding: 0;
            margin-left: 0.75rem;
        }
        
        .toast-close:hover {
            color: var(--color-gray-700);
        }
        
        /* Form validation styles */
        .was-validated .form-control:invalid {
            border-color: var(--color-danger);
            padding-right: calc(1.5em + 0.75rem);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }
        
        .was-validated .form-control:valid {
            border-color: var(--color-success);
            padding-right: calc(1.5em + 0.75rem);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }
        
        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: var(--color-danger);
        }
        
        .was-validated .form-control:invalid ~ .invalid-feedback {
            display: block;
        }
        
        /* Helper Classes */
        .required {
            color: var(--color-danger);
        }
        
        .mb-3 {
            margin-bottom: 1rem;
        }
        
        .ms-auto {
            margin-left: auto;
        }
        
        .me-2 {
            margin-right: 0.5rem;
        }
        
        .d-flex {
            display: flex;
        }
        
        .d-none {
            display: none !important;
        }
        
        .align-items-center {
            align-items: center;
        }
        
        .d-inline {
            display: inline;
        }
        
        /* Responsive Adjustments */
        @@media (max-width: 1200px) {
            .users-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .search-box {
                width: 250px;
            }
        }
        
        @@media (max-width: 992px) {
            .page-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .page-actions {
                width: 100%;
                justify-content: space-between;
            }
            
            .card-header-actions {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .search-box {
                width: 100%;
            }
            
            .view-options {
                align-self: flex-end;
            }
        }
        
        @@media (max-width: 768px) {
            .users-grid {
                grid-template-columns: 1fr;
            }
            
            .user-details,
            .user-stats {
                grid-template-columns: 1fr;
            }
            
            .list-user-info {
                max-width: 150px;
            }
            
            .list-actions {
                flex-direction: column;
                align-items: flex-end;
            }
        }
    </style>
}

@functions {
    public string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        
        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} days ago";
        
        return dateTime.ToString("MMM d, yyyy");
    }
}